{"ast":null,"code":"var _jsxFileName = \"/Users/evanbyrnes/Pycharm-python-workspace/T13_SP/client/src/components/Directions.js\";\nimport React from \"react\";\nimport PlacesAutocomplete, { geocodeByAddress, getLatLng } from \"react-places-autocomplete\";\n\nconst {\n  Component\n} = require(\"react\");\n\nconst {\n  DirectionsRenderer,\n  DirectionsService\n} = require(\"@react-google-maps/api\");\n\nclass Directions extends Component {\n  constructor(props) {\n    super(props);\n\n    this.handleChange = address => {\n      this.setState({\n        address\n      });\n    };\n\n    this.handleSelect = address => {\n      geocodeByAddress(address).then(results => getLatLng(results[0])).then(latLng => console.log(\"Success\", latLng)).catch(error => console.error(\"Error\", error));\n      this.setState({\n        address\n      });\n    };\n\n    this.state = {\n      response: null,\n      travelMode: \"TRANSIT\",\n      origin: \"\",\n      destination: \"\",\n      address: \"\"\n    };\n    this.directionsCallback = this.directionsCallback.bind(this);\n    this.getOrigin = this.getOrigin.bind(this);\n    this.getDestination = this.getDestination.bind(this);\n    this.onClick = this.onClick.bind(this);\n    this.onMapClick = this.onMapClick.bind(this);\n  }\n\n  directionsCallback(response) {\n    console.log(\"hi, \", response);\n\n    if (response !== null) {\n      if (response.status === \"OK\") {\n        this.setState(() => ({\n          response\n        }));\n      } else {\n        console.log(\"response: \", response);\n      }\n    }\n  }\n\n  getOrigin(ref) {\n    this.origin = ref;\n  }\n\n  getDestination(ref) {\n    this.destination = ref;\n  }\n\n  onClick() {\n    if (this.origin.value !== \"\" && this.destination.value !== \"\") {\n      this.setState(() => ({\n        origin: this.origin.value,\n        destination: this.destination.value\n      }));\n    }\n  }\n\n  onMapClick(...args) {\n    console.log(\"onClick args: \", args);\n  }\n\n  // onLoad(autocomplete) {\n  //   console.log(\"autocomplete: \", autocomplete);\n  //   this.autocomplete = autocomplete;\n  // }\n  // onPlaceChanged() {\n  //   if (this.autocomplete !== null) {\n  //     console.log(this.autocomplete.getPlace());\n  //   } else {\n  //     console.log(\"Autocomplete is not loaded yet!\");\n  //   }\n  // }\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"boxes\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"row\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"col-md-6 col-lg-4\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(PlacesAutocomplete, {\n      value: this.state.address,\n      onChange: this.handleChange,\n      onSelect: this.handleSelect,\n      searchOptions: {\n        location: new window.google.maps.LatLng(53, -6),\n        radius: 2000,\n        types: [\"address\"]\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 15\n      }\n    }, ({\n      getInputProps,\n      suggestions,\n      getSuggestionItemProps,\n      loading\n    }) => /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 19\n      }\n    }, /*#__PURE__*/React.createElement(\"input\", Object.assign({\n      ref: this.getOrigin\n    }, getInputProps({\n      placeholder: \"Origin\",\n      className: \"location-search-input\"\n    }), {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 21\n      }\n    })), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"autocomplete-dropdown-container\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 21\n      }\n    }, loading && /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 35\n      }\n    }, \"Loading...\"), suggestions.map(suggestion => {\n      // inline style for demonstration purpose\n      const style = suggestion.active ? {\n        backgroundColor: \"#42a5f5\",\n        cursor: \"pointer\"\n      } : {\n        backgroundColor: \"#ffffff\",\n        cursor: \"pointer\"\n      };\n      return /*#__PURE__*/React.createElement(\"div\", Object.assign({\n        className: \"input-suggestion\"\n      }, getSuggestionItemProps(suggestion, {\n        style\n      }), {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 130,\n          columnNumber: 27\n        }\n      }), /*#__PURE__*/React.createElement(\"span\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 136,\n          columnNumber: 29\n        }\n      }, suggestion.description));\n    }))))), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"col-md-6 col-lg-4\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 145,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(PlacesAutocomplete, {\n      value: this.state.address,\n      onChange: this.handleChange,\n      onSelect: this.handleSelect,\n      searchOptions: {\n        location: new window.google.maps.LatLng(53, -6),\n        radius: 2000,\n        types: [\"address\"]\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 146,\n        columnNumber: 15\n      }\n    }, ({\n      getInputProps,\n      suggestions,\n      getSuggestionItemProps,\n      loading\n    }) => /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 162,\n        columnNumber: 19\n      }\n    }, /*#__PURE__*/React.createElement(\"input\", Object.assign({\n      ref: this.getDestination\n    }, getInputProps({\n      placeholder: \"Destination\",\n      className: \"location-search-input\"\n    }), {\n      onSelectCapture: this.onClick,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 163,\n        columnNumber: 21\n      }\n    })), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"autocomplete-dropdown-container\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 171,\n        columnNumber: 21\n      }\n    }, loading && /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 172,\n        columnNumber: 35\n      }\n    }, \"Loading...\"), suggestions.map(suggestion => {\n      // inline style for demonstration purpose\n      const style = suggestion.active ? {\n        backgroundColor: \"#42a5f5\",\n        cursor: \"pointer\"\n      } : {\n        backgroundColor: \"#ffffff\",\n        cursor: \"pointer\"\n      };\n      return /*#__PURE__*/React.createElement(\"div\", Object.assign({\n        className: \"input-suggestion\"\n      }, getSuggestionItemProps(suggestion, {\n        style\n      }), {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 179,\n          columnNumber: 27\n        }\n      }), /*#__PURE__*/React.createElement(\"span\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 185,\n          columnNumber: 29\n        }\n      }, suggestion.description));\n    }))))))), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"map-container\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 197,\n        columnNumber: 9\n      }\n    }, this.state.destination !== \"\" && this.state.origin !== \"\" && /*#__PURE__*/React.createElement(DirectionsService // required\n    , {\n      options: {\n        destination: this.state.destination,\n        origin: this.state.origin,\n        travelMode: this.state.travelMode\n      } // required\n      ,\n      callback: this.directionsCallback,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 199,\n        columnNumber: 13\n      }\n    }), this.state.response !== null && /*#__PURE__*/React.createElement(DirectionsRenderer // required\n    , {\n      options: {\n        directions: this.state.response\n      },\n      panel: document.getElementById(\"panel\"),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 212,\n        columnNumber: 13\n      }\n    })));\n  }\n\n}\n\nexport default Directions;\n\nclass DOnkey extends Component {\n  constructor(props) {\n    super(props);\n\n    this.handleChange = address => {\n      this.setState({\n        address\n      });\n    };\n\n    this.handleSelect = address => {\n      geocodeByAddress(address).then(results => getLatLng(results[0])).then(latLng => console.log(\"Success\", latLng)).catch(error => console.error(\"Error\", error));\n      this.setState({\n        address\n      });\n    };\n\n    this.state = {\n      address: \"\"\n    };\n  }\n\n}","map":{"version":3,"sources":["/Users/evanbyrnes/Pycharm-python-workspace/T13_SP/client/src/components/Directions.js"],"names":["React","PlacesAutocomplete","geocodeByAddress","getLatLng","Component","require","DirectionsRenderer","DirectionsService","Directions","constructor","props","handleChange","address","setState","handleSelect","then","results","latLng","console","log","catch","error","state","response","travelMode","origin","destination","directionsCallback","bind","getOrigin","getDestination","onClick","onMapClick","status","ref","value","args","render","location","window","google","maps","LatLng","radius","types","getInputProps","suggestions","getSuggestionItemProps","loading","placeholder","className","map","suggestion","style","active","backgroundColor","cursor","description","directions","document","getElementById","DOnkey"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport PlacesAutocomplete, {\n  geocodeByAddress,\n  getLatLng,\n} from \"react-places-autocomplete\";\nconst { Component } = require(\"react\");\nconst {\n  DirectionsRenderer,\n  DirectionsService,\n} = require(\"@react-google-maps/api\");\n\nclass Directions extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      response: null,\n      travelMode: \"TRANSIT\",\n      origin: \"\",\n      destination: \"\",\n      address: \"\",\n    };\n\n    this.directionsCallback = this.directionsCallback.bind(this);\n    this.getOrigin = this.getOrigin.bind(this);\n    this.getDestination = this.getDestination.bind(this);\n    this.onClick = this.onClick.bind(this);\n    this.onMapClick = this.onMapClick.bind(this);\n  }\n\n  directionsCallback(response) {\n    console.log(\"hi, \", response);\n\n    if (response !== null) {\n      if (response.status === \"OK\") {\n        this.setState(() => ({\n          response,\n        }));\n      } else {\n        console.log(\"response: \", response);\n      }\n    }\n  }\n\n  getOrigin(ref) {\n    this.origin = ref;\n  }\n\n  getDestination(ref) {\n    this.destination = ref;\n  }\n\n  onClick() {\n    if (this.origin.value !== \"\" && this.destination.value !== \"\") {\n      this.setState(() => ({\n        origin: this.origin.value,\n        destination: this.destination.value,\n      }));\n    }\n  }\n\n  onMapClick(...args) {\n    console.log(\"onClick args: \", args);\n  }\n\n  handleChange = (address) => {\n    this.setState({ address });\n  };\n\n  handleSelect = (address) => {\n    geocodeByAddress(address)\n      .then((results) => getLatLng(results[0]))\n      .then((latLng) => console.log(\"Success\", latLng))\n      .catch((error) => console.error(\"Error\", error));\n    this.setState({ address });\n  };\n\n  // onLoad(autocomplete) {\n  //   console.log(\"autocomplete: \", autocomplete);\n\n  //   this.autocomplete = autocomplete;\n  // }\n\n  // onPlaceChanged() {\n  //   if (this.autocomplete !== null) {\n  //     console.log(this.autocomplete.getPlace());\n  //   } else {\n  //     console.log(\"Autocomplete is not loaded yet!\");\n  //   }\n  // }\n\n  render() {\n    return (\n      <div className=\"\">\n        <div className=\"boxes\">\n          <div className=\"row\">\n            <div className=\"col-md-6 col-lg-4\">\n              <PlacesAutocomplete\n                value={this.state.address}\n                onChange={this.handleChange}\n                onSelect={this.handleSelect}\n                searchOptions={{\n                  location: new window.google.maps.LatLng(53, -6),\n                  radius: 2000,\n                  types: [\"address\"],\n                }}\n              >\n                {({\n                  getInputProps,\n                  suggestions,\n                  getSuggestionItemProps,\n                  loading,\n                }) => (\n                  <div>\n                    <input\n                      ref={this.getOrigin}\n                      {...getInputProps({\n                        placeholder: \"Origin\",\n                        className: \"location-search-input\",\n                      })}\n                    />\n                    <div className=\"autocomplete-dropdown-container\">\n                      {loading && <div>Loading...</div>}\n                      {suggestions.map((suggestion) => {\n                        // inline style for demonstration purpose\n                        const style = suggestion.active\n                          ? { backgroundColor: \"#42a5f5\", cursor: \"pointer\" }\n                          : { backgroundColor: \"#ffffff\", cursor: \"pointer\" };\n                        return (\n                          <div\n                            className=\"input-suggestion\"\n                            {...getSuggestionItemProps(suggestion, {\n                              style,\n                            })}\n                          >\n                            <span>{suggestion.description}</span>\n                          </div>\n                        );\n                      })}\n                    </div>\n                  </div>\n                )}\n              </PlacesAutocomplete>\n            </div>\n            <div className=\"col-md-6 col-lg-4\">\n              <PlacesAutocomplete\n                value={this.state.address}\n                onChange={this.handleChange}\n                onSelect={this.handleSelect}\n                searchOptions={{\n                  location: new window.google.maps.LatLng(53, -6),\n                  radius: 2000,\n                  types: [\"address\"],\n                }}\n              >\n                {({\n                  getInputProps,\n                  suggestions,\n                  getSuggestionItemProps,\n                  loading,\n                }) => (\n                  <div>\n                    <input\n                      ref={this.getDestination}\n                      {...getInputProps({\n                        placeholder: \"Destination\",\n                        className: \"location-search-input\",\n                      })}\n                      onSelectCapture={this.onClick}\n                    />\n                    <div className=\"autocomplete-dropdown-container\">\n                      {loading && <div>Loading...</div>}\n                      {suggestions.map((suggestion) => {\n                        // inline style for demonstration purpose\n                        const style = suggestion.active\n                          ? { backgroundColor: \"#42a5f5\", cursor: \"pointer\" }\n                          : { backgroundColor: \"#ffffff\", cursor: \"pointer\" };\n                        return (\n                          <div\n                            className=\"input-suggestion\"\n                            {...getSuggestionItemProps(suggestion, {\n                              style,\n                            })}\n                          >\n                            <span>{suggestion.description}</span>\n                          </div>\n                        );\n                      })}\n                    </div>\n                  </div>\n                )}\n              </PlacesAutocomplete>\n            </div>\n          </div>\n        </div>\n\n        <div className=\"map-container\">\n          {this.state.destination !== \"\" && this.state.origin !== \"\" && (\n            <DirectionsService\n              // required\n              options={{\n                destination: this.state.destination,\n                origin: this.state.origin,\n                travelMode: this.state.travelMode,\n              }}\n              // required\n              callback={this.directionsCallback}\n            />\n          )}\n\n          {this.state.response !== null && (\n            <DirectionsRenderer\n              // required\n              options={{\n                directions: this.state.response,\n              }}\n              panel={document.getElementById(\"panel\")}\n            />\n          )}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Directions;\n\nclass DOnkey extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      address: \"\",\n    };\n  }\n\n  handleChange = (address) => {\n    this.setState({ address });\n  };\n\n  handleSelect = (address) => {\n    geocodeByAddress(address)\n      .then((results) => getLatLng(results[0]))\n      .then((latLng) => console.log(\"Success\", latLng))\n      .catch((error) => console.error(\"Error\", error));\n    this.setState({ address });\n  };\n}\n"]},"metadata":{},"sourceType":"module"}