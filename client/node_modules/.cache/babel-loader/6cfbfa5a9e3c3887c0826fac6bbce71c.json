{"ast":null,"code":"var _jsxFileName = \"/Users/evanbyrnes/Pycharm-python-workspace/T13_SP/client/src/App.js\";\n// Importing outside developed components.\nimport React, { useState } from \"react\";\nimport { useLoadScript, GoogleMap, Marker, InfoWindow, MarkerClusterer, DirectionsRenderer, DirectionsService } from \"@react-google-maps/api\";\nimport Container from \"react-bootstrap/Container\"; // import Form from \"react-bootstrap/Form\";\n\nimport Button from \"react-bootstrap/Button\";\nimport styled from \"styled-components\"; // Importing self-developed components.\n\nimport CustomNavBar from \"./components/CustomNavBar\";\nimport FilterRoute from \"./components/FilterRoute\";\nimport StopSearch from \"./components/StopSearch\";\nimport Locate from \"./components/Locate\"; // import JourneySearch from \"./components/JourneySearch\";\n// import StopsJourneySearch from \"./components/StopsJourneySearch\";\n\nimport PredictionInput from \"./components/PredictionInput\"; // import Api from \"./components/Api\";\n\nimport RtpiApi from \"./components/RtpiApi\"; // import DateTimeSelector from \"./components/DateTimeSelector\";\n// Importing outside developed css.\n\nimport \"react-datepicker/dist/react-datepicker.css\";\nimport \"./styles.css\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"@reach/combobox/styles.css\"; // Importing Google Maps Api Key.\n\nimport googleMapApiKey from \"./config\"; // Defining libraries for Google Places\n\nconst libraries = [\"places\"]; // Defined styling for separation of page displayed.\n\nconst Wrapper = styled.main`\n  width: 100%;\n  height: 100%;\n`; // Importing the Dublin Bus API stops data\n\nconst data = require(\"./data/DublinBusStops.json\"); // // consts: [53.349804, -6.260310] - Dublin\n\n\nconst dublinCenter = require(\"./data/DublinCenter.json\"); // Importing custom styles to customize the style of Google Map...\n// important for including and excluding certain place markers etc.\n\n\nconst styles = require(\"./data/GoogleMapStyles.json\"); // Defined custom styles and location for Google Map.\n\n\nconst mapOptions = {\n  styles: styles,\n  disableDefaultUI: true,\n  zoomControl: true,\n  maxZoom: 17,\n  minZoom: 11\n};\nconst mapContainerStyle = {\n  height: \"93vh\"\n}; // Icon used to represent a bus stop on the map.\n\nconst icon = {\n  url: \"/bus_icon.svg\",\n  scaledSize: {\n    width: 18,\n    height: 18\n  }\n}; // Icons used when Markers are clustered.\n\nconst options = {\n  imagePath: \"https://developers.google.com/maps/documentation/javascript/examples/markerclusterer/m\"\n}; // Parsing the Stops data into various object shapes.\n\nconst rawData = data.results;\nconst myStops = rawData.map(stop => ({\n  description: \"Stop \" + stop.stopid + \", \" + stop.fullname,\n  type: \"Feature\",\n  properties: {\n    id: stop.stopid,\n    fullname: stop.fullname,\n    routes: stop.operators[0].routes\n  },\n  geometry: {\n    type: \"Point\",\n    pos: {\n      lat: parseFloat(stop.latitude),\n      lng: parseFloat(stop.longitude)\n    }\n  }\n}));\nconst parsedStops = myStops.map(parsed => ({\n  id: parsed.properties.id,\n  description: parsed.description,\n  geometry: parsed.geometry.pos\n}));\nconst stopDescriptions = [];\n\nfor (var i = 0; i < parsedStops.length; i++) {\n  stopDescriptions.push(parsedStops[i].description);\n}\n\nconst routesArray = [];\nconst duplicateRoutes = [];\n\nfor (var j = 0; j < myStops.length; j++) {\n  routesArray.push(myStops[j].properties.routes);\n}\n\nfor (var k = 0; k < routesArray.length; k++) {\n  for (var l = 0; l < routesArray[k].length; l++) {\n    duplicateRoutes.push(routesArray[k][l]);\n  }\n}\n\nconst allRoutes = duplicateRoutes.filter((a, b) => duplicateRoutes.indexOf(a) === b); // Main function for the SPA, generating the Map/Page.\n\nexport default function App() {\n  const {\n    isLoaded,\n    loadError\n  } = useLoadScript({\n    googleMapsApiKey: googleMapApiKey,\n    libraries\n  });\n  const center = dublinCenter;\n  const [zoom, setZoom] = useState(11); // The general things we need to track in state:\n\n  const [selectedPlace, setSelectedPlace] = useState(null);\n  const [markerMap, setMarkerMap] = useState({});\n  const [infoOpen, setInfoOpen] = useState(false);\n  const [markers, setMarkers] = useState([]);\n  const [selected, setSelected] = useState(null);\n  const [stopNumber, setStopNumber] = useState(0); // These are being used to track selected stop numbers\n\n  const [originNumber, setOriginNumber] = useState(0);\n  const [destinationNumber, setDestinationNumber] = useState(0); // This is used to track the string value of selected routes.\n\n  const [routeString, setRouteString] = useState(\"\"); // The things for Directions (Service and Renderer) we need to track in state.\n\n  const [response, setResponse] = useState(null);\n  const [origin, setOrigin] = useState(\"\");\n  const [destination, setDestination] = useState(\"\"); // This is being used to track in state which set of markers is displayed. (Clusters or Route Markers)\n\n  const [markerSelection, setMarkerSelection] = useState(\"True\"); // The things for selected time (Hour, Day, Month) we need to track in state.\n\n  const [selectedTime, setSelectedTime] = useState(new Date()); // Setting the time, day and month values as the current time.\n  // This allows for user to make prediction for journey that occurs at\n  // this time without having to select the time.\n\n  const initialTime = selectedTime.toTimeString().substring(0, 2);\n  const [initialDay, initialMonth] = selectedTime.toDateString().split(\" \");\n  const [timeDayMonth, setTimeDayMonth] = useState([initialTime, initialDay, initialMonth]);\n  const mapRef = React.useRef();\n  const onMapLoad = React.useCallback(map => {\n    mapRef.current = map;\n  }, []); // Orient the map to selected location.\n\n  const panTo = React.useCallback(({\n    lat,\n    lng\n  }) => {\n    mapRef.current.panTo({\n      lat,\n      lng\n    });\n    mapRef.current.setZoom(16); // Allowing only one marker on the map at a time.\n\n    console.log(\"destination here 1\", destination);\n    setDestination(\"\");\n    console.log(\"destination here 2\", destination);\n    setMarkers(current => []);\n    setMarkers(current => [...current, {\n      lat: lat,\n      lng: lng\n    }]);\n  }, []); // Orient the map to the selected route.\n\n  const panTwo = React.useCallback(({\n    lat,\n    lng\n  }) => {\n    mapRef.current.panTo({\n      lat,\n      lng\n    });\n    mapRef.current.setZoom(12);\n  }, []); // We have to create a mapping of our places to actual Marker objects\n\n  const markerLoadHandler = (marker, stop) => {\n    return setMarkerMap(prevState => {\n      return { ...prevState,\n        [stop.properties.id]: marker\n      };\n    });\n  };\n\n  const markerClickHandler = (event, place) => {\n    // Remember which stop was clicked\n    setSelectedPlace(place); // Required so clicking a 2nd marker works as expected\n\n    if (infoOpen) {\n      setInfoOpen(false);\n    }\n\n    setInfoOpen(true);\n  }; // Changing stop realtime info based on user choice.\n\n\n  const stopChoice = number => {\n    setStopNumber(() => parseInt(number.id));\n  }; // Changing origin info based on user choice.\n\n\n  const originChoice = address => {\n    console.log(\"originChoice triggered\", address);\n    setOrigin(() => address); // setOrigin(() => address.results[0].formatted_address);\n  }; // Changing destination info based on user choice.\n\n\n  const destinationChoice = address => {\n    console.log(\"destinationChoice triggered\", address);\n    setDestination(() => address); // setDestination(() => address.results[0].formatted_address);\n  }; // Changing stops of route displayed on based on user choice.\n\n\n  const routeChoice = route => {\n    setRouteString(() => route.routeString);\n  }; // For generating a directions route on the map.\n\n\n  const directionsCallback = response => {\n    if (response !== null) {\n      if (response.status === \"OK\") {\n        console.log(\"response here\", response); // console.log(\n        //   \"Here is the name of Google's favoured route, \",\n        //   response.routes[0].legs[0].steps[0].transit.line.short_name\n        // );\n\n        setResponse(() => ({\n          response\n        }));\n      } else {}\n    }\n  }; //  For which set of markers to display (Clusters or Route Markers).\n\n\n  const markerSelectionChoice = () => {\n    setMarkerSelection(() => \"False\");\n  }; // Temporarily using these to track selected stop numbers\n\n\n  const originNumberChoice = number => {\n    console.log(\"originNumberChoice\", number);\n    setOriginNumber(() => parseInt(number.id));\n  };\n\n  const destinationNumberChoice = number => {\n    console.log(\"destinationNumberChoice\", number);\n    setDestinationNumber(() => parseInt(number.id));\n  }; // For setting the time in state.\n\n\n  const timeChoice = selectedTime => {\n    const time = selectedTime.toTimeString().substring(0, 2);\n    const [day, month] = selectedTime.toDateString().split(\" \");\n    setSelectedTime(selectedTime);\n    setTimeDayMonth([time, day, month]);\n  };\n\n  console.log(\"These are the time values: date-day-month\", timeDayMonth);\n  if (loadError) return \"Error\";\n  if (!isLoaded) return \"Loading...\";\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 261,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Container, {\n    fluid: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 262,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(CustomNavBar, {\n    FilterRoute: FilterRoute,\n    StopSearch: StopSearch,\n    panTo: panTo,\n    stopChoice: stopChoice,\n    routeChoice: routeChoice,\n    parsedStops: parsedStops,\n    stopDescriptions: stopDescriptions,\n    allRoutes: allRoutes,\n    panTwo: panTwo,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 263,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(Wrapper, {\n    style: {\n      width: \"75%\",\n      float: \"left\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 275,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(GoogleMap, {\n    mapContainerStyle: mapContainerStyle,\n    center: center,\n    zoom: zoom,\n    options: mapOptions,\n    onLoad: onMapLoad,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 277,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(Locate, {\n    panTo: panTo,\n    response: response,\n    setResponse: setResponse // setDestination={setDestination}\n    ,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 284,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(RouteInfo, {\n    route: routeString,\n    markerLoadHandler: markerLoadHandler,\n    markerClickHandler: markerClickHandler,\n    markerSelectionChoice: markerSelectionChoice,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 291,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(ClusteredMarkers, {\n    myStops: myStops,\n    markerLoadHandler: markerLoadHandler,\n    markerClickHandler: markerClickHandler,\n    markerSelection: markerSelection,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 298,\n      columnNumber: 13\n    }\n  }), infoOpen && selectedPlace && /*#__PURE__*/React.createElement(InfoWindow, {\n    anchor: markerMap[selectedPlace.properties.id],\n    onCloseClick: () => setInfoOpen(false),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 306,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 310,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"h5\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 311,\n      columnNumber: 19\n    }\n  }, selectedPlace.properties.fullname + \", stop \" + selectedPlace.properties.id), /*#__PURE__*/React.createElement(RtpiApi, {\n    number: selectedPlace.properties.id,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 316,\n      columnNumber: 19\n    }\n  }))), markers.map(marker => /*#__PURE__*/React.createElement(Marker, {\n    key: `${marker.lat}-${marker.lng}`,\n    position: {\n      lat: marker.lat,\n      lng: marker.lng\n    },\n    onClick: () => {\n      setSelected(marker);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 322,\n      columnNumber: 15\n    }\n  })), destination !== \"\" && origin !== \"\" && /*#__PURE__*/React.createElement(DirectionsService, {\n    options: {\n      // destination: { lat: destination.lat, lng: destination.lng },\n      // origin: { lat: origin.lat, lng: origin.lng },\n      destination: destination,\n      origin: origin,\n      travelMode: \"TRANSIT\",\n      provideRouteAlternatives: true,\n      transitOptions: {\n        modes: [\"BUS\"],\n        routingPreference: \"FEWER_TRANSFERS\",\n        departureTime: selectedTime\n      } // transitDetails: { trip_short_name: \"145\" },\n\n    } // required\n    ,\n    callback: directionsCallback,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 331,\n      columnNumber: 15\n    }\n  }), response !== null && /*#__PURE__*/React.createElement(DirectionsRenderer // what you might try to do is iterate over\n  // the route list and find the one with short_name of\n  // selected route, then render that one using routeIndex : i.\n  // required\n  , {\n    options: {\n      directions: response.response,\n      // hideRouteList: true,\n      polylineOptions: {\n        strokeColor: \"red\",\n        strokeWeight: 5\n      },\n      suppressInfoWindows: true,\n      suppressMarkers: false\n    },\n    panel: document.getElementById(\"panel\") // removing all displayed stops upon loading\n    ,\n    onLoad: () => {\n      setRouteString(\"\");\n      setMarkerSelection(\"False\");\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 351,\n      columnNumber: 15\n    }\n  }))), /*#__PURE__*/React.createElement(Wrapper, {\n    style: {\n      width: \"25%\",\n      float: \"right\",\n      maxHeight: \"93vh\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 377,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Container, {\n    style: {\n      paddingTop: \"2vh\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 384,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(PredictionInput, {\n    selectedTime: selectedTime,\n    setSelectedTime: setSelectedTime,\n    timeChoice: timeChoice,\n    timeDayMonth: timeDayMonth,\n    setTimeDayMonth: setTimeDayMonth,\n    parsedStops: parsedStops,\n    stopDescriptions: stopDescriptions,\n    originNumberChoice: originNumberChoice,\n    destinationNumberChoice: destinationNumberChoice,\n    originNumber: originNumber,\n    destinationNumber: destinationNumber,\n    originChoice: originChoice,\n    destinationChoice: destinationChoice,\n    panTo: panTo,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 385,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    id: \"panel\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 401,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(Button, {\n    variant: \"secondary\",\n    size: \"lg\",\n    block: true,\n    onClick: () => window.location.reload(false),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 402,\n      columnNumber: 13\n    }\n  }, \"Reload\")))));\n} // Function that filters the markers on the map\n// according to a user selected route.\n\nfunction RouteInfo(props) {\n  const filteredMarkers = [];\n\n  for (var i = 0; i < myStops.length; i++) {\n    for (var j = 0; j < myStops[i].properties.routes.length; j++) {\n      if (String(myStops[i].properties.routes[j]) === props.route) {\n        filteredMarkers.push(myStops[i]);\n      }\n    }\n  }\n\n  const uniqueMarkers = filteredMarkers.filter((a, b) => filteredMarkers.indexOf(a) === b);\n  return uniqueMarkers.map(stop => /*#__PURE__*/React.createElement(Marker, {\n    icon: icon,\n    key: stop.properties.id,\n    position: stop.geometry.pos,\n    onLoad: marker => {\n      // Will do for now - removing cluster upon selection of route.\n      props.markerSelectionChoice(\"False\");\n      props.markerLoadHandler(marker, stop);\n    },\n    onClick: event => {\n      props.markerClickHandler(event, stop);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 435,\n      columnNumber: 5\n    }\n  }));\n} // Function that renders all of the Dublin Bus stops in clustered form.\n// props.markerSelection being set to True means that they will all be displayed on\n// the first load. When a route is chosen from the RouteInfo function above,\n// props.cheker gets set to False and all of the markers are removed. This solution\n// is intended only to be temporary until something better comes up.\n\n\nfunction ClusteredMarkers(props) {\n  if (props.markerSelection === \"True\") {\n    return /*#__PURE__*/React.createElement(MarkerClusterer, {\n      options: options,\n      maxZoom: 15,\n      minimumClusterSize: 4,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 459,\n        columnNumber: 7\n      }\n    }, clusterer => props.myStops.map(stop => /*#__PURE__*/React.createElement(Marker, {\n      icon: icon,\n      key: stop.properties.id,\n      position: stop.geometry.pos,\n      clusterer: clusterer,\n      onLoad: marker => props.markerLoadHandler(marker, stop),\n      onClick: event => props.markerClickHandler(event, stop),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 462,\n        columnNumber: 13\n      }\n    })));\n  } else {\n    return null;\n  }\n}","map":{"version":3,"sources":["/Users/evanbyrnes/Pycharm-python-workspace/T13_SP/client/src/App.js"],"names":["React","useState","useLoadScript","GoogleMap","Marker","InfoWindow","MarkerClusterer","DirectionsRenderer","DirectionsService","Container","Button","styled","CustomNavBar","FilterRoute","StopSearch","Locate","PredictionInput","RtpiApi","googleMapApiKey","libraries","Wrapper","main","data","require","dublinCenter","styles","mapOptions","disableDefaultUI","zoomControl","maxZoom","minZoom","mapContainerStyle","height","icon","url","scaledSize","width","options","imagePath","rawData","results","myStops","map","stop","description","stopid","fullname","type","properties","id","routes","operators","geometry","pos","lat","parseFloat","latitude","lng","longitude","parsedStops","parsed","stopDescriptions","i","length","push","routesArray","duplicateRoutes","j","k","l","allRoutes","filter","a","b","indexOf","App","isLoaded","loadError","googleMapsApiKey","center","zoom","setZoom","selectedPlace","setSelectedPlace","markerMap","setMarkerMap","infoOpen","setInfoOpen","markers","setMarkers","selected","setSelected","stopNumber","setStopNumber","originNumber","setOriginNumber","destinationNumber","setDestinationNumber","routeString","setRouteString","response","setResponse","origin","setOrigin","destination","setDestination","markerSelection","setMarkerSelection","selectedTime","setSelectedTime","Date","initialTime","toTimeString","substring","initialDay","initialMonth","toDateString","split","timeDayMonth","setTimeDayMonth","mapRef","useRef","onMapLoad","useCallback","current","panTo","console","log","panTwo","markerLoadHandler","marker","prevState","markerClickHandler","event","place","stopChoice","number","parseInt","originChoice","address","destinationChoice","routeChoice","route","directionsCallback","status","markerSelectionChoice","originNumberChoice","destinationNumberChoice","timeChoice","time","day","month","float","travelMode","provideRouteAlternatives","transitOptions","modes","routingPreference","departureTime","directions","polylineOptions","strokeColor","strokeWeight","suppressInfoWindows","suppressMarkers","document","getElementById","maxHeight","paddingTop","window","location","reload","RouteInfo","props","filteredMarkers","String","uniqueMarkers","ClusteredMarkers","clusterer"],"mappings":"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","sourcesContent":["// Importing outside developed components.\nimport React, { useState } from \"react\";\nimport {\n  useLoadScript,\n  GoogleMap,\n  Marker,\n  InfoWindow,\n  MarkerClusterer,\n  DirectionsRenderer,\n  DirectionsService,\n} from \"@react-google-maps/api\";\nimport Container from \"react-bootstrap/Container\";\n// import Form from \"react-bootstrap/Form\";\nimport Button from \"react-bootstrap/Button\";\nimport styled from \"styled-components\";\n// Importing self-developed components.\nimport CustomNavBar from \"./components/CustomNavBar\";\nimport FilterRoute from \"./components/FilterRoute\";\nimport StopSearch from \"./components/StopSearch\";\nimport Locate from \"./components/Locate\";\n// import JourneySearch from \"./components/JourneySearch\";\n// import StopsJourneySearch from \"./components/StopsJourneySearch\";\nimport PredictionInput from \"./components/PredictionInput\";\n// import Api from \"./components/Api\";\nimport RtpiApi from \"./components/RtpiApi\";\n// import DateTimeSelector from \"./components/DateTimeSelector\";\n// Importing outside developed css.\nimport \"react-datepicker/dist/react-datepicker.css\";\nimport \"./styles.css\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"@reach/combobox/styles.css\";\n// Importing Google Maps Api Key.\nimport googleMapApiKey from \"./config\";\n// Defining libraries for Google Places\nconst libraries = [\"places\"];\n// Defined styling for separation of page displayed.\nconst Wrapper = styled.main`\n  width: 100%;\n  height: 100%;\n`;\n// Importing the Dublin Bus API stops data\nconst data = require(\"./data/DublinBusStops.json\");\n// // consts: [53.349804, -6.260310] - Dublin\nconst dublinCenter = require(\"./data/DublinCenter.json\");\n// Importing custom styles to customize the style of Google Map...\n// important for including and excluding certain place markers etc.\nconst styles = require(\"./data/GoogleMapStyles.json\");\n// Defined custom styles and location for Google Map.\nconst mapOptions = {\n  styles: styles,\n  disableDefaultUI: true,\n  zoomControl: true,\n  maxZoom: 17,\n  minZoom: 11,\n};\nconst mapContainerStyle = {\n  height: \"93vh\",\n};\n// Icon used to represent a bus stop on the map.\nconst icon = {\n  url: \"/bus_icon.svg\",\n  scaledSize: { width: 18, height: 18 },\n};\n// Icons used when Markers are clustered.\nconst options = {\n  imagePath:\n    \"https://developers.google.com/maps/documentation/javascript/examples/markerclusterer/m\",\n};\n// Parsing the Stops data into various object shapes.\nconst rawData = data.results;\n\nconst myStops = rawData.map((stop) => ({\n  description: \"Stop \" + stop.stopid + \", \" + stop.fullname,\n  type: \"Feature\",\n  properties: {\n    id: stop.stopid,\n    fullname: stop.fullname,\n    routes: stop.operators[0].routes,\n  },\n  geometry: {\n    type: \"Point\",\n    pos: {\n      lat: parseFloat(stop.latitude),\n      lng: parseFloat(stop.longitude),\n    },\n  },\n}));\n\nconst parsedStops = myStops.map((parsed) => ({\n  id: parsed.properties.id,\n  description: parsed.description,\n  geometry: parsed.geometry.pos,\n}));\n\nconst stopDescriptions = [];\nfor (var i = 0; i < parsedStops.length; i++) {\n  stopDescriptions.push(parsedStops[i].description);\n}\n\nconst routesArray = [];\nconst duplicateRoutes = [];\nfor (var j = 0; j < myStops.length; j++) {\n  routesArray.push(myStops[j].properties.routes);\n}\nfor (var k = 0; k < routesArray.length; k++) {\n  for (var l = 0; l < routesArray[k].length; l++) {\n    duplicateRoutes.push(routesArray[k][l]);\n  }\n}\nconst allRoutes = duplicateRoutes.filter(\n  (a, b) => duplicateRoutes.indexOf(a) === b\n);\n\n// Main function for the SPA, generating the Map/Page.\nexport default function App() {\n  const { isLoaded, loadError } = useLoadScript({\n    googleMapsApiKey: googleMapApiKey,\n    libraries,\n  });\n  const center = dublinCenter;\n  const [zoom, setZoom] = useState(11);\n  // The general things we need to track in state:\n  const [selectedPlace, setSelectedPlace] = useState(null);\n  const [markerMap, setMarkerMap] = useState({});\n  const [infoOpen, setInfoOpen] = useState(false);\n  const [markers, setMarkers] = useState([]);\n  const [selected, setSelected] = useState(null);\n  const [stopNumber, setStopNumber] = useState(0);\n  // These are being used to track selected stop numbers\n  const [originNumber, setOriginNumber] = useState(0);\n  const [destinationNumber, setDestinationNumber] = useState(0);\n  // This is used to track the string value of selected routes.\n  const [routeString, setRouteString] = useState(\"\");\n  // The things for Directions (Service and Renderer) we need to track in state.\n  const [response, setResponse] = useState(null);\n  const [origin, setOrigin] = useState(\"\");\n  const [destination, setDestination] = useState(\"\");\n  // This is being used to track in state which set of markers is displayed. (Clusters or Route Markers)\n  const [markerSelection, setMarkerSelection] = useState(\"True\");\n  // The things for selected time (Hour, Day, Month) we need to track in state.\n  const [selectedTime, setSelectedTime] = useState(new Date());\n  // Setting the time, day and month values as the current time.\n  // This allows for user to make prediction for journey that occurs at\n  // this time without having to select the time.\n  const initialTime = selectedTime.toTimeString().substring(0, 2);\n  const [initialDay, initialMonth] = selectedTime.toDateString().split(\" \");\n\n  const [timeDayMonth, setTimeDayMonth] = useState([\n    initialTime,\n    initialDay,\n    initialMonth,\n  ]);\n\n  const mapRef = React.useRef();\n  const onMapLoad = React.useCallback((map) => {\n    mapRef.current = map;\n  }, []);\n\n  // Orient the map to selected location.\n  const panTo = React.useCallback(({ lat, lng }) => {\n    mapRef.current.panTo({ lat, lng });\n    mapRef.current.setZoom(16);\n    // Allowing only one marker on the map at a time.\n    console.log(\"destination here 1\", destination);\n    setDestination(\"\");\n    console.log(\"destination here 2\", destination);\n    setMarkers((current) => []);\n    setMarkers((current) => [...current, { lat: lat, lng: lng }]);\n  }, []);\n\n  // Orient the map to the selected route.\n  const panTwo = React.useCallback(({ lat, lng }) => {\n    mapRef.current.panTo({ lat, lng });\n    mapRef.current.setZoom(12);\n  }, []);\n\n  // We have to create a mapping of our places to actual Marker objects\n  const markerLoadHandler = (marker, stop) => {\n    return setMarkerMap((prevState) => {\n      return { ...prevState, [stop.properties.id]: marker };\n    });\n  };\n\n  const markerClickHandler = (event, place) => {\n    // Remember which stop was clicked\n    setSelectedPlace(place);\n    // Required so clicking a 2nd marker works as expected\n    if (infoOpen) {\n      setInfoOpen(false);\n    }\n    setInfoOpen(true);\n  };\n\n  // Changing stop realtime info based on user choice.\n  const stopChoice = (number) => {\n    setStopNumber(() => parseInt(number.id));\n  };\n  // Changing origin info based on user choice.\n  const originChoice = (address) => {\n    console.log(\"originChoice triggered\", address);\n    setOrigin(() => address);\n    // setOrigin(() => address.results[0].formatted_address);\n  };\n  // Changing destination info based on user choice.\n  const destinationChoice = (address) => {\n    console.log(\"destinationChoice triggered\", address);\n    setDestination(() => address);\n    // setDestination(() => address.results[0].formatted_address);\n  };\n  // Changing stops of route displayed on based on user choice.\n  const routeChoice = (route) => {\n    setRouteString(() => route.routeString);\n  };\n\n  // For generating a directions route on the map.\n  const directionsCallback = (response) => {\n    if (response !== null) {\n      if (response.status === \"OK\") {\n        console.log(\"response here\", response);\n        // console.log(\n        //   \"Here is the name of Google's favoured route, \",\n        //   response.routes[0].legs[0].steps[0].transit.line.short_name\n        // );\n        setResponse(() => ({\n          response,\n        }));\n      } else {\n      }\n    }\n  };\n\n  //  For which set of markers to display (Clusters or Route Markers).\n  const markerSelectionChoice = () => {\n    setMarkerSelection(() => \"False\");\n  };\n\n  // Temporarily using these to track selected stop numbers\n  const originNumberChoice = (number) => {\n    console.log(\"originNumberChoice\", number);\n    setOriginNumber(() => parseInt(number.id));\n  };\n\n  const destinationNumberChoice = (number) => {\n    console.log(\"destinationNumberChoice\", number);\n    setDestinationNumber(() => parseInt(number.id));\n  };\n\n  // For setting the time in state.\n  const timeChoice = (selectedTime) => {\n    const time = selectedTime.toTimeString().substring(0, 2);\n    const [day, month] = selectedTime.toDateString().split(\" \");\n    setSelectedTime(selectedTime);\n    setTimeDayMonth([time, day, month]);\n  };\n  console.log(\"These are the time values: date-day-month\", timeDayMonth);\n\n  if (loadError) return \"Error\";\n  if (!isLoaded) return \"Loading...\";\n\n  return (\n    <div>\n      <Container fluid>\n        <CustomNavBar\n          FilterRoute={FilterRoute}\n          StopSearch={StopSearch}\n          panTo={panTo}\n          stopChoice={stopChoice}\n          routeChoice={routeChoice}\n          parsedStops={parsedStops}\n          stopDescriptions={stopDescriptions}\n          allRoutes={allRoutes}\n          panTwo={panTwo}\n        />\n\n        <Wrapper style={{ width: \"75%\", float: \"left\" }}>\n          {/* Render the Google Map */}\n          <GoogleMap\n            mapContainerStyle={mapContainerStyle}\n            center={center}\n            zoom={zoom}\n            options={mapOptions}\n            onLoad={onMapLoad}\n          >\n            <Locate\n              panTo={panTo}\n              response={response}\n              setResponse={setResponse}\n              // setDestination={setDestination}\n            />\n\n            <RouteInfo\n              route={routeString}\n              markerLoadHandler={markerLoadHandler}\n              markerClickHandler={markerClickHandler}\n              markerSelectionChoice={markerSelectionChoice}\n            />\n\n            <ClusteredMarkers\n              myStops={myStops}\n              markerLoadHandler={markerLoadHandler}\n              markerClickHandler={markerClickHandler}\n              markerSelection={markerSelection}\n            />\n\n            {infoOpen && selectedPlace && (\n              <InfoWindow\n                anchor={markerMap[selectedPlace.properties.id]}\n                onCloseClick={() => setInfoOpen(false)}\n              >\n                <div>\n                  <h5>\n                    {selectedPlace.properties.fullname +\n                      \", stop \" +\n                      selectedPlace.properties.id}\n                  </h5>\n                  <RtpiApi number={selectedPlace.properties.id}></RtpiApi>\n                </div>\n              </InfoWindow>\n            )}\n            {/* Markers dropped when stop has been chosen or geolocation activated. */}\n            {markers.map((marker) => (\n              <Marker\n                key={`${marker.lat}-${marker.lng}`}\n                position={{ lat: marker.lat, lng: marker.lng }}\n                onClick={() => {\n                  setSelected(marker);\n                }}\n              />\n            ))}\n            {destination !== \"\" && origin !== \"\" && (\n              <DirectionsService\n                options={{\n                  // destination: { lat: destination.lat, lng: destination.lng },\n                  // origin: { lat: origin.lat, lng: origin.lng },\n                  destination: destination,\n                  origin: origin,\n                  travelMode: \"TRANSIT\",\n                  provideRouteAlternatives: true,\n                  transitOptions: {\n                    modes: [\"BUS\"],\n                    routingPreference: \"FEWER_TRANSFERS\",\n                    departureTime: selectedTime,\n                  },\n                  // transitDetails: { trip_short_name: \"145\" },\n                }}\n                // required\n                callback={directionsCallback}\n              />\n            )}\n            {response !== null && (\n              <DirectionsRenderer\n                // what you might try to do is iterate over\n                // the route list and find the one with short_name of\n                // selected route, then render that one using routeIndex : i.\n                // required\n                options={{\n                  directions: response.response,\n                  // hideRouteList: true,\n                  polylineOptions: {\n                    strokeColor: \"red\",\n                    strokeWeight: 5,\n                  },\n                  suppressInfoWindows: true,\n                  suppressMarkers: false,\n                }}\n                panel={document.getElementById(\"panel\")}\n                // removing all displayed stops upon loading\n                onLoad={() => {\n                  setRouteString(\"\");\n                  setMarkerSelection(\"False\");\n                }}\n              />\n            )}\n          </GoogleMap>\n        </Wrapper>\n\n        <Wrapper\n          style={{\n            width: \"25%\",\n            float: \"right\",\n            maxHeight: \"93vh\",\n          }}\n        >\n          <Container style={{ paddingTop: \"2vh\" }}>\n            <PredictionInput\n              selectedTime={selectedTime}\n              setSelectedTime={setSelectedTime}\n              timeChoice={timeChoice}\n              timeDayMonth={timeDayMonth}\n              setTimeDayMonth={setTimeDayMonth}\n              parsedStops={parsedStops}\n              stopDescriptions={stopDescriptions}\n              originNumberChoice={originNumberChoice}\n              destinationNumberChoice={destinationNumberChoice}\n              originNumber={originNumber}\n              destinationNumber={destinationNumber}\n              originChoice={originChoice}\n              destinationChoice={destinationChoice}\n              panTo={panTo}\n            />\n            <div id=\"panel\"></div>\n            <Button\n              variant=\"secondary\"\n              size=\"lg\"\n              block\n              onClick={() => window.location.reload(false)}\n            >\n              Reload\n            </Button>\n          </Container>\n        </Wrapper>\n      </Container>\n    </div>\n  );\n}\n\n// Function that filters the markers on the map\n// according to a user selected route.\nfunction RouteInfo(props) {\n  const filteredMarkers = [];\n\n  for (var i = 0; i < myStops.length; i++) {\n    for (var j = 0; j < myStops[i].properties.routes.length; j++) {\n      if (String(myStops[i].properties.routes[j]) === props.route) {\n        filteredMarkers.push(myStops[i]);\n      }\n    }\n  }\n\n  const uniqueMarkers = filteredMarkers.filter(\n    (a, b) => filteredMarkers.indexOf(a) === b\n  );\n\n  return uniqueMarkers.map((stop) => (\n    <Marker\n      icon={icon}\n      key={stop.properties.id}\n      position={stop.geometry.pos}\n      onLoad={(marker) => {\n        // Will do for now - removing cluster upon selection of route.\n        props.markerSelectionChoice(\"False\");\n        props.markerLoadHandler(marker, stop);\n      }}\n      onClick={(event) => {\n        props.markerClickHandler(event, stop);\n      }}\n    />\n  ));\n}\n\n// Function that renders all of the Dublin Bus stops in clustered form.\n// props.markerSelection being set to True means that they will all be displayed on\n// the first load. When a route is chosen from the RouteInfo function above,\n// props.cheker gets set to False and all of the markers are removed. This solution\n// is intended only to be temporary until something better comes up.\nfunction ClusteredMarkers(props) {\n  if (props.markerSelection === \"True\") {\n    return (\n      <MarkerClusterer options={options} maxZoom={15} minimumClusterSize={4}>\n        {(clusterer) =>\n          props.myStops.map((stop) => (\n            <Marker\n              icon={icon}\n              key={stop.properties.id}\n              position={stop.geometry.pos}\n              clusterer={clusterer}\n              onLoad={(marker) => props.markerLoadHandler(marker, stop)}\n              onClick={(event) => props.markerClickHandler(event, stop)}\n            />\n          ))\n        }\n      </MarkerClusterer>\n    );\n  } else {\n    return null;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}