{"ast":null,"code":"var _jsxFileName = \"/Users/evanbyrnes/Pycharm-python-workspace/T13_SP/client/src/components/JourneySearch.js\";\nimport React from \"react\";\nimport usePlacesAutocomplete, { getGeocode } from \"use-places-autocomplete\";\nimport { Combobox, ComboboxInput, ComboboxPopover, ComboboxList, ComboboxOption } from \"@reach/combobox\";\nimport { Typeahead } from \"react-bootstrap-typeahead\"; // Generating a Search box with Google Places and Autocomplete.\n// For use in selecting journey origin and destination points.\n\nexport default function JourneySearch({\n  originChoice,\n  destinationChoice,\n  placeholder,\n  stopDescriptions\n}) {\n  const {\n    ready,\n    value,\n    suggestions: {\n      status,\n      data\n    },\n    setValue,\n    clearSuggestions\n  } = usePlacesAutocomplete({\n    requestOptions: {\n      location: {\n        lat: () => 53,\n        lng: () => -6\n      },\n      radius: 100 * 1000\n    }\n  }); // https://developers.google.com/maps/documentation/javascript/reference/places-autocomplete-service#AutocompletionRequest\n\n  const handleInput = e => {\n    setValue(e.target.value);\n  };\n\n  const handleSelect = async address => {\n    setValue(address, false);\n    clearSuggestions();\n\n    if (placeholder == \"Departure\") {\n      try {\n        const results = await getGeocode({\n          address\n        });\n        originChoice({\n          results\n        });\n      } catch (error) {\n        console.log(\"ðŸ˜± Error: \", error);\n      }\n    } else if (placeholder == \"Arrival\") {\n      try {\n        const results = await getGeocode({\n          address\n        });\n        destinationChoice({\n          results\n        });\n      } catch (error) {\n        console.log(\"ðŸ˜± Error: \", error);\n      }\n    }\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"searchLocations\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Typeahead, {\n    id: \"basic-example\",\n    options: stopDescriptions,\n    placeholder: \"Journey...\",\n    onChange: address => {\n      try {\n        for (var i = 0; i < parsedStops.length; i++) {\n          if (address == parsedStops[i].description) {\n            const lat = parsedStops[i].geometry.lat;\n            const lng = parsedStops[i].geometry.lng;\n            const id = parsedStops[i].id;\n            panTo({\n              lat,\n              lng\n            });\n          }\n        }\n      } catch (error) {\n        console.log(\"ðŸ˜± Error: \", error);\n      }\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(Combobox, {\n    onSelect: handleSelect,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(ComboboxInput, {\n    value: value,\n    onChange: handleInput,\n    disabled: !ready,\n    placeholder: placeholder,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(ComboboxPopover, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(ComboboxList, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 11\n    }\n  }, status === \"OK\" && data.map(({\n    id,\n    description\n  }) => /*#__PURE__*/React.createElement(ComboboxOption, {\n    key: id,\n    value: description,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 17\n    }\n  }))))));\n}","map":{"version":3,"sources":["/Users/evanbyrnes/Pycharm-python-workspace/T13_SP/client/src/components/JourneySearch.js"],"names":["React","usePlacesAutocomplete","getGeocode","Combobox","ComboboxInput","ComboboxPopover","ComboboxList","ComboboxOption","Typeahead","JourneySearch","originChoice","destinationChoice","placeholder","stopDescriptions","ready","value","suggestions","status","data","setValue","clearSuggestions","requestOptions","location","lat","lng","radius","handleInput","e","target","handleSelect","address","results","error","console","log","i","parsedStops","length","description","geometry","id","panTo","map"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport usePlacesAutocomplete, { getGeocode } from \"use-places-autocomplete\";\nimport {\n  Combobox,\n  ComboboxInput,\n  ComboboxPopover,\n  ComboboxList,\n  ComboboxOption,\n} from \"@reach/combobox\";\nimport { Typeahead } from \"react-bootstrap-typeahead\";\n\n// Generating a Search box with Google Places and Autocomplete.\n// For use in selecting journey origin and destination points.\nexport default function JourneySearch({\n  originChoice,\n  destinationChoice,\n  placeholder,\n  stopDescriptions,\n}) {\n  const {\n    ready,\n    value,\n    suggestions: { status, data },\n    setValue,\n    clearSuggestions,\n  } = usePlacesAutocomplete({\n    requestOptions: {\n      location: { lat: () => 53, lng: () => -6 },\n      radius: 100 * 1000,\n    },\n  });\n\n  // https://developers.google.com/maps/documentation/javascript/reference/places-autocomplete-service#AutocompletionRequest\n\n  const handleInput = (e) => {\n    setValue(e.target.value);\n  };\n\n  const handleSelect = async (address) => {\n    setValue(address, false);\n    clearSuggestions();\n\n    if (placeholder == \"Departure\") {\n      try {\n        const results = await getGeocode({ address });\n        originChoice({ results });\n      } catch (error) {\n        console.log(\"ðŸ˜± Error: \", error);\n      }\n    } else if (placeholder == \"Arrival\") {\n      try {\n        const results = await getGeocode({ address });\n        destinationChoice({ results });\n      } catch (error) {\n        console.log(\"ðŸ˜± Error: \", error);\n      }\n    }\n  };\n\n  return (\n    <div className=\"searchLocations\">\n      <Typeahead\n        id=\"basic-example\"\n        options={stopDescriptions}\n        placeholder=\"Journey...\"\n        onChange={(address) => {\n          try {\n            for (var i = 0; i < parsedStops.length; i++) {\n              if (address == parsedStops[i].description) {\n                const lat = parsedStops[i].geometry.lat;\n                const lng = parsedStops[i].geometry.lng;\n                const id = parsedStops[i].id;\n                panTo({ lat, lng });\n              }\n            }\n          } catch (error) {\n            console.log(\"ðŸ˜± Error: \", error);\n          }\n        }}\n      />\n      <Combobox onSelect={handleSelect}>\n        <ComboboxInput\n          value={value}\n          onChange={handleInput}\n          disabled={!ready}\n          placeholder={placeholder}\n        />\n        <ComboboxPopover>\n          <ComboboxList>\n            {status === \"OK\" &&\n              data.map(({ id, description }) => (\n                <ComboboxOption key={id} value={description} />\n              ))}\n          </ComboboxList>\n        </ComboboxPopover>\n      </Combobox>\n    </div>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}