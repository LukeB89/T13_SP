{"ast":null,"code":"var _jsxFileName = \"/Users/evanbyrnes/Pycharm-python-workspace/T13_SP/client/src/components/T13GoogleMap.js\";\nimport React, { useState } from \"react\";\nimport { useLoadScript, GoogleMap, Marker, InfoWindow, MarkerClusterer } from \"@react-google-maps/api\";\nimport Button from \"react-bootstrap/Button\";\nimport useSwr from \"swr\"; // import LocationForms from \"./components/Location Forms\";\n\nimport googleMapApiKey from \".././config\";\nimport * as poodata from \".././data/db-stops.json\"; // Import custom styles to customize the style of Google Map\n\nconst styles = require(\"../data/GoogleMapStyles.json\");\n\nconst options = {\n  imagePath: \"https://developers.google.com/maps/documentation/javascript/examples/markerclusterer/m\"\n};\n\nconst fetcher = (...args) => fetch(...args).then(response => response.json());\n\nfunction poo() {\n  return 2;\n}\n\nexport default function T13GoogleMap() {\n  // The things we need to track in state\n  const [mapRef, setMapRef] = useState(null);\n  const [selectedPlace, setSelectedPlace] = useState(null);\n  const [markerMap, setMarkerMap] = useState({}); // consts: [53.349804, -6.260310] - Dublin\n\n  const [center, setCenter] = useState({\n    lat: 53.349804,\n    lng: -6.26031\n  });\n  const [zoom, setZoom] = useState(11);\n  const [infoOpen, setInfoOpen] = useState(false); // Load the Google maps scripts\n\n  const {\n    isLoaded\n  } = useLoadScript({\n    // Enter your own Google Maps API key in config.js\n    googleMapsApiKey: googleMapApiKey\n  });\n  const uncleanData = poodata.results;\n  const myStops = uncleanData.map(stop => ({\n    type: \"Feature\",\n    properties: {\n      id: stop.stopid,\n      fullname: stop.fullname,\n      routes: stop.operators[0].routes\n    },\n    geometry: {\n      type: \"Point\",\n      pos: {\n        lat: parseFloat(stop.latitude),\n        lng: parseFloat(stop.longitude)\n      }\n    }\n  })); // Iterate myStops to size, center, and zoom map to contain all markers\n\n  const fitBounds = map => {\n    const bounds = new window.google.maps.LatLngBounds();\n    myStops.map(stop => {\n      bounds.extend(stop.geometry.pos);\n      return stop.properties.id;\n    });\n    map.fitBounds(bounds);\n  };\n\n  const loadHandler = map => {\n    // Store a reference to the google map instance in state\n    setMapRef(map); // Fit map bounds to contain all markers\n\n    fitBounds(map);\n  }; // We have to create a mapping of our places to actual Marker objects\n\n\n  const markerLoadHandler = (marker, stop) => {\n    return setMarkerMap(prevState => {\n      return { ...prevState,\n        [stop.properties.id]: marker\n      };\n    });\n  };\n\n  const markerClickHandler = (event, place) => {\n    // Remember which stop was clicked\n    setSelectedPlace(place); // Required so clicking a 2nd marker works as expected\n\n    if (infoOpen) {\n      setInfoOpen(false);\n    }\n\n    setInfoOpen(true); // If you want to zoom in a little on marker click\n\n    if (zoom < 11) {\n      setZoom(11);\n    } // if you want to center the selected Marker\n    //setCenter(place.pos)\n\n  };\n\n  const testStop = {\n    type: \"Feature\",\n    properties: {\n      stopid: \"2\",\n      fullname: \"Parnell Square\",\n      routes: [\"38\", \"38A\", \"38D\", \"38B\", \"46A\", \"46E\"]\n    },\n    geometry: {\n      type: \"Point\",\n      pos: {\n        lat: parseFloat(\"53.3522411111\"),\n        lng: parseFloat(\"-6.263695\")\n      }\n    }\n  };\n  console.log(testStop);\n\n  const renderPage = () => {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 9\n      }\n    }, \"cunt\"), /*#__PURE__*/React.createElement(Button, {\n      variant: \"primary\",\n      type: \"submit\",\n      onClick: event => markerClickHandler(event, testStop),\n      console: console.log(poo()),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 9\n      }\n    }, \"Submit\"), /*#__PURE__*/React.createElement(GoogleMap, {\n      onLoad: loadHandler,\n      onCenterChanged: () => setCenter(mapRef.getCenter().toJSON()),\n      center: center,\n      zoom: zoom,\n      maxZoom: 13,\n      options: {\n        styles: styles\n      },\n      mapContainerStyle: {\n        height: \"94vh\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 138,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(MarkerClusterer, {\n      options: options,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 149,\n        columnNumber: 11\n      }\n    }, clusterer => myStops.map(stop => /*#__PURE__*/React.createElement(Marker, {\n      console: console.log(stop)[0],\n      key: stop.properties.id,\n      position: stop.geometry.pos,\n      clusterer: clusterer,\n      onLoad: marker => markerLoadHandler(marker, stop),\n      onClick: event => markerClickHandler(event, stop),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 152,\n        columnNumber: 17\n      }\n    }))), infoOpen && selectedPlace && /*#__PURE__*/React.createElement(InfoWindow, {\n      anchor: markerMap[selectedPlace.properties.id],\n      onCloseClick: () => setInfoOpen(false),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 165,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 169,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(\"h3\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 170,\n        columnNumber: 17\n      }\n    }, \"Stop Number: \", selectedPlace.properties.id), /*#__PURE__*/React.createElement(\"h5\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 171,\n        columnNumber: 17\n      }\n    }, \"Routes: \", selectedPlace.properties.routes.join(\", \"))))));\n  };\n\n  return isLoaded ? renderPage() : null;\n}","map":{"version":3,"sources":["/Users/evanbyrnes/Pycharm-python-workspace/T13_SP/client/src/components/T13GoogleMap.js"],"names":["React","useState","useLoadScript","GoogleMap","Marker","InfoWindow","MarkerClusterer","Button","useSwr","googleMapApiKey","poodata","styles","require","options","imagePath","fetcher","args","fetch","then","response","json","poo","T13GoogleMap","mapRef","setMapRef","selectedPlace","setSelectedPlace","markerMap","setMarkerMap","center","setCenter","lat","lng","zoom","setZoom","infoOpen","setInfoOpen","isLoaded","googleMapsApiKey","uncleanData","results","myStops","map","stop","type","properties","id","stopid","fullname","routes","operators","geometry","pos","parseFloat","latitude","longitude","fitBounds","bounds","window","google","maps","LatLngBounds","extend","loadHandler","markerLoadHandler","marker","prevState","markerClickHandler","event","place","testStop","console","log","renderPage","getCenter","toJSON","height","clusterer","join"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport {\n  useLoadScript,\n  GoogleMap,\n  Marker,\n  InfoWindow,\n  MarkerClusterer,\n} from \"@react-google-maps/api\";\nimport Button from \"react-bootstrap/Button\";\nimport useSwr from \"swr\";\n\n// import LocationForms from \"./components/Location Forms\";\n\nimport googleMapApiKey from \".././config\";\nimport * as poodata from \".././data/db-stops.json\";\n\n// Import custom styles to customize the style of Google Map\nconst styles = require(\"../data/GoogleMapStyles.json\");\n\nconst options = {\n  imagePath:\n    \"https://developers.google.com/maps/documentation/javascript/examples/markerclusterer/m\",\n};\n\nconst fetcher = (...args) => fetch(...args).then((response) => response.json());\n\nfunction poo() {\n  return 2;\n}\n\nexport default function T13GoogleMap() {\n  // The things we need to track in state\n  const [mapRef, setMapRef] = useState(null);\n  const [selectedPlace, setSelectedPlace] = useState(null);\n  const [markerMap, setMarkerMap] = useState({});\n  // consts: [53.349804, -6.260310] - Dublin\n  const [center, setCenter] = useState({ lat: 53.349804, lng: -6.26031 });\n  const [zoom, setZoom] = useState(11);\n  const [infoOpen, setInfoOpen] = useState(false);\n\n  // Load the Google maps scripts\n  const { isLoaded } = useLoadScript({\n    // Enter your own Google Maps API key in config.js\n    googleMapsApiKey: googleMapApiKey,\n  });\n\n  const uncleanData = poodata.results;\n  const myStops = uncleanData.map((stop) => ({\n    type: \"Feature\",\n    properties: {\n      id: stop.stopid,\n      fullname: stop.fullname,\n      routes: stop.operators[0].routes,\n    },\n    geometry: {\n      type: \"Point\",\n      pos: {\n        lat: parseFloat(stop.latitude),\n        lng: parseFloat(stop.longitude),\n      },\n    },\n  }));\n\n  // Iterate myStops to size, center, and zoom map to contain all markers\n  const fitBounds = (map) => {\n    const bounds = new window.google.maps.LatLngBounds();\n    myStops.map((stop) => {\n      bounds.extend(stop.geometry.pos);\n      return stop.properties.id;\n    });\n    map.fitBounds(bounds);\n  };\n\n  const loadHandler = (map) => {\n    // Store a reference to the google map instance in state\n    setMapRef(map);\n    // Fit map bounds to contain all markers\n    fitBounds(map);\n  };\n\n  // We have to create a mapping of our places to actual Marker objects\n  const markerLoadHandler = (marker, stop) => {\n    return setMarkerMap((prevState) => {\n      return { ...prevState, [stop.properties.id]: marker };\n    });\n  };\n\n  const markerClickHandler = (event, place) => {\n    // Remember which stop was clicked\n    setSelectedPlace(place);\n\n    // Required so clicking a 2nd marker works as expected\n    if (infoOpen) {\n      setInfoOpen(false);\n    }\n\n    setInfoOpen(true);\n\n    // If you want to zoom in a little on marker click\n    if (zoom < 11) {\n      setZoom(11);\n    }\n\n    // if you want to center the selected Marker\n    //setCenter(place.pos)\n  };\n\n  const testStop = {\n    type: \"Feature\",\n    properties: {\n      stopid: \"2\",\n      fullname: \"Parnell Square\",\n      routes: [\"38\", \"38A\", \"38D\", \"38B\", \"46A\", \"46E\"],\n    },\n    geometry: {\n      type: \"Point\",\n      pos: {\n        lat: parseFloat(\"53.3522411111\"),\n        lng: parseFloat(\"-6.263695\"),\n      },\n    },\n  };\n\n  console.log(testStop);\n\n  const renderPage = () => {\n    return (\n      <div>\n        <p>cunt</p>\n        <Button\n          variant=\"primary\"\n          type=\"submit\"\n          onClick={(event) => markerClickHandler(event, testStop)}\n          console={console.log(poo())}\n        >\n          Submit\n        </Button>\n        <GoogleMap\n          onLoad={loadHandler}\n          onCenterChanged={() => setCenter(mapRef.getCenter().toJSON())}\n          center={center}\n          zoom={zoom}\n          maxZoom={13}\n          options={{ styles: styles }}\n          mapContainerStyle={{\n            height: \"94vh\",\n          }}\n        >\n          <MarkerClusterer options={options}>\n            {(clusterer) =>\n              myStops.map((stop) => (\n                <Marker\n                  console={console.log(stop)[0]}\n                  key={stop.properties.id}\n                  position={stop.geometry.pos}\n                  clusterer={clusterer}\n                  onLoad={(marker) => markerLoadHandler(marker, stop)}\n                  onClick={(event) => markerClickHandler(event, stop)}\n                />\n              ))\n            }\n          </MarkerClusterer>\n\n          {infoOpen && selectedPlace && (\n            <InfoWindow\n              anchor={markerMap[selectedPlace.properties.id]}\n              onCloseClick={() => setInfoOpen(false)}\n            >\n              <div>\n                <h3>Stop Number: {selectedPlace.properties.id}</h3>\n                <h5>Routes: {selectedPlace.properties.routes.join(\", \")}</h5>\n              </div>\n            </InfoWindow>\n          )}\n        </GoogleMap>\n      </div>\n    );\n  };\n  return isLoaded ? renderPage() : null;\n}\n"]},"metadata":{},"sourceType":"module"}