{"ast":null,"code":"var _jsxFileName = \"/Users/evanbyrnes/Pycharm-python-workspace/T13_SP/client/src/components/Directions.js\";\n\n/*global google*/\nimport React, { Component } from \"react\"; // import { DirectionsRenderer } from \"@react-google-maps/api\";\n\nimport usePlacesAutocomplete, { getGeocode, getLatLng } from \"use-places-autocomplete\";\nimport { Combobox, ComboboxInput, ComboboxPopover, ComboboxList, ComboboxOption } from \"@reach/combobox\";\nimport \"@reach/combobox/styles.css\";\nimport * as data from \".././data/db-small.json\";\n\nclass Directions extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      directions: null,\n      selected: []\n    };\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 27,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(AltSearch, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 9\n      }\n    }));\n  } // componentDidMount() {\n  //   const directionsService = new google.maps.DirectionsService();\n  //   // we want to make these variable values, to be able to\n  //   // pass this information from what has been selected above.\n  //   const origin = { lat: 53.3472419444, lng: -6.2587911111 };\n  //   const destination = { lat: 53.3466669444, lng: -6.258325 };\n  //   directionsService.route(\n  //     {\n  //       origin: origin,\n  //       destination: destination,\n  //       travelMode: google.maps.TravelMode.WALKING,\n  //     },\n  //     (result, status) => {\n  //       if (status === google.maps.DirectionsStatus.OK) {\n  //         this.setState({\n  //           directions: result,\n  //         });\n  //       } else {\n  //         console.error(`error fetching directions ${result}`);\n  //       }\n  //     }\n  //   );\n  // }\n\n\n}\n\nexport default Directions; // function Search() {\n//   const {\n//     ready,\n//     value,\n//     suggestions: { status, data },\n//     setValue,\n//     clearSuggestions,\n//   } = usePlacesAutocomplete({\n//     requestOptions: {\n//       location: { lat: () => 53.349804, lng: () => -6.26031 },\n//       radius: 10 * 1000,\n//     },\n//   });\n//   return (\n//     <div className=\"search\">\n//       <Combobox\n//         onSelect={(address) => {\n//           console.log(address);\n//         }}\n//       >\n//         <ComboboxInput\n//           value={value}\n//           console={console.log(value)}\n//           onChange={(e) => {\n//             setValue(e.target.value);\n//           }}\n//           disabled={!ready}\n//           placeholder=\"Enter an address\"\n//         />\n//         <ComboboxPopover>\n//           <ComboboxList>\n//             {status === \"OK\" &&\n//               data.map(({ id, description }) => (\n//                 <ComboboxOption key={id} value={description} />\n//               ))}\n//           </ComboboxList>\n//         </ComboboxPopover>\n//       </Combobox>\n//     </div>\n//   );\n// }\n// Using the json data for the search boxes\n\nconst rawData = data.results;\nconst nameOfStops = rawData.map(stop => ({\n  description: \"Stop \" + stop.stopid + \", \" + stop.fullname,\n  id: parseInt(stop.stopid),\n  geometry: {\n    type: \"Point\",\n    pos: {\n      lat: parseFloat(stop.latitude),\n      lng: parseFloat(stop.longitude)\n    }\n  }\n}));\nconsole.log(nameOfStops);\nconst parsedStops = nameOfStops.map(parsed => ({\n  description: parsed.description,\n  geometry: parsed.geometry.pos\n}));\nconsole.log(parsedStops[0].geometry.lat, parsedStops[0].geometry.lng);\nconst lat = parsedStops[0].geometry.lat,\n      lng = parsedStops[0].geometry.lng; // function that uses the mystops data in the same\n// way that the Search function above uses the usePlacesAutocomplete\n\nfunction AltSearch() {\n  // console.log(nameOfStops);\n  // return <div>Cunt</div>;\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"altSearch\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Combobox, {\n    onSelect: address => {\n      try {\n        if (address === parsedStops[0].description) {\n          const {\n            lat,\n            lng\n          } = parsedStops[0].geometry;\n          console.log(lat, lng);\n        }\n      } catch (error) {\n        console.log(\"error\");\n      } // console.log(address);\n\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(ComboboxInput // value={nameOfStops}\n  , {\n    options: nameOfStops,\n    placeholder: \"Enter a stop\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 152,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(ComboboxPopover, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 157,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(ComboboxList, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 158,\n      columnNumber: 11\n    }\n  }, nameOfStops.map(({\n    id,\n    description\n  }) => /*#__PURE__*/React.createElement(ComboboxOption, {\n    key: id,\n    value: description,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 160,\n      columnNumber: 15\n    }\n  }))))));\n}","map":{"version":3,"sources":["/Users/evanbyrnes/Pycharm-python-workspace/T13_SP/client/src/components/Directions.js"],"names":["React","Component","usePlacesAutocomplete","getGeocode","getLatLng","Combobox","ComboboxInput","ComboboxPopover","ComboboxList","ComboboxOption","data","Directions","state","directions","selected","render","rawData","results","nameOfStops","map","stop","description","stopid","fullname","id","parseInt","geometry","type","pos","lat","parseFloat","latitude","lng","longitude","console","log","parsedStops","parsed","AltSearch","address","error"],"mappings":"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","sourcesContent":["/*global google*/\nimport React, { Component } from \"react\";\n// import { DirectionsRenderer } from \"@react-google-maps/api\";\nimport usePlacesAutocomplete, {\n  getGeocode,\n  getLatLng,\n} from \"use-places-autocomplete\";\nimport {\n  Combobox,\n  ComboboxInput,\n  ComboboxPopover,\n  ComboboxList,\n  ComboboxOption,\n} from \"@reach/combobox\";\nimport \"@reach/combobox/styles.css\";\n\nimport * as data from \".././data/db-small.json\";\n\nclass Directions extends Component {\n  state = {\n    directions: null,\n    selected: [],\n  };\n\n  render() {\n    return (\n      <div>\n        {/* <Search /> */}\n        <AltSearch />\n        {/* <DirectionsRenderer directions={this.state.directions} /> */}\n      </div>\n    );\n  }\n\n  // componentDidMount() {\n  //   const directionsService = new google.maps.DirectionsService();\n\n  //   // we want to make these variable values, to be able to\n  //   // pass this information from what has been selected above.\n  //   const origin = { lat: 53.3472419444, lng: -6.2587911111 };\n  //   const destination = { lat: 53.3466669444, lng: -6.258325 };\n\n  //   directionsService.route(\n  //     {\n  //       origin: origin,\n  //       destination: destination,\n  //       travelMode: google.maps.TravelMode.WALKING,\n  //     },\n  //     (result, status) => {\n  //       if (status === google.maps.DirectionsStatus.OK) {\n  //         this.setState({\n  //           directions: result,\n  //         });\n  //       } else {\n  //         console.error(`error fetching directions ${result}`);\n  //       }\n  //     }\n  //   );\n  // }\n}\n\nexport default Directions;\n\n// function Search() {\n//   const {\n//     ready,\n//     value,\n//     suggestions: { status, data },\n//     setValue,\n//     clearSuggestions,\n//   } = usePlacesAutocomplete({\n//     requestOptions: {\n//       location: { lat: () => 53.349804, lng: () => -6.26031 },\n//       radius: 10 * 1000,\n//     },\n//   });\n\n//   return (\n//     <div className=\"search\">\n//       <Combobox\n//         onSelect={(address) => {\n//           console.log(address);\n//         }}\n//       >\n//         <ComboboxInput\n//           value={value}\n//           console={console.log(value)}\n//           onChange={(e) => {\n//             setValue(e.target.value);\n//           }}\n//           disabled={!ready}\n//           placeholder=\"Enter an address\"\n//         />\n//         <ComboboxPopover>\n//           <ComboboxList>\n//             {status === \"OK\" &&\n//               data.map(({ id, description }) => (\n//                 <ComboboxOption key={id} value={description} />\n//               ))}\n//           </ComboboxList>\n//         </ComboboxPopover>\n//       </Combobox>\n//     </div>\n//   );\n// }\n\n// Using the json data for the search boxes\nconst rawData = data.results;\nconst nameOfStops = rawData.map((stop) => ({\n  description: \"Stop \" + stop.stopid + \", \" + stop.fullname,\n  id: parseInt(stop.stopid),\n  geometry: {\n    type: \"Point\",\n    pos: {\n      lat: parseFloat(stop.latitude),\n      lng: parseFloat(stop.longitude),\n    },\n  },\n}));\n\nconsole.log(nameOfStops);\n\nconst parsedStops = nameOfStops.map((parsed) => ({\n  description: parsed.description,\n  geometry: parsed.geometry.pos,\n}));\n\nconsole.log(parsedStops[0].geometry.lat, parsedStops[0].geometry.lng);\nconst lat = parsedStops[0].geometry.lat,\n  lng = parsedStops[0].geometry.lng;\n\n// function that uses the mystops data in the same\n// way that the Search function above uses the usePlacesAutocomplete\nfunction AltSearch() {\n  // console.log(nameOfStops);\n  // return <div>Cunt</div>;\n  return (\n    <div className=\"altSearch\">\n      <Combobox\n        onSelect={(address) => {\n          try {\n            if (address === parsedStops[0].description) {\n              const { lat, lng } = parsedStops[0].geometry;\n              console.log(lat, lng);\n            }\n          } catch (error) {\n            console.log(\"error\");\n          }\n          // console.log(address);\n        }}\n      >\n        <ComboboxInput\n          // value={nameOfStops}\n          options={nameOfStops}\n          placeholder=\"Enter a stop\"\n        />\n        <ComboboxPopover>\n          <ComboboxList>\n            {nameOfStops.map(({ id, description }) => (\n              <ComboboxOption key={id} value={description} />\n            ))}\n          </ComboboxList>\n        </ComboboxPopover>\n      </Combobox>\n    </div>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}