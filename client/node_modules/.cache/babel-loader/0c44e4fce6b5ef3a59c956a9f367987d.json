{"ast":null,"code":"var _jsxFileName = \"/Users/evanbyrnes/Pycharm-python-workspace/T13_SP/client/src/App.js\";\n// Importing outside developed components.\nimport React, { useState } from \"react\";\nimport { useLoadScript, GoogleMap, Marker, InfoWindow, MarkerClusterer, DirectionsRenderer, DirectionsService } from \"@react-google-maps/api\";\nimport Row from \"react-bootstrap/Row\";\nimport Col from \"react-bootstrap/Col\";\nimport Container from \"react-bootstrap/Container\"; // import \"react-loader-spinner/dist/loader/css/react-spinner-loader.css\";\n// import Loader from \"react-loader-spinner\";\n// Importing self-developed components.\n\nimport CustomNavBar from \"./components/CustomNavBar\";\nimport FilterRoute from \"./components/FilterRoute\";\nimport StopSearch from \"./components/StopSearch\";\nimport Locate from \"./components/Locate\";\nimport PredictionInput from \"./components/PredictionInput\";\nimport RtpiApi from \"./components/RtpiApi\"; // Importing outside developed css.\n\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"@reach/combobox/styles.css\"; // Importing Google Maps Api Key.\n\nimport googleMapApiKey from \"./config\"; // also available as `default`\n\nvar Loader = require(\"react-loaders\").Loader; // Defining libraries for Google Places\n\n\nconst libraries = [\"places\"]; // Importing the Dublin Bus API stops data\n\nconst data = require(\"./data/DublinBusStops.json\"); // // consts: [53.349804, -6.260310] - Dublin\n\n\nconst dublinCenter = require(\"./data/DublinCenter.json\"); // Importing custom styles to customize the style of Google Map...\n// important for including and excluding certain place markers etc.\n\n\nconst styles = require(\"./data/GoogleMapStyles.json\"); // Defined custom styles and location for Google Map.\n\n\nconst mapOptions = {\n  styles: styles,\n  disableDefaultUI: true,\n  zoomControl: true,\n  maxZoom: 17,\n  minZoom: 11\n};\nconst mapContainerStyle = {\n  height: \"93vh\"\n}; // Icon used to represent a bus stop on the map.\n\nconst icon = {\n  url: \"/bus_icon.svg\",\n  scaledSize: {\n    width: 18,\n    height: 18\n  }\n}; // Icons used when Markers are clustered.\n\nconst options = {\n  imagePath: \"https://developers.google.com/maps/documentation/javascript/examples/markerclusterer/m\"\n}; // Parsing the Stops data into various object shapes.\n\nconst rawData = data.results;\nconst myStops = rawData.map(stop => ({\n  description: \"Stop \" + stop.stopid + \", \" + stop.fullname,\n  type: \"Feature\",\n  properties: {\n    id: stop.stopid,\n    fullname: stop.fullname,\n    routes: stop.operators[0].routes\n  },\n  geometry: {\n    type: \"Point\",\n    pos: {\n      lat: parseFloat(stop.latitude),\n      lng: parseFloat(stop.longitude)\n    }\n  }\n}));\nconst parsedStops = myStops.map(parsed => ({\n  id: parsed.properties.id,\n  description: parsed.description,\n  geometry: parsed.geometry.pos\n}));\nconst stopDescriptions = [];\n\nfor (var i = 0; i < parsedStops.length; i++) {\n  stopDescriptions.push(parsedStops[i].description);\n}\n\nconst routesArray = [];\nconst duplicateRoutes = [];\n\nfor (var j = 0; j < myStops.length; j++) {\n  routesArray.push(myStops[j].properties.routes);\n}\n\nfor (var k = 0; k < routesArray.length; k++) {\n  for (var l = 0; l < routesArray[k].length; l++) {\n    duplicateRoutes.push(routesArray[k][l]);\n  }\n}\n\nconst allRoutes = duplicateRoutes.filter((a, b) => duplicateRoutes.indexOf(a) === b); // Main function for the SPA, generating the Map/Page.\n\nexport default function App() {\n  const {\n    isLoaded,\n    loadError\n  } = useLoadScript({\n    googleMapsApiKey: googleMapApiKey,\n    libraries\n  });\n  const center = dublinCenter; // eslint-disable-next-line\n\n  const [zoom, setZoom] = useState(11); // removing unwanted warning.\n  // The general things we need to track in state:\n\n  const [selectedPlace, setSelectedPlace] = useState(null);\n  const [markerMap, setMarkerMap] = useState({});\n  const [infoOpen, setInfoOpen] = useState(false);\n  const [geoMarkers, setGeoMarkers] = useState([]);\n  const [stopMarkers, setStopMarkers] = useState([]); // eslint-disable-next-line\n\n  const [selected, setSelected] = useState(null); // removing unwanted warning.\n  // Consider removing this variable stopNumber, see if it can be merged with either originNumber or destinationNumber.\n  // eslint-disable-next-line\n\n  const [stopNumber, setStopNumber] = useState(0); // removing unwanted warning.\n  // These are being used to track selected stop numbers\n\n  const [originNumber, setOriginNumber] = useState(0);\n  const [destinationNumber, setDestinationNumber] = useState(0); // This is used to track the string value of selected routes.\n\n  const [routeString, setRouteString] = useState(\"\"); // The things for Directions (Service and Renderer) we need to track in state.\n\n  const [response, setResponse] = useState(null);\n  const [origin, setOrigin] = useState(\"\");\n  const [destination, setDestination] = useState(\"\"); // This is being used to track in state which set of markers is displayed. (Clusters or Route Markers)\n\n  const [markerSelection, setMarkerSelection] = useState(\"True\"); // The things for selected time (Hour, Day, Month) we need to track in state.\n\n  const [selectedTime, setSelectedTime] = useState(new Date()); // Setting the time, day and month values as the current time.\n  // This allows for user to make prediction for journey that occurs at\n  // this time without having to select the time.\n\n  const initialTime = selectedTime.toTimeString().substring(0, 2);\n  const [initialDay, initialMonth] = selectedTime.toDateString().split(\" \"); // An array containing time data for model input.\n\n  const [timeDayMonth, setTimeDayMonth] = useState([initialTime, initialDay, initialMonth]); // Track state of user selected routes and directions.\n\n  const [routeSelect, setRouteSelect] = React.useState(\"\");\n  const [directionSelect, setDirectionSelect] = React.useState(undefined); // Track state of filtered bus stops.\n\n  const [filteredStops, setFilteredStops] = React.useState([]);\n  const [filteredStopsLatLng, setFilteredStopsLatLng] = React.useState([]);\n  const mapRef = React.useRef();\n  const onMapLoad = React.useCallback(map => {\n    mapRef.current = map;\n  }, []); // Orient the map to selected location.\n\n  const panTo = React.useCallback(({\n    lat,\n    lng\n  }) => {\n    mapRef.current.panTo({\n      lat,\n      lng\n    });\n    mapRef.current.setZoom(16);\n    setDestination(\"\");\n    setStopMarkers(current => [...current, {\n      lat: lat,\n      lng: lng\n    }]);\n  }, []); // Orient the map to selected location.\n\n  const panToGeoMarker = React.useCallback(({\n    lat,\n    lng\n  }) => {\n    mapRef.current.panTo({\n      lat,\n      lng\n    });\n    mapRef.current.setZoom(16); // Resetting the drawn route anytime this functions is called.\n\n    setDestination(\"\");\n    setGeoMarkers(current => [...current, {\n      lat: lat,\n      lng: lng\n    }]);\n  }, []); // We have to create a mapping of our places to actual Marker objects\n\n  const markerLoadHandler = (marker, stop) => {\n    return setMarkerMap(prevState => {\n      return { ...prevState,\n        [stop.properties.id]: marker\n      };\n    });\n  };\n\n  const markerClickHandler = (event, place) => {\n    // Remember which stop was clicked\n    setSelectedPlace(place); // Required so clicking a 2nd marker works as expected\n\n    if (infoOpen) {\n      setInfoOpen(false);\n    }\n\n    setInfoOpen(true);\n  }; // Changing stop realtime info based on user choice.\n\n\n  const stopChoice = number => {\n    setStopNumber(() => parseInt(number.id));\n  }; // Changing origin info based on user choice.\n\n\n  const originChoice = address => {\n    // console.log(\"originChoice triggered\", address);\n    setOrigin(() => address); // setOrigin(() => address.results[0].formatted_address);\n  }; // Changing destination info based on user choice.\n\n\n  const destinationChoice = address => {\n    // console.log(\"destinationChoice triggered\", address);\n    setDestination(() => address); // setDestination(() => address.results[0].formatted_address);\n  }; // Changing stops of route displayed on based on user choice.\n\n\n  const routeChoice = route => {\n    setRouteString(() => route.routeString);\n  }; // For generating a directions route on the map.\n\n\n  const directionsCallback = response => {\n    if (response !== null) {\n      if (response.status === \"OK\") {\n        console.log(\"routeSelect in directionsCallback\", routeSelect.toLowerCase()); // This is the array you want associated with\n        // the response instead of the one that google assigns.\n\n        const selectedRouteArray = [];\n\n        for (var i = 0; i < response.routes.length; i++) {\n          for (var j = 0; j < response.routes[i].legs.length; j++) {\n            for (var k = 0; k < response.routes[i].legs[j].steps.length; k++) {\n              if ( // making sure that WALKING is excluded since it will not contain bus name information\n              response.routes[i].legs[j].steps[k].travel_mode == \"TRANSIT\" && // locating the first occurence of the users selected route\n              String(response.routes[i].legs[j].steps[k].transit.line.short_name) === routeSelect.toLowerCase()) {\n                selectedRouteArray.push(response.routes[i]);\n              }\n            }\n          }\n        } // setting the routes array to be the one containing our desired bus route.\n\n\n        response.routes = selectedRouteArray;\n        setResponse(() => ({\n          response\n        }));\n      } else {}\n    }\n  }; //  For which set of markers to display (Clusters or Route Markers).\n\n\n  const markerSelectionChoice = () => {\n    setMarkerSelection(() => \"False\");\n  }; // For setting the selected origin stop number in state.\n\n\n  const originNumberChoice = number => {\n    console.log(\"originNumberChoice\", number);\n    setOriginNumber(() => parseInt(number.id));\n  }; // For setting the selected destination stop number in state.\n\n\n  const destinationNumberChoice = number => {\n    console.log(\"destinationNumberChoice\", number);\n    setDestinationNumber(() => parseInt(number.id));\n  }; // For setting the time in state.\n\n\n  const timeChoice = selectedTime => {\n    if (selectedTime === null) {\n      console.log(\"this dut has activated\");\n      const errorHandledDate = new Date();\n      const time = errorHandledDate.toTimeString().substring(0, 2);\n      const [day, month] = errorHandledDate.toDateString().split(\" \");\n      setSelectedTime(errorHandledDate);\n      setTimeDayMonth([time, day, month]);\n    } else {\n      const time = selectedTime.toTimeString().substring(0, 2);\n      const [day, month] = selectedTime.toDateString().split(\" \");\n      setSelectedTime(selectedTime);\n      setTimeDayMonth([time, day, month]);\n    }\n  }; // console.log(\"These are the time values: date-day-month\", timeDayMonth);\n\n\n  const filteredStopsChoice = filteredMarkers => {\n    setFilteredStops(() => filteredMarkers);\n  };\n\n  const filteredStopsLatLngChoice = filteredMarkers => {\n    setFilteredStopsLatLng(() => filteredMarkers);\n  }; // Orient the map to the selected route.\n  // Will need to have passed in to it an array of stop locations.\n\n\n  const panTwo = React.useCallback( // For some reason there is delay in this function receiving filteredStopsLatLng.\n  // You had this problem before, with the time. How the hell did you fix that?!\n  () => {\n    // console.log(newBounds, \"here is geometry in panTwo in App.js\");\n    // mapRef.current.fitBounds(newBounds);\n    // mapRef.current.setZoom(12);\n    // Resetting the drawn route anytime this functions is called.\n    setDestination(\"\");\n  }, []);\n  if (loadError) return \"Error\";\n  if (!isLoaded) return /*#__PURE__*/React.createElement(Loader, {\n    type: \"line-scale\",\n    active: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 312,\n      columnNumber: 25\n    }\n  });\n  return /*#__PURE__*/React.createElement(Container, {\n    fluid: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 315,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Row, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 316,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Col, {\n    sm: 12,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 317,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(CustomNavBar // Passing in props - Custom built components.\n  , {\n    FilterRoute: FilterRoute,\n    StopSearch: StopSearch // Passing in props - Functions defined above.\n    ,\n    panTo: panTo,\n    stopChoice: stopChoice,\n    routeChoice: routeChoice,\n    panTwo: panTwo // Passing in props - Stop data defined above.\n    ,\n    parsedStops: parsedStops,\n    stopDescriptions: stopDescriptions,\n    allRoutes: allRoutes,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 318,\n      columnNumber: 11\n    }\n  }))), /*#__PURE__*/React.createElement(Row, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 334,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Col, {\n    lg: 9,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 335,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(GoogleMap // Inbuilt props: https://react-google-maps-api-docs.netlify.app/#googlemap.\n  , {\n    mapContainerStyle: mapContainerStyle,\n    center: center,\n    zoom: zoom,\n    options: mapOptions,\n    onLoad: onMapLoad,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 337,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(Locate // Passing in props - Functions defined above.\n  , {\n    panToGeoMarker: panToGeoMarker,\n    setResponse: setResponse,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 345,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(RouteInfo // Passing in props - Functions defined above.\n  , {\n    markerLoadHandler: markerLoadHandler,\n    markerClickHandler: markerClickHandler,\n    markerSelectionChoice: markerSelectionChoice,\n    filteredStopsLatLngChoice: filteredStopsLatLngChoice,\n    mapRef: mapRef // Passing in props - Stop data defined above.\n    ,\n    routeString: routeString,\n    routeSelect: routeSelect,\n    filteredStopsChoice: filteredStopsChoice,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 350,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(ClusteredMarkers // Passing in props - Functions defined above.\n  , {\n    markerLoadHandler: markerLoadHandler,\n    markerClickHandler: markerClickHandler,\n    markerSelection: markerSelection // Passing in props - Stop data defined above.\n    ,\n    myStops: myStops,\n    setFilteredStops: setFilteredStops,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 362,\n      columnNumber: 13\n    }\n  }), infoOpen && selectedPlace && /*#__PURE__*/React.createElement(InfoWindow // Inbuilt props: https://react-google-maps-api-docs.netlify.app/#infowindow.\n  , {\n    anchor: markerMap[selectedPlace.properties.id],\n    onCloseClick: () => setInfoOpen(false),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 372,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 377,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"h5\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 378,\n      columnNumber: 19\n    }\n  }, selectedPlace.properties.fullname + \", stop \" + selectedPlace.properties.id), /*#__PURE__*/React.createElement(RtpiApi // Passing in props - Stop data defined above.\n  , {\n    number: selectedPlace.properties.id,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 383,\n      columnNumber: 19\n    }\n  }))), geoMarkers.map(marker => /*#__PURE__*/React.createElement(Marker // Inbuilt props: https://react-google-maps-api-docs.netlify.app/#marker.\n  , {\n    key: `${marker.lat}-${marker.lng}`,\n    position: {\n      lat: marker.lat,\n      lng: marker.lng\n    },\n    icon: {\n      url: \"http://maps.google.com/mapfiles/ms/icons/blue-dot.png\"\n    },\n    onClick: () => {\n      setSelected(marker);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 392,\n      columnNumber: 15\n    }\n  })), stopMarkers.map(marker => /*#__PURE__*/React.createElement(Marker // Inbuilt props: https://react-google-maps-api-docs.netlify.app/#marker.\n  , {\n    key: `${marker.lat}-${marker.lng}`,\n    position: {\n      lat: marker.lat,\n      lng: marker.lng\n    },\n    icon: {\n      url: \"http://maps.google.com/mapfiles/ms/icons/red-dot.png\"\n    },\n    onClick: () => {\n      setSelected(marker);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 407,\n      columnNumber: 15\n    }\n  })), destination !== \"\" && origin !== \"\" && /*#__PURE__*/React.createElement(DirectionsService // Inbuilt props: https://react-google-maps-api-docs.netlify.app/#directionsservice.\n  , {\n    options: {\n      destination: destination,\n      origin: origin,\n      travelMode: \"TRANSIT\",\n      provideRouteAlternatives: true,\n      transitOptions: {\n        modes: [\"BUS\"],\n        routingPreference: \"FEWER_TRANSFERS\" // departureTime: selectedTime,\n\n      } // transitDetails: { trip_short_name: \"145\" },\n\n    } // required\n    ,\n    callback: directionsCallback,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 420,\n      columnNumber: 15\n    }\n  }), response !== null && /*#__PURE__*/React.createElement(DirectionsRenderer // Inbuilt props: https://react-google-maps-api-docs.netlify.app/#directionsrenderer.\n  // what you might try to do is iterate over\n  // the route list and find the one with short_name of\n  // selected route, then render that one using routeIndex : i.\n  // required\n  , {\n    options: {\n      directions: response.response,\n      // hideRouteList: true,\n      polylineOptions: {\n        strokeColor: \"red\",\n        strokeWeight: 5\n      },\n      suppressInfoWindows: true,\n      suppressMarkers: false\n    } // panel={document.getElementById(\"panel\")}\n    // removing all displayed stops upon loading\n    ,\n    onLoad: () => {\n      // setRouteSelect(\"\");\n      setRouteString(\"\");\n      setMarkerSelection(\"False\");\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 439,\n      columnNumber: 15\n    }\n  }))), /*#__PURE__*/React.createElement(Col, {\n    lg: 3 // CSS\n    ,\n    style: {\n      paddingTop: \"2vh\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 466,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(PredictionInput // Passing in props - Functions defined above.\n  , {\n    panTo: panTo,\n    panTwo: panTwo,\n    originChoice: originChoice,\n    destinationChoice: destinationChoice,\n    originNumberChoice: originNumberChoice,\n    destinationNumberChoice: destinationNumberChoice,\n    timeChoice: timeChoice,\n    routeChoice: routeChoice // Passing in props - Variables defined above.\n    ,\n    setRouteString: setRouteString,\n    setGeoMarkers: setGeoMarkers,\n    setMarkerSelection: setMarkerSelection,\n    setFilteredStops: setFilteredStops,\n    setOrigin: setOrigin,\n    setDestination: setDestination,\n    originNumber: originNumber,\n    destinationNumber: destinationNumber,\n    selectedTime: selectedTime,\n    setSelectedTime: setSelectedTime,\n    timeDayMonth: timeDayMonth,\n    setTimeDayMonth: setTimeDayMonth,\n    routeSelect: routeSelect,\n    setRouteSelect: setRouteSelect,\n    directionSelect: directionSelect,\n    setDirectionSelect: setDirectionSelect,\n    setResponse: setResponse // Passing in props - Stop data defined above.\n    ,\n    parsedStops: parsedStops,\n    stopDescriptions: stopDescriptions,\n    allRoutes: allRoutes,\n    filteredStops: filteredStops,\n    filteredStopsLatLng: filteredStopsLatLng,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 471,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    id: \"panel\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 506,\n      columnNumber: 11\n    }\n  }))));\n} // Function that filters the markers on the map\n// according to a user selected route.\n\nfunction RouteInfo(props) {\n  // i want to be able to define this variable outside of this function.\n  // but it has to be populated in here.\n  // when it has been populated it shoiuld be set in App.\n  const filteredMarkers = [];\n  const filteredStopStrings = [];\n  const filteredStopsCoords = [];\n  console.log(\"RouteInfo from App.js, here is its routeString\", props.routeString);\n\n  for (var i = 0; i < myStops.length; i++) {\n    for (var j = 0; j < myStops[i].properties.routes.length; j++) {\n      if (String(myStops[i].properties.routes[j]) === props.routeString) {\n        filteredMarkers.push(myStops[i]);\n        filteredStopStrings.push(myStops[i].description);\n        filteredStopsCoords.push(myStops[i].geometry.pos);\n      }\n    }\n  }\n\n  const uniqueMarkers = filteredMarkers.filter((a, b) => filteredMarkers.indexOf(a) === b);\n  const bounds = new window.google.maps.LatLngBounds(); // create an empty new bounds object\n\n  for (i = 0; i < filteredStopsCoords.length; i++) {\n    bounds.extend(filteredStopsCoords[i]);\n  }\n\n  if (String(props.routeString) !== \"\") {\n    // console.log(filteredMarkers);\n    return uniqueMarkers.map(stop => /*#__PURE__*/React.createElement(Marker, {\n      icon: icon,\n      key: stop.properties.id,\n      position: stop.geometry.pos,\n      onLoad: marker => {\n        props.filteredStopsLatLngChoice(filteredStopsCoords);\n        props.filteredStopsChoice(filteredStopStrings); // Will do for now - removing cluster upon selection of route.\n\n        props.markerSelectionChoice(\"False\");\n        props.markerLoadHandler(marker, stop); // Changing the bounds to fit map to chosen route's markers.\n\n        props.mapRef.current.fitBounds(bounds);\n        props.mapRef.current.setZoom(13);\n      },\n      onClick: event => {\n        props.markerClickHandler(event, stop);\n      },\n      animation: window.google.maps.Animation.DROP,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 548,\n        columnNumber: 7\n      }\n    }));\n  } else {\n    return null;\n  }\n} // Function that renders all of the Dublin Bus stops in clustered form.\n// props.markerSelection being set to True means that they will all be displayed on\n// the first load. When a route is chosen from the RouteInfo function above,\n// props.markerSelection gets set to False and all of the markers are removed. This solution\n// is intended only to be temporary until something better comes up.\n\n\nfunction ClusteredMarkers(props) {\n  if (props.markerSelection === \"True\") {\n    return /*#__PURE__*/React.createElement(MarkerClusterer, {\n      options: options,\n      maxZoom: 15,\n      minimumClusterSize: 4,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 581,\n        columnNumber: 7\n      }\n    }, clusterer => props.myStops.map(stop => /*#__PURE__*/React.createElement(Marker, {\n      icon: icon,\n      key: stop.properties.id,\n      position: stop.geometry.pos,\n      clusterer: clusterer,\n      onLoad: marker => props.markerLoadHandler(marker, stop),\n      onClick: event => props.markerClickHandler(event, stop),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 584,\n        columnNumber: 13\n      }\n    })));\n  } else {\n    return null;\n  }\n}","map":{"version":3,"sources":["/Users/evanbyrnes/Pycharm-python-workspace/T13_SP/client/src/App.js"],"names":["React","useState","useLoadScript","GoogleMap","Marker","InfoWindow","MarkerClusterer","DirectionsRenderer","DirectionsService","Row","Col","Container","CustomNavBar","FilterRoute","StopSearch","Locate","PredictionInput","RtpiApi","googleMapApiKey","Loader","require","libraries","data","dublinCenter","styles","mapOptions","disableDefaultUI","zoomControl","maxZoom","minZoom","mapContainerStyle","height","icon","url","scaledSize","width","options","imagePath","rawData","results","myStops","map","stop","description","stopid","fullname","type","properties","id","routes","operators","geometry","pos","lat","parseFloat","latitude","lng","longitude","parsedStops","parsed","stopDescriptions","i","length","push","routesArray","duplicateRoutes","j","k","l","allRoutes","filter","a","b","indexOf","App","isLoaded","loadError","googleMapsApiKey","center","zoom","setZoom","selectedPlace","setSelectedPlace","markerMap","setMarkerMap","infoOpen","setInfoOpen","geoMarkers","setGeoMarkers","stopMarkers","setStopMarkers","selected","setSelected","stopNumber","setStopNumber","originNumber","setOriginNumber","destinationNumber","setDestinationNumber","routeString","setRouteString","response","setResponse","origin","setOrigin","destination","setDestination","markerSelection","setMarkerSelection","selectedTime","setSelectedTime","Date","initialTime","toTimeString","substring","initialDay","initialMonth","toDateString","split","timeDayMonth","setTimeDayMonth","routeSelect","setRouteSelect","directionSelect","setDirectionSelect","undefined","filteredStops","setFilteredStops","filteredStopsLatLng","setFilteredStopsLatLng","mapRef","useRef","onMapLoad","useCallback","current","panTo","panToGeoMarker","markerLoadHandler","marker","prevState","markerClickHandler","event","place","stopChoice","number","parseInt","originChoice","address","destinationChoice","routeChoice","route","directionsCallback","status","console","log","toLowerCase","selectedRouteArray","legs","steps","travel_mode","String","transit","line","short_name","markerSelectionChoice","originNumberChoice","destinationNumberChoice","timeChoice","errorHandledDate","time","day","month","filteredStopsChoice","filteredMarkers","filteredStopsLatLngChoice","panTwo","travelMode","provideRouteAlternatives","transitOptions","modes","routingPreference","directions","polylineOptions","strokeColor","strokeWeight","suppressInfoWindows","suppressMarkers","paddingTop","RouteInfo","props","filteredStopStrings","filteredStopsCoords","uniqueMarkers","bounds","window","google","maps","LatLngBounds","extend","fitBounds","Animation","DROP","ClusteredMarkers","clusterer"],"mappings":"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","sourcesContent":["// Importing outside developed components.\nimport React, { useState } from \"react\";\nimport {\n  useLoadScript,\n  GoogleMap,\n  Marker,\n  InfoWindow,\n  MarkerClusterer,\n  DirectionsRenderer,\n  DirectionsService,\n} from \"@react-google-maps/api\";\nimport Row from \"react-bootstrap/Row\";\nimport Col from \"react-bootstrap/Col\";\nimport Container from \"react-bootstrap/Container\";\n// import \"react-loader-spinner/dist/loader/css/react-spinner-loader.css\";\n// import Loader from \"react-loader-spinner\";\n// Importing self-developed components.\nimport CustomNavBar from \"./components/CustomNavBar\";\nimport FilterRoute from \"./components/FilterRoute\";\nimport StopSearch from \"./components/StopSearch\";\nimport Locate from \"./components/Locate\";\nimport PredictionInput from \"./components/PredictionInput\";\nimport RtpiApi from \"./components/RtpiApi\";\n// Importing outside developed css.\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"@reach/combobox/styles.css\";\n// Importing Google Maps Api Key.\nimport googleMapApiKey from \"./config\";\n// also available as `default`\nvar Loader = require(\"react-loaders\").Loader;\n// Defining libraries for Google Places\nconst libraries = [\"places\"];\n// Importing the Dublin Bus API stops data\nconst data = require(\"./data/DublinBusStops.json\");\n// // consts: [53.349804, -6.260310] - Dublin\nconst dublinCenter = require(\"./data/DublinCenter.json\");\n// Importing custom styles to customize the style of Google Map...\n// important for including and excluding certain place markers etc.\nconst styles = require(\"./data/GoogleMapStyles.json\");\n// Defined custom styles and location for Google Map.\nconst mapOptions = {\n  styles: styles,\n  disableDefaultUI: true,\n  zoomControl: true,\n  maxZoom: 17,\n  minZoom: 11,\n};\nconst mapContainerStyle = {\n  height: \"93vh\",\n};\n// Icon used to represent a bus stop on the map.\nconst icon = {\n  url: \"/bus_icon.svg\",\n  scaledSize: { width: 18, height: 18 },\n};\n// Icons used when Markers are clustered.\nconst options = {\n  imagePath:\n    \"https://developers.google.com/maps/documentation/javascript/examples/markerclusterer/m\",\n};\n// Parsing the Stops data into various object shapes.\nconst rawData = data.results;\n\nconst myStops = rawData.map((stop) => ({\n  description: \"Stop \" + stop.stopid + \", \" + stop.fullname,\n  type: \"Feature\",\n  properties: {\n    id: stop.stopid,\n    fullname: stop.fullname,\n    routes: stop.operators[0].routes,\n  },\n  geometry: {\n    type: \"Point\",\n    pos: {\n      lat: parseFloat(stop.latitude),\n      lng: parseFloat(stop.longitude),\n    },\n  },\n}));\n\nconst parsedStops = myStops.map((parsed) => ({\n  id: parsed.properties.id,\n  description: parsed.description,\n  geometry: parsed.geometry.pos,\n}));\n\nconst stopDescriptions = [];\nfor (var i = 0; i < parsedStops.length; i++) {\n  stopDescriptions.push(parsedStops[i].description);\n}\n\nconst routesArray = [];\nconst duplicateRoutes = [];\nfor (var j = 0; j < myStops.length; j++) {\n  routesArray.push(myStops[j].properties.routes);\n}\nfor (var k = 0; k < routesArray.length; k++) {\n  for (var l = 0; l < routesArray[k].length; l++) {\n    duplicateRoutes.push(routesArray[k][l]);\n  }\n}\nconst allRoutes = duplicateRoutes.filter(\n  (a, b) => duplicateRoutes.indexOf(a) === b\n);\n\n// Main function for the SPA, generating the Map/Page.\nexport default function App() {\n  const { isLoaded, loadError } = useLoadScript({\n    googleMapsApiKey: googleMapApiKey,\n    libraries,\n  });\n  const center = dublinCenter;\n  // eslint-disable-next-line\n  const [zoom, setZoom] = useState(11); // removing unwanted warning.\n  // The general things we need to track in state:\n  const [selectedPlace, setSelectedPlace] = useState(null);\n  const [markerMap, setMarkerMap] = useState({});\n  const [infoOpen, setInfoOpen] = useState(false);\n  const [geoMarkers, setGeoMarkers] = useState([]);\n  const [stopMarkers, setStopMarkers] = useState([]);\n  // eslint-disable-next-line\n  const [selected, setSelected] = useState(null); // removing unwanted warning.\n  // Consider removing this variable stopNumber, see if it can be merged with either originNumber or destinationNumber.\n  // eslint-disable-next-line\n  const [stopNumber, setStopNumber] = useState(0); // removing unwanted warning.\n  // These are being used to track selected stop numbers\n  const [originNumber, setOriginNumber] = useState(0);\n  const [destinationNumber, setDestinationNumber] = useState(0);\n  // This is used to track the string value of selected routes.\n  const [routeString, setRouteString] = useState(\"\");\n  // The things for Directions (Service and Renderer) we need to track in state.\n  const [response, setResponse] = useState(null);\n  const [origin, setOrigin] = useState(\"\");\n  const [destination, setDestination] = useState(\"\");\n  // This is being used to track in state which set of markers is displayed. (Clusters or Route Markers)\n  const [markerSelection, setMarkerSelection] = useState(\"True\");\n  // The things for selected time (Hour, Day, Month) we need to track in state.\n  const [selectedTime, setSelectedTime] = useState(new Date());\n  // Setting the time, day and month values as the current time.\n  // This allows for user to make prediction for journey that occurs at\n  // this time without having to select the time.\n  const initialTime = selectedTime.toTimeString().substring(0, 2);\n  const [initialDay, initialMonth] = selectedTime.toDateString().split(\" \");\n  // An array containing time data for model input.\n  const [timeDayMonth, setTimeDayMonth] = useState([\n    initialTime,\n    initialDay,\n    initialMonth,\n  ]);\n  // Track state of user selected routes and directions.\n  const [routeSelect, setRouteSelect] = React.useState(\"\");\n  const [directionSelect, setDirectionSelect] = React.useState(undefined);\n  // Track state of filtered bus stops.\n  const [filteredStops, setFilteredStops] = React.useState([]);\n  const [filteredStopsLatLng, setFilteredStopsLatLng] = React.useState([]);\n\n  const mapRef = React.useRef();\n  const onMapLoad = React.useCallback((map) => {\n    mapRef.current = map;\n  }, []);\n\n  // Orient the map to selected location.\n  const panTo = React.useCallback(({ lat, lng }) => {\n    mapRef.current.panTo({ lat, lng });\n    mapRef.current.setZoom(16);\n    setDestination(\"\");\n    setStopMarkers((current) => [...current, { lat: lat, lng: lng }]);\n  }, []);\n\n  // Orient the map to selected location.\n  const panToGeoMarker = React.useCallback(({ lat, lng }) => {\n    mapRef.current.panTo({ lat, lng });\n    mapRef.current.setZoom(16);\n    // Resetting the drawn route anytime this functions is called.\n    setDestination(\"\");\n    setGeoMarkers((current) => [...current, { lat: lat, lng: lng }]);\n  }, []);\n\n  // We have to create a mapping of our places to actual Marker objects\n  const markerLoadHandler = (marker, stop) => {\n    return setMarkerMap((prevState) => {\n      return { ...prevState, [stop.properties.id]: marker };\n    });\n  };\n\n  const markerClickHandler = (event, place) => {\n    // Remember which stop was clicked\n    setSelectedPlace(place);\n    // Required so clicking a 2nd marker works as expected\n    if (infoOpen) {\n      setInfoOpen(false);\n    }\n    setInfoOpen(true);\n  };\n\n  // Changing stop realtime info based on user choice.\n  const stopChoice = (number) => {\n    setStopNumber(() => parseInt(number.id));\n  };\n  // Changing origin info based on user choice.\n  const originChoice = (address) => {\n    // console.log(\"originChoice triggered\", address);\n    setOrigin(() => address);\n    // setOrigin(() => address.results[0].formatted_address);\n  };\n  // Changing destination info based on user choice.\n  const destinationChoice = (address) => {\n    // console.log(\"destinationChoice triggered\", address);\n    setDestination(() => address);\n    // setDestination(() => address.results[0].formatted_address);\n  };\n  // Changing stops of route displayed on based on user choice.\n  const routeChoice = (route) => {\n    setRouteString(() => route.routeString);\n  };\n\n  // For generating a directions route on the map.\n  const directionsCallback = (response) => {\n    if (response !== null) {\n      if (response.status === \"OK\") {\n        console.log(\n          \"routeSelect in directionsCallback\",\n          routeSelect.toLowerCase()\n        );\n        // This is the array you want associated with\n        // the response instead of the one that google assigns.\n        const selectedRouteArray = [];\n        for (var i = 0; i < response.routes.length; i++) {\n          for (var j = 0; j < response.routes[i].legs.length; j++) {\n            for (var k = 0; k < response.routes[i].legs[j].steps.length; k++) {\n              if (\n                // making sure that WALKING is excluded since it will not contain bus name information\n                response.routes[i].legs[j].steps[k].travel_mode == \"TRANSIT\" &&\n                // locating the first occurence of the users selected route\n                String(\n                  response.routes[i].legs[j].steps[k].transit.line.short_name\n                ) === routeSelect.toLowerCase()\n              ) {\n                selectedRouteArray.push(response.routes[i]);\n              }\n            }\n          }\n        }\n        // setting the routes array to be the one containing our desired bus route.\n        response.routes = selectedRouteArray;\n        setResponse(() => ({\n          response,\n        }));\n      } else {\n      }\n    }\n  };\n\n  //  For which set of markers to display (Clusters or Route Markers).\n  const markerSelectionChoice = () => {\n    setMarkerSelection(() => \"False\");\n  };\n\n  // For setting the selected origin stop number in state.\n  const originNumberChoice = (number) => {\n    console.log(\"originNumberChoice\", number);\n    setOriginNumber(() => parseInt(number.id));\n  };\n  // For setting the selected destination stop number in state.\n  const destinationNumberChoice = (number) => {\n    console.log(\"destinationNumberChoice\", number);\n    setDestinationNumber(() => parseInt(number.id));\n  };\n\n  // For setting the time in state.\n  const timeChoice = (selectedTime) => {\n    if (selectedTime === null) {\n      console.log(\"this dut has activated\");\n      const errorHandledDate = new Date();\n      const time = errorHandledDate.toTimeString().substring(0, 2);\n      const [day, month] = errorHandledDate.toDateString().split(\" \");\n      setSelectedTime(errorHandledDate);\n      setTimeDayMonth([time, day, month]);\n    } else {\n      const time = selectedTime.toTimeString().substring(0, 2);\n      const [day, month] = selectedTime.toDateString().split(\" \");\n      setSelectedTime(selectedTime);\n      setTimeDayMonth([time, day, month]);\n    }\n  };\n  // console.log(\"These are the time values: date-day-month\", timeDayMonth);\n\n  const filteredStopsChoice = (filteredMarkers) => {\n    setFilteredStops(() => filteredMarkers);\n  };\n\n  const filteredStopsLatLngChoice = (filteredMarkers) => {\n    setFilteredStopsLatLng(() => filteredMarkers);\n  };\n\n  // Orient the map to the selected route.\n  // Will need to have passed in to it an array of stop locations.\n  const panTwo = React.useCallback(\n    // For some reason there is delay in this function receiving filteredStopsLatLng.\n    // You had this problem before, with the time. How the hell did you fix that?!\n    () => {\n      // console.log(newBounds, \"here is geometry in panTwo in App.js\");\n      // mapRef.current.fitBounds(newBounds);\n      // mapRef.current.setZoom(12);\n      // Resetting the drawn route anytime this functions is called.\n      setDestination(\"\");\n    },\n    []\n  );\n\n  if (loadError) return \"Error\";\n  if (!isLoaded) return <Loader type=\"line-scale\" active />;\n\n  return (\n    <Container fluid>\n      <Row>\n        <Col sm={12}>\n          <CustomNavBar\n            // Passing in props - Custom built components.\n            FilterRoute={FilterRoute}\n            StopSearch={StopSearch}\n            // Passing in props - Functions defined above.\n            panTo={panTo}\n            stopChoice={stopChoice}\n            routeChoice={routeChoice}\n            panTwo={panTwo}\n            // Passing in props - Stop data defined above.\n            parsedStops={parsedStops}\n            stopDescriptions={stopDescriptions}\n            allRoutes={allRoutes}\n          />\n        </Col>\n      </Row>\n      <Row>\n        <Col lg={9}>\n          {/* Render the Google Map */}\n          <GoogleMap\n            // Inbuilt props: https://react-google-maps-api-docs.netlify.app/#googlemap.\n            mapContainerStyle={mapContainerStyle}\n            center={center}\n            zoom={zoom}\n            options={mapOptions}\n            onLoad={onMapLoad}\n          >\n            <Locate\n              // Passing in props - Functions defined above.\n              panToGeoMarker={panToGeoMarker}\n              setResponse={setResponse}\n            />\n            <RouteInfo\n              // Passing in props - Functions defined above.\n              markerLoadHandler={markerLoadHandler}\n              markerClickHandler={markerClickHandler}\n              markerSelectionChoice={markerSelectionChoice}\n              filteredStopsLatLngChoice={filteredStopsLatLngChoice}\n              mapRef={mapRef}\n              // Passing in props - Stop data defined above.\n              routeString={routeString}\n              routeSelect={routeSelect}\n              filteredStopsChoice={filteredStopsChoice}\n            />\n            <ClusteredMarkers\n              // Passing in props - Functions defined above.\n              markerLoadHandler={markerLoadHandler}\n              markerClickHandler={markerClickHandler}\n              markerSelection={markerSelection}\n              // Passing in props - Stop data defined above.\n              myStops={myStops}\n              setFilteredStops={setFilteredStops}\n            />\n            {infoOpen && selectedPlace && (\n              <InfoWindow\n                // Inbuilt props: https://react-google-maps-api-docs.netlify.app/#infowindow.\n                anchor={markerMap[selectedPlace.properties.id]}\n                onCloseClick={() => setInfoOpen(false)}\n              >\n                <div>\n                  <h5>\n                    {selectedPlace.properties.fullname +\n                      \", stop \" +\n                      selectedPlace.properties.id}\n                  </h5>\n                  <RtpiApi\n                    // Passing in props - Stop data defined above.\n                    number={selectedPlace.properties.id}\n                  />\n                </div>\n              </InfoWindow>\n            )}\n            {/* Markers dropped when  geolocation activated. */}\n            {geoMarkers.map((marker) => (\n              <Marker\n                // Inbuilt props: https://react-google-maps-api-docs.netlify.app/#marker.\n                key={`${marker.lat}-${marker.lng}`}\n                position={{ lat: marker.lat, lng: marker.lng }}\n                icon={{\n                  url: \"http://maps.google.com/mapfiles/ms/icons/blue-dot.png\",\n                }}\n                onClick={() => {\n                  setSelected(marker);\n                }}\n              />\n            ))}\n            {/* Markers dropped when stop has been chosen. */}\n\n            {stopMarkers.map((marker) => (\n              <Marker\n                // Inbuilt props: https://react-google-maps-api-docs.netlify.app/#marker.\n                key={`${marker.lat}-${marker.lng}`}\n                position={{ lat: marker.lat, lng: marker.lng }}\n                icon={{\n                  url: \"http://maps.google.com/mapfiles/ms/icons/red-dot.png\",\n                }}\n                onClick={() => {\n                  setSelected(marker);\n                }}\n              />\n            ))}\n            {destination !== \"\" && origin !== \"\" && (\n              <DirectionsService\n                // Inbuilt props: https://react-google-maps-api-docs.netlify.app/#directionsservice.\n                options={{\n                  destination: destination,\n                  origin: origin,\n                  travelMode: \"TRANSIT\",\n                  provideRouteAlternatives: true,\n                  transitOptions: {\n                    modes: [\"BUS\"],\n                    routingPreference: \"FEWER_TRANSFERS\",\n                    // departureTime: selectedTime,\n                  },\n                  // transitDetails: { trip_short_name: \"145\" },\n                }}\n                // required\n                callback={directionsCallback}\n              />\n            )}\n            {response !== null && (\n              <DirectionsRenderer\n                // Inbuilt props: https://react-google-maps-api-docs.netlify.app/#directionsrenderer.\n                // what you might try to do is iterate over\n                // the route list and find the one with short_name of\n                // selected route, then render that one using routeIndex : i.\n                // required\n                options={{\n                  directions: response.response,\n                  // hideRouteList: true,\n                  polylineOptions: {\n                    strokeColor: \"red\",\n                    strokeWeight: 5,\n                  },\n                  suppressInfoWindows: true,\n                  suppressMarkers: false,\n                }}\n                // panel={document.getElementById(\"panel\")}\n                // removing all displayed stops upon loading\n                onLoad={() => {\n                  // setRouteSelect(\"\");\n                  setRouteString(\"\");\n                  setMarkerSelection(\"False\");\n                }}\n              />\n            )}\n          </GoogleMap>\n        </Col>\n        <Col\n          lg={3}\n          // CSS\n          style={{ paddingTop: \"2vh\" }}\n        >\n          <PredictionInput\n            // Passing in props - Functions defined above.\n            panTo={panTo}\n            panTwo={panTwo}\n            originChoice={originChoice}\n            destinationChoice={destinationChoice}\n            originNumberChoice={originNumberChoice}\n            destinationNumberChoice={destinationNumberChoice}\n            timeChoice={timeChoice}\n            routeChoice={routeChoice}\n            // Passing in props - Variables defined above.\n            setRouteString={setRouteString}\n            setGeoMarkers={setGeoMarkers}\n            setMarkerSelection={setMarkerSelection}\n            setFilteredStops={setFilteredStops}\n            setOrigin={setOrigin}\n            setDestination={setDestination}\n            originNumber={originNumber}\n            destinationNumber={destinationNumber}\n            selectedTime={selectedTime}\n            setSelectedTime={setSelectedTime}\n            timeDayMonth={timeDayMonth}\n            setTimeDayMonth={setTimeDayMonth}\n            routeSelect={routeSelect}\n            setRouteSelect={setRouteSelect}\n            directionSelect={directionSelect}\n            setDirectionSelect={setDirectionSelect}\n            setResponse={setResponse}\n            // Passing in props - Stop data defined above.\n            parsedStops={parsedStops}\n            stopDescriptions={stopDescriptions}\n            allRoutes={allRoutes}\n            filteredStops={filteredStops}\n            filteredStopsLatLng={filteredStopsLatLng}\n          />\n          <div id=\"panel\"></div>\n        </Col>\n      </Row>\n    </Container>\n  );\n}\n\n// Function that filters the markers on the map\n// according to a user selected route.\nfunction RouteInfo(props) {\n  // i want to be able to define this variable outside of this function.\n  // but it has to be populated in here.\n  // when it has been populated it shoiuld be set in App.\n  const filteredMarkers = [];\n  const filteredStopStrings = [];\n  const filteredStopsCoords = [];\n\n  console.log(\n    \"RouteInfo from App.js, here is its routeString\",\n    props.routeString\n  );\n  for (var i = 0; i < myStops.length; i++) {\n    for (var j = 0; j < myStops[i].properties.routes.length; j++) {\n      if (String(myStops[i].properties.routes[j]) === props.routeString) {\n        filteredMarkers.push(myStops[i]);\n        filteredStopStrings.push(myStops[i].description);\n        filteredStopsCoords.push(myStops[i].geometry.pos);\n      }\n    }\n  }\n\n  const uniqueMarkers = filteredMarkers.filter(\n    (a, b) => filteredMarkers.indexOf(a) === b\n  );\n\n  const bounds = new window.google.maps.LatLngBounds(); // create an empty new bounds object\n  for (i = 0; i < filteredStopsCoords.length; i++) {\n    bounds.extend(filteredStopsCoords[i]);\n  }\n  if (String(props.routeString) !== \"\") {\n    // console.log(filteredMarkers);\n    return uniqueMarkers.map((stop) => (\n      <Marker\n        icon={icon}\n        key={stop.properties.id}\n        position={stop.geometry.pos}\n        onLoad={(marker) => {\n          props.filteredStopsLatLngChoice(filteredStopsCoords);\n          props.filteredStopsChoice(filteredStopStrings);\n          // Will do for now - removing cluster upon selection of route.\n          props.markerSelectionChoice(\"False\");\n          props.markerLoadHandler(marker, stop);\n          // Changing the bounds to fit map to chosen route's markers.\n          props.mapRef.current.fitBounds(bounds);\n          props.mapRef.current.setZoom(13);\n        }}\n        onClick={(event) => {\n          props.markerClickHandler(event, stop);\n        }}\n        animation={window.google.maps.Animation.DROP}\n      />\n    ));\n  } else {\n    return null;\n  }\n}\n\n// Function that renders all of the Dublin Bus stops in clustered form.\n// props.markerSelection being set to True means that they will all be displayed on\n// the first load. When a route is chosen from the RouteInfo function above,\n// props.markerSelection gets set to False and all of the markers are removed. This solution\n// is intended only to be temporary until something better comes up.\nfunction ClusteredMarkers(props) {\n  if (props.markerSelection === \"True\") {\n    return (\n      <MarkerClusterer options={options} maxZoom={15} minimumClusterSize={4}>\n        {(clusterer) =>\n          props.myStops.map((stop) => (\n            <Marker\n              icon={icon}\n              key={stop.properties.id}\n              position={stop.geometry.pos}\n              clusterer={clusterer}\n              onLoad={(marker) => props.markerLoadHandler(marker, stop)}\n              onClick={(event) => props.markerClickHandler(event, stop)}\n            />\n          ))\n        }\n      </MarkerClusterer>\n    );\n  } else {\n    return null;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}