{"ast":null,"code":"var _jsxFileName = \"/Users/evanbyrnes/Pycharm-python-workspace/T13_SP/client/src/components/PredictionInput.js\";\n// Importing outside developed components.\nimport React from \"react\";\nimport DatePicker from \"react-datepicker\";\nimport { Typeahead } from \"react-bootstrap-typeahead\";\nimport Form from \"react-bootstrap/Form\";\nimport Button from \"react-bootstrap/Button\"; // Importing self-developed components.\n\nimport ModelApi from \"./ModelApi\";\nimport RouteStopsApi from \"./RouteStopsApi\"; // Importing outside developed css.\n\nimport \"react-datepicker/dist/react-datepicker.css\";\nimport \".././styles.css\"; // Generating all of the GUI elements needed to provide the user with\n// journey time prediction. e.g. Date and Time select, Route select, etc.\n\nconst PredictionInput = props => {\n  // Tracking this in state in order to enable a submit button to trigger the ModelApi response.\n  const [destinationSelected, setDestinationSelected] = React.useState([]); // Track in state the getStops array so that it can be reset.\n\n  const [getStops, setGetStops] = React.useState([]); // Get an array of the stops associated with the users selected route\n\n  setGetStops(RouteStopsApi(props.routeSelect, props.directionSelect)); // Changing stops of route displayed on based on user choice.\n\n  const routeChoice = route => {\n    setRouteString(() => route.routeString);\n  }; // const getStops = RouteStopsApi(props.routeSelect, props.directionSelect);\n\n\n  console.log(\"PredictionInput: getStops triggered: \", getStops);\n  console.log(\"PredictionInput received routeSelect\", props.routeSelect); // Convert that array of strings to integers.\n\n  const a = getStops; // A map method for Arrays, applying a function to all elements of an array.\n\n  const directionStopNumbers = a.map(function (x) {\n    return parseInt(x, 10);\n  });\n  console.log(\"In PredictionInput - directionStopNumbers here\", directionStopNumbers);\n  const routeDirectionStops = [];\n\n  for (var q = 0; q < props.parsedStops.length; q++) {\n    for (var r = 0; r < directionStopNumbers.length; r++) {\n      if (directionStopNumbers[r] === parseInt(props.parsedStops[q].id)) {\n        routeDirectionStops.push(props.parsedStops[q].description);\n      }\n    }\n  }\n\n  return /*#__PURE__*/React.createElement(Form, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Form.Group, {\n    // Inbuilt props: https://react-bootstrap.github.io/components/forms/#form-group-props.\n    controlId: \"formRoute\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Typeahead // Inbuilt props: https://github.com/ericgio/react-bootstrap-typeahead/blob/master/docs/API.md#typeahead.\n  , {\n    id: \"basic-example\",\n    options: props.allRoutes,\n    placeholder: \"Select a route: e.g. 46A\",\n    onChange: route => {\n      try {\n        for (var i = 0; i < props.allRoutes.length; i++) {\n          if (String(route) === props.allRoutes[i]) {\n            const routeString = props.allRoutes[i];\n            props.routeChoice({\n              routeString\n            });\n            props.panTwo({\n              lat: 53.349804,\n              lng: -6.30131\n            });\n            props.setRouteSelect(routeString);\n            props.setResponse(null);\n          }\n        }\n      } catch (error) {\n        console.log(\"ðŸ˜± Error: \", error);\n      }\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 9\n    }\n  })), /*#__PURE__*/React.createElement(Form.Group, {\n    // Inbuilt props: https://react-bootstrap.github.io/components/forms/#form-group-props.\n    controlId: \"formDirection\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Typeahead // Inbuilt props: https://github.com/ericgio/react-bootstrap-typeahead/blob/master/docs/API.md#typeahead.\n  , {\n    id: \"basic-example\",\n    options: [\"Phoenix Park\", \"Dun Laoghaire\"],\n    maxVisible: 2,\n    placeholder: \"Select a direction: e.g. Phoenix Park\",\n    onChange: address => {\n      if (String(address) === \"Dun Laoghaire\") {\n        props.setDirectionSelect(1);\n      } else {\n        props.setDirectionSelect(2);\n      }\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 9\n    }\n  })), /*#__PURE__*/React.createElement(Form.Group, {\n    // Inbuilt props: https://react-bootstrap.github.io/components/forms/#form-group-props.\n    controlId: \"formTimeOfTravel\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      textAlign: \"center\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"strong\", {\n    style: {\n      textAlign: \"center\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 11\n    }\n  }, \"When are you travelling?\")), /*#__PURE__*/React.createElement(DatePicker // Inbuilt props: https://github.com/Hacker0x01/react-datepicker/blob/master/docs/index.md.\n  , {\n    selected: props.selectedTime,\n    onChange: date => props.timeChoice(date),\n    showTimeSelect: true,\n    timeFormat: \"HH:mm\",\n    timeIntervals: 60,\n    timeCaption: \"time\",\n    dateFormat: \"MMMM d, yyyy h:mm aa\" //  CSS - not working, find a fix.\n    ,\n    style: {\n      textAlign: \"center\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(Form.Group, {\n    // Inbuilt props: https://react-bootstrap.github.io/components/forms/#form-group-props.\n    controlId: \"formDeparture\" // CSS\n    ,\n    style: {\n      paddingTop: \"2vh\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Typeahead // Inbuilt props: https://github.com/ericgio/react-bootstrap-typeahead/blob/master/docs/API.md#typeahead.\n  , {\n    id: \"basic-example\",\n    options: routeDirectionStops,\n    placeholder: \"Departing from: e.g. Stop 334, D'Olier Street\",\n    onChange: address => {\n      try {\n        for (var i = 0; i < props.parsedStops.length; i++) {\n          if (String(address) === props.parsedStops[i].description) {\n            const id = props.parsedStops[i].id;\n            const lat = props.parsedStops[i].geometry.lat;\n            const lng = props.parsedStops[i].geometry.lng;\n            props.originChoice({\n              lat,\n              lng\n            });\n            props.panTo({\n              lat,\n              lng\n            });\n            props.originNumberChoice({\n              id\n            });\n          }\n        }\n      } catch (error) {\n        console.log(\"ðŸ˜± Error: \", error);\n      }\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 11\n    }\n  })), /*#__PURE__*/React.createElement(Form.Group, {\n    // Inbuilt props: https://react-bootstrap.github.io/components/forms/#form-group-props.\n    controlId: \"formArrival\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 153,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Typeahead // Inbuilt props: https://github.com/ericgio/react-bootstrap-typeahead/blob/master/docs/API.md#typeahead.\n  , {\n    id: \"basic-example\",\n    options: routeDirectionStops,\n    placeholder: \"Destination: e.g. Stop 2007, Stillorgan Road\",\n    onChange: s => {\n      try {\n        // console.log(\"button triggered\");\n        for (var i = 0; i < props.parsedStops.length; i++) {\n          if (String(s) === props.parsedStops[i].description) {\n            const lat = props.parsedStops[i].geometry.lat;\n            const lng = props.parsedStops[i].geometry.lng;\n            props.panTo({\n              lat,\n              lng\n            });\n            setDestinationSelected(s);\n          }\n        }\n      } catch (error) {\n        console.log(\"ðŸ˜± Error: \", error);\n      }\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 157,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(Form.Group, {\n    // CSS\n    style: {\n      paddingTop: \"1vh\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 179,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(Button // Inbuilt props: https://react-bootstrap.github.io/components/buttons/#button-props.\n  , {\n    style: {\n      width: \"100%\"\n    },\n    onClick: () => {\n      try {\n        // console.log(\"PredictionInput button triggered\");\n        for (var i = 0; i < props.parsedStops.length; i++) {\n          if (String(destinationSelected) === props.parsedStops[i].description) {\n            const id = props.parsedStops[i].id;\n            const lat = props.parsedStops[i].geometry.lat;\n            const lng = props.parsedStops[i].geometry.lng;\n            props.destinationChoice({\n              lat,\n              lng\n            });\n            props.destinationNumberChoice({\n              id\n            });\n          }\n        }\n      } catch (error) {\n        console.log(\"ðŸ˜± Error: \", error);\n      }\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 183,\n      columnNumber: 13\n    }\n  }, \"Submit\")))), /*#__PURE__*/React.createElement(ModelApi // Passing in props - Variables defined in App.js.\n  , {\n    originNumber: props.originNumber,\n    destinationNumber: props.destinationNumber,\n    timeDayMonth: props.timeDayMonth,\n    routeSelect: props.routeSelect,\n    directionSelect: props.directionSelect,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 211,\n      columnNumber: 7\n    }\n  }));\n};\n\nexport default PredictionInput;","map":{"version":3,"sources":["/Users/evanbyrnes/Pycharm-python-workspace/T13_SP/client/src/components/PredictionInput.js"],"names":["React","DatePicker","Typeahead","Form","Button","ModelApi","RouteStopsApi","PredictionInput","props","destinationSelected","setDestinationSelected","useState","getStops","setGetStops","routeSelect","directionSelect","routeChoice","route","setRouteString","routeString","console","log","a","directionStopNumbers","map","x","parseInt","routeDirectionStops","q","parsedStops","length","r","id","push","description","allRoutes","i","String","panTwo","lat","lng","setRouteSelect","setResponse","error","address","setDirectionSelect","textAlign","selectedTime","date","timeChoice","paddingTop","geometry","originChoice","panTo","originNumberChoice","s","width","destinationChoice","destinationNumberChoice","originNumber","destinationNumber","timeDayMonth"],"mappings":"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","sourcesContent":["// Importing outside developed components.\nimport React from \"react\";\nimport DatePicker from \"react-datepicker\";\nimport { Typeahead } from \"react-bootstrap-typeahead\";\nimport Form from \"react-bootstrap/Form\";\nimport Button from \"react-bootstrap/Button\";\n// Importing self-developed components.\nimport ModelApi from \"./ModelApi\";\nimport RouteStopsApi from \"./RouteStopsApi\";\n// Importing outside developed css.\nimport \"react-datepicker/dist/react-datepicker.css\";\nimport \".././styles.css\";\n\n// Generating all of the GUI elements needed to provide the user with\n// journey time prediction. e.g. Date and Time select, Route select, etc.\nconst PredictionInput = (props) => {\n  // Tracking this in state in order to enable a submit button to trigger the ModelApi response.\n  const [destinationSelected, setDestinationSelected] = React.useState([]);\n  // Track in state the getStops array so that it can be reset.\n  const [getStops, setGetStops] = React.useState([]);\n  // Get an array of the stops associated with the users selected route\n  setGetStops(RouteStopsApi(props.routeSelect, props.directionSelect));\n  // Changing stops of route displayed on based on user choice.\n  const routeChoice = (route) => {\n    setRouteString(() => route.routeString);\n  };\n  // const getStops = RouteStopsApi(props.routeSelect, props.directionSelect);\n  console.log(\"PredictionInput: getStops triggered: \", getStops);\n  console.log(\"PredictionInput received routeSelect\", props.routeSelect);\n  // Convert that array of strings to integers.\n  const a = getStops;\n  // A map method for Arrays, applying a function to all elements of an array.\n  const directionStopNumbers = a.map(function (x) {\n    return parseInt(x, 10);\n  });\n\n  console.log(\n    \"In PredictionInput - directionStopNumbers here\",\n    directionStopNumbers\n  );\n  const routeDirectionStops = [];\n\n  for (var q = 0; q < props.parsedStops.length; q++) {\n    for (var r = 0; r < directionStopNumbers.length; r++) {\n      if (directionStopNumbers[r] === parseInt(props.parsedStops[q].id)) {\n        routeDirectionStops.push(props.parsedStops[q].description);\n      }\n    }\n  }\n\n  return (\n    <Form>\n      <Form.Group\n        // Inbuilt props: https://react-bootstrap.github.io/components/forms/#form-group-props.\n        controlId=\"formRoute\"\n      >\n        <Typeahead\n          // Inbuilt props: https://github.com/ericgio/react-bootstrap-typeahead/blob/master/docs/API.md#typeahead.\n          id=\"basic-example\"\n          options={props.allRoutes}\n          placeholder=\"Select a route: e.g. 46A\"\n          onChange={(route) => {\n            try {\n              for (var i = 0; i < props.allRoutes.length; i++) {\n                if (String(route) === props.allRoutes[i]) {\n                  const routeString = props.allRoutes[i];\n                  props.routeChoice({ routeString });\n                  props.panTwo({ lat: 53.349804, lng: -6.30131 });\n                  props.setRouteSelect(routeString);\n                  props.setResponse(null);\n                }\n              }\n            } catch (error) {\n              console.log(\"ðŸ˜± Error: \", error);\n            }\n          }}\n        />\n      </Form.Group>\n\n      <Form.Group\n        // Inbuilt props: https://react-bootstrap.github.io/components/forms/#form-group-props.\n        controlId=\"formDirection\"\n      >\n        <Typeahead\n          // Inbuilt props: https://github.com/ericgio/react-bootstrap-typeahead/blob/master/docs/API.md#typeahead.\n          id=\"basic-example\"\n          options={[\"Phoenix Park\", \"Dun Laoghaire\"]}\n          maxVisible={2}\n          placeholder=\"Select a direction: e.g. Phoenix Park\"\n          onChange={(address) => {\n            if (String(address) === \"Dun Laoghaire\") {\n              props.setDirectionSelect(1);\n            } else {\n              props.setDirectionSelect(2);\n            }\n          }}\n        />\n      </Form.Group>\n\n      <Form.Group\n        // Inbuilt props: https://react-bootstrap.github.io/components/forms/#form-group-props.\n        controlId=\"formTimeOfTravel\"\n      >\n        <div style={{ textAlign: \"center\" }}>\n          <strong style={{ textAlign: \"center\" }}>\n            When are you travelling?\n          </strong>\n        </div>\n\n        <DatePicker\n          // Inbuilt props: https://github.com/Hacker0x01/react-datepicker/blob/master/docs/index.md.\n          selected={props.selectedTime}\n          onChange={(date) => props.timeChoice(date)}\n          showTimeSelect\n          timeFormat=\"HH:mm\"\n          timeIntervals={60}\n          timeCaption=\"time\"\n          dateFormat=\"MMMM d, yyyy h:mm aa\"\n          //  CSS - not working, find a fix.\n          style={{ textAlign: \"center\" }}\n        />\n\n        <Form.Group\n          // Inbuilt props: https://react-bootstrap.github.io/components/forms/#form-group-props.\n          controlId=\"formDeparture\"\n          // CSS\n          style={{ paddingTop: \"2vh\" }}\n        >\n          <Typeahead\n            // Inbuilt props: https://github.com/ericgio/react-bootstrap-typeahead/blob/master/docs/API.md#typeahead.\n            id=\"basic-example\"\n            options={routeDirectionStops}\n            placeholder=\"Departing from: e.g. Stop 334, D'Olier Street\"\n            onChange={(address) => {\n              try {\n                for (var i = 0; i < props.parsedStops.length; i++) {\n                  if (String(address) === props.parsedStops[i].description) {\n                    const id = props.parsedStops[i].id;\n                    const lat = props.parsedStops[i].geometry.lat;\n                    const lng = props.parsedStops[i].geometry.lng;\n                    props.originChoice({ lat, lng });\n                    props.panTo({ lat, lng });\n                    props.originNumberChoice({ id });\n                  }\n                }\n              } catch (error) {\n                console.log(\"ðŸ˜± Error: \", error);\n              }\n            }}\n          />\n        </Form.Group>\n\n        <Form.Group\n          // Inbuilt props: https://react-bootstrap.github.io/components/forms/#form-group-props.\n          controlId=\"formArrival\"\n        >\n          <Typeahead\n            // Inbuilt props: https://github.com/ericgio/react-bootstrap-typeahead/blob/master/docs/API.md#typeahead.\n            id=\"basic-example\"\n            options={routeDirectionStops}\n            placeholder=\"Destination: e.g. Stop 2007, Stillorgan Road\"\n            onChange={(s) => {\n              try {\n                // console.log(\"button triggered\");\n                for (var i = 0; i < props.parsedStops.length; i++) {\n                  if (String(s) === props.parsedStops[i].description) {\n                    const lat = props.parsedStops[i].geometry.lat;\n                    const lng = props.parsedStops[i].geometry.lng;\n                    props.panTo({ lat, lng });\n                    setDestinationSelected(s);\n                  }\n                }\n              } catch (error) {\n                console.log(\"ðŸ˜± Error: \", error);\n              }\n            }}\n          />\n\n          <Form.Group\n            // CSS\n            style={{ paddingTop: \"1vh\" }}\n          >\n            <Button\n              // Inbuilt props: https://react-bootstrap.github.io/components/buttons/#button-props.\n              style={{ width: \"100%\" }}\n              onClick={() => {\n                try {\n                  // console.log(\"PredictionInput button triggered\");\n                  for (var i = 0; i < props.parsedStops.length; i++) {\n                    if (\n                      String(destinationSelected) ===\n                      props.parsedStops[i].description\n                    ) {\n                      const id = props.parsedStops[i].id;\n                      const lat = props.parsedStops[i].geometry.lat;\n                      const lng = props.parsedStops[i].geometry.lng;\n                      props.destinationChoice({ lat, lng });\n                      props.destinationNumberChoice({ id });\n                    }\n                  }\n                } catch (error) {\n                  console.log(\"ðŸ˜± Error: \", error);\n                }\n              }}\n            >\n              Submit\n            </Button>\n          </Form.Group>\n        </Form.Group>\n      </Form.Group>\n      <ModelApi\n        // Passing in props - Variables defined in App.js.\n        originNumber={props.originNumber}\n        destinationNumber={props.destinationNumber}\n        timeDayMonth={props.timeDayMonth}\n        routeSelect={props.routeSelect}\n        directionSelect={props.directionSelect}\n      ></ModelApi>\n    </Form>\n  );\n};\n\nexport default PredictionInput;\n"]},"metadata":{},"sourceType":"module"}