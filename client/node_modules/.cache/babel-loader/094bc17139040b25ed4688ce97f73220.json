{"ast":null,"code":"var _jsxFileName = \"/Users/evanbyrnes/Pycharm-python-workspace/T13_SP/client/src/components/T13GoogleMap.js\";\nimport React, { Component, useState } from \"react\";\nimport { useLoadScript, GoogleMap, Marker, InfoWindow, MarkerClusterer } from \"@react-google-maps/api\";\nimport googleMapApiKey from \".././config\";\nimport useSwr from \"swr\";\nimport * as data from \".././data/db-stops.json\";\nconst options = {\n  imagePath: \"https://developers.google.com/maps/documentation/javascript/examples/markerclusterer/m\"\n};\nexport default function T13GoogleMap() {\n  // The things we need to track in state\n  const [mapRef, setMapRef] = useState(null);\n  const [selectedPlace, setSelectedPlace] = useState(null);\n  const [markerMap, setMarkerMap] = useState({}); // consts: [53.349804, -6.260310] - Dublin\n\n  const [center, setCenter] = useState({\n    lat: 53.349804,\n    lng: -6.26031\n  });\n  const [zoom, setZoom] = useState(10); // const [clickedLatLng, setClickedLatLng] = useState(null);\n\n  const [infoOpen, setInfoOpen] = useState(false); // Load the Google maps scripts\n\n  const {\n    isLoaded\n  } = useLoadScript({\n    // Enter your own Google Maps API key in config.js\n    googleMapsApiKey: googleMapApiKey\n  }); // Currently reading in data variable from db-stops.json file, will use API in future, see three lines below\n  //   const url = \"https://data.smartdublin.ie/cgi-bin/rtpi/busstopinformation?operator=bac\";\n  //   const { data, error } = useSwr(url, { fetcher });\n  //   const stopData = data && !error ? data.slice(0, 4200) : [];\n  // Currently reading in data variable from db-stops.json file, will use API in future, see three commented lines above.\n\n  const uncleanData = data.results; // A GeoJSON Feature object, with the geometry/pos of each object being a GeoJSON Point\n  // ref: https://tools.ietf.org/html/rfc7946#section-3.2\n\n  const myStops = uncleanData.map(stop => ({\n    type: \"Feature\",\n    properties: {\n      id: stop.stopid,\n      fullname: stop.fullname,\n      routes: stop.operators[0].routes\n    },\n    geometry: {\n      type: \"Point\",\n      pos: {\n        lat: parseFloat(stop.latitude),\n        lng: parseFloat(stop.longitude)\n      }\n    }\n  })); // Iterate myStops to size, center, and zoom map to contain all markers\n\n  const fitBounds = map => {\n    const bounds = new window.google.maps.LatLngBounds();\n    myStops.map(stop => {\n      bounds.extend(stop.geometry.pos);\n      return stop.properties.id;\n    });\n    map.fitBounds(bounds);\n  };\n\n  const loadHandler = map => {\n    // Store a reference to the google map instance in state\n    setMapRef(map); // Fit map bounds to contain all markers\n\n    fitBounds(map);\n  }; // We have to create a mapping of our places to actual Marker objects\n\n\n  const markerLoadHandler = (marker, stop) => {\n    return setMarkerMap(prevState => {\n      return { ...prevState,\n        [stop.properties.id]: marker\n      };\n    });\n  };\n\n  const markerClickHandler = (event, place) => {\n    // Remember which stop was clicked\n    setSelectedPlace(place); // Required so clicking a 2nd marker works as expected\n\n    if (infoOpen) {\n      setInfoOpen(false);\n    }\n\n    setInfoOpen(true); // If you want to zoom in a little on marker click\n\n    if (zoom < 11) {\n      setZoom(11);\n    } // if you want to center the selected Marker\n    //setCenter(place.pos)\n\n  };\n\n  return /*#__PURE__*/React.createElement(GoogleMap // Do stuff on map initial laod\n  , {\n    onLoad: loadHandler // Save the current center position in state\n    ,\n    onCenterChanged: () => setCenter(mapRef.getCenter().toJSON()) // Save the user's map click position\n    // onClick={e => setClickedLatLng(e.latLng.toJSON())}\n    ,\n    center: center,\n    zoom: zoom,\n    mapContainerStyle: {\n      height: \"94vh\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(MarkerClusterer, {\n    options: options,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 7\n    }\n  }, clusterer => myStops.map(stop => /*#__PURE__*/React.createElement(Marker, {\n    key: stop.properties.id,\n    position: stop.geometry.pos,\n    clusterer: clusterer,\n    onLoad: marker => markerLoadHandler(marker, stop),\n    onClick: event => markerClickHandler(event, stop),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 13\n    }\n  }))), infoOpen && selectedPlace && /*#__PURE__*/React.createElement(InfoWindow, {\n    anchor: markerMap[selectedPlace.properties.id],\n    onCloseClick: () => setInfoOpen(false),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"h3\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 13\n    }\n  }, \"STOPID: \", selectedPlace.properties.id), /*#__PURE__*/React.createElement(\"h5\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 13\n    }\n  }, \"ROUTES: \", selectedPlace.properties.routes.join(\", \")))));\n}","map":{"version":3,"sources":["/Users/evanbyrnes/Pycharm-python-workspace/T13_SP/client/src/components/T13GoogleMap.js"],"names":["React","Component","useState","useLoadScript","GoogleMap","Marker","InfoWindow","MarkerClusterer","googleMapApiKey","useSwr","data","options","imagePath","T13GoogleMap","mapRef","setMapRef","selectedPlace","setSelectedPlace","markerMap","setMarkerMap","center","setCenter","lat","lng","zoom","setZoom","infoOpen","setInfoOpen","isLoaded","googleMapsApiKey","uncleanData","results","myStops","map","stop","type","properties","id","stopid","fullname","routes","operators","geometry","pos","parseFloat","latitude","longitude","fitBounds","bounds","window","google","maps","LatLngBounds","extend","loadHandler","markerLoadHandler","marker","prevState","markerClickHandler","event","place","getCenter","toJSON","height","clusterer","join"],"mappings":"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","sourcesContent":["import React, { Component, useState } from \"react\";\nimport {\n  useLoadScript,\n  GoogleMap,\n  Marker,\n  InfoWindow,\n  MarkerClusterer,\n} from \"@react-google-maps/api\";\n\nimport googleMapApiKey from \".././config\";\nimport useSwr from \"swr\";\n\nimport * as data from \".././data/db-stops.json\";\nconst options = {\n  imagePath:\n    \"https://developers.google.com/maps/documentation/javascript/examples/markerclusterer/m\",\n};\n\nexport default function T13GoogleMap() {\n  // The things we need to track in state\n  const [mapRef, setMapRef] = useState(null);\n  const [selectedPlace, setSelectedPlace] = useState(null);\n  const [markerMap, setMarkerMap] = useState({});\n  // consts: [53.349804, -6.260310] - Dublin\n  const [center, setCenter] = useState({ lat: 53.349804, lng: -6.26031 });\n  const [zoom, setZoom] = useState(10);\n  // const [clickedLatLng, setClickedLatLng] = useState(null);\n  const [infoOpen, setInfoOpen] = useState(false);\n\n  // Load the Google maps scripts\n  const { isLoaded } = useLoadScript({\n    // Enter your own Google Maps API key in config.js\n    googleMapsApiKey: googleMapApiKey,\n  });\n\n  // Currently reading in data variable from db-stops.json file, will use API in future, see three lines below\n  //   const url = \"https://data.smartdublin.ie/cgi-bin/rtpi/busstopinformation?operator=bac\";\n  //   const { data, error } = useSwr(url, { fetcher });\n  //   const stopData = data && !error ? data.slice(0, 4200) : [];\n  // Currently reading in data variable from db-stops.json file, will use API in future, see three commented lines above.\n  const uncleanData = data.results;\n  // A GeoJSON Feature object, with the geometry/pos of each object being a GeoJSON Point\n  // ref: https://tools.ietf.org/html/rfc7946#section-3.2\n  const myStops = uncleanData.map((stop) => ({\n    type: \"Feature\",\n    properties: {\n      id: stop.stopid,\n      fullname: stop.fullname,\n      routes: stop.operators[0].routes,\n    },\n    geometry: {\n      type: \"Point\",\n      pos: {\n        lat: parseFloat(stop.latitude),\n        lng: parseFloat(stop.longitude),\n      },\n    },\n  }));\n\n  // Iterate myStops to size, center, and zoom map to contain all markers\n  const fitBounds = (map) => {\n    const bounds = new window.google.maps.LatLngBounds();\n    myStops.map((stop) => {\n      bounds.extend(stop.geometry.pos);\n      return stop.properties.id;\n    });\n    map.fitBounds(bounds);\n  };\n\n  const loadHandler = (map) => {\n    // Store a reference to the google map instance in state\n    setMapRef(map);\n    // Fit map bounds to contain all markers\n    fitBounds(map);\n  };\n\n  // We have to create a mapping of our places to actual Marker objects\n  const markerLoadHandler = (marker, stop) => {\n    return setMarkerMap((prevState) => {\n      return { ...prevState, [stop.properties.id]: marker };\n    });\n  };\n\n  const markerClickHandler = (event, place) => {\n    // Remember which stop was clicked\n    setSelectedPlace(place);\n\n    // Required so clicking a 2nd marker works as expected\n    if (infoOpen) {\n      setInfoOpen(false);\n    }\n\n    setInfoOpen(true);\n\n    // If you want to zoom in a little on marker click\n    if (zoom < 11) {\n      setZoom(11);\n    }\n\n    // if you want to center the selected Marker\n    //setCenter(place.pos)\n  };\n\n  return (\n    <GoogleMap\n      // Do stuff on map initial laod\n      onLoad={loadHandler}\n      // Save the current center position in state\n      onCenterChanged={() => setCenter(mapRef.getCenter().toJSON())}\n      // Save the user's map click position\n      // onClick={e => setClickedLatLng(e.latLng.toJSON())}\n      center={center}\n      zoom={zoom}\n      mapContainerStyle={{\n        height: \"94vh\",\n      }}\n    >\n      <MarkerClusterer options={options}>\n        {(clusterer) =>\n          myStops.map((stop) => (\n            <Marker\n              key={stop.properties.id}\n              position={stop.geometry.pos}\n              clusterer={clusterer}\n              onLoad={(marker) => markerLoadHandler(marker, stop)}\n              onClick={(event) => markerClickHandler(event, stop)}\n            />\n          ))\n        }\n      </MarkerClusterer>\n\n      {infoOpen && selectedPlace && (\n        <InfoWindow\n          anchor={markerMap[selectedPlace.properties.id]}\n          onCloseClick={() => setInfoOpen(false)}\n        >\n          <div>\n            <h3>STOPID: {selectedPlace.properties.id}</h3>\n            <h5>ROUTES: {selectedPlace.properties.routes.join(\", \")}</h5>\n            {/* <div>This is your info window content</div> */}\n          </div>\n        </InfoWindow>\n      )}\n    </GoogleMap>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}