{"ast":null,"code":"var _jsxFileName = \"/Users/evanbyrnes/Pycharm-python-workspace/T13_SP/client/src/App.js\";\n// Importing outside developed components.\nimport React, { useState } from \"react\";\nimport { useLoadScript, GoogleMap, Marker, InfoWindow, MarkerClusterer } from \"@react-google-maps/api\";\nimport Container from \"react-bootstrap/Container\";\nimport Form from \"react-bootstrap/Form\";\nimport Table from \"react-bootstrap/Table\";\nimport { Typeahead } from \"react-bootstrap-typeahead\";\nimport styled from \"styled-components\";\nimport useSwr from \"swr\"; // Importing self-developed components.\n\nimport Api from \"./components/Api\";\nimport DateTimeSelector from \"./components/DateTimeSelector\";\nimport BrandBar from \"./components/BrandBar\";\nimport Directions from \"./components/Directions\"; // import Table from \"./components/Table\";\n// Importing outside developed css.\n\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"@reach/combobox/styles.css\"; // Importing the Dublin Bus API stops data\n\nimport * as data from \"./data/DublinBusStops.json\"; // Importing Google Maps Api Key.\n\nimport googleMapApiKey from \"./config\"; // Defining libraries for Google Places\n\nconst libraries = [\"places\"]; // Defined styling for separation of page displayed.\n\nconst Wrapper = styled.main`\n  width: 100%;\n  height: 100%;\n`; // Importing custom styles to customize the style of Google Map.\n// Important for including and excluding certain place markers etc.\n\nconst styles = require(\"./data/GoogleMapStyles.json\"); // Defined custom styles and location for Google Map.\n\n\nconst mapOptions = {\n  styles: styles,\n  disableDefaultUI: true,\n  zoomControl: true\n};\nconst mapContainerStyle = {\n  height: \"94vh\"\n}; // consts: [53.349804, -6.260310] - Dublin\n\nconst dublinCenter = {\n  lat: 53.349804,\n  lng: -6.30131\n};\nconst dublinBounds = {\n  north: 51.09,\n  south: 54.29,\n  west: -7.02,\n  east: -5.26\n}; // Icon used to represent a bus stop on the map.\n\nconst icon = {\n  url: \"/bus_icon.svg\",\n  scaledSize: {\n    width: 18,\n    height: 18\n  }\n}; // Icons used when Markers are clustered.\n\nconst options = {\n  imagePath: \"https://developers.google.com/maps/documentation/javascript/examples/markerclusterer/m\"\n}; // Parsing the Stops data into various object shapes.\n\nconst rawData = data.results;\nconst myStops = rawData.map(stop => ({\n  description: \"Stop \" + stop.stopid + \", \" + stop.fullname,\n  type: \"Feature\",\n  properties: {\n    id: stop.stopid,\n    fullname: stop.fullname,\n    routes: stop.operators[0].routes\n  },\n  geometry: {\n    type: \"Point\",\n    pos: {\n      lat: parseFloat(stop.latitude),\n      lng: parseFloat(stop.longitude)\n    }\n  }\n}));\nconst parsedStops = myStops.map(parsed => ({\n  id: parsed.properties.id,\n  description: parsed.description,\n  geometry: parsed.geometry.pos\n})); // An array that contains only the names of all the stops.\n\nconst stopDescriptions = [];\n\nfor (var i = 0; i < parsedStops.length; i++) {\n  stopDescriptions.push(parsedStops[i].description);\n} // Main function to draw the Map/Page.\n\n\nexport default function App() {\n  const {\n    isLoaded,\n    loadError\n  } = useLoadScript({\n    googleMapsApiKey: googleMapApiKey,\n    libraries\n  });\n  const [center, setCenter] = useState(dublinCenter);\n  const [zoom, setZoom] = useState(11); // The things we need to track in state:\n\n  const [selectedPlace, setSelectedPlace] = useState(null);\n  const [markerMap, setMarkerMap] = useState({});\n  const [infoOpen, setInfoOpen] = useState(false);\n  const [markers, setMarkers] = React.useState([]);\n  const [selected, setSelected] = React.useState(null);\n  const [stopNumber, setStopNumber] = React.useState(0);\n  const mapRef = React.useRef();\n  const onMapLoad = React.useCallback(map => {\n    mapRef.current = map;\n  }, []);\n  const panTo = React.useCallback(({\n    lat,\n    lng\n  }) => {\n    mapRef.current.panTo({\n      lat,\n      lng\n    });\n    mapRef.current.setZoom(16);\n    setMarkers(current => [...current, {\n      lat: lat,\n      lng: lng\n    }]);\n  }, []); // Changing stop realtime info based on user choice.\n\n  const stopChoice = React.useCallback(number => {\n    setStopNumber(() => parseInt(number.id));\n  }); // We have to create a mapping of our places to actual Marker objects\n\n  const markerLoadHandler = (marker, stop) => {\n    return setMarkerMap(prevState => {\n      return { ...prevState,\n        [stop.properties.id]: marker\n      };\n    });\n  };\n\n  const markerClickHandler = (event, place) => {\n    // Remember which stop was clicked\n    setSelectedPlace(place); // Required so clicking a 2nd marker works as expected\n\n    if (infoOpen) {\n      setInfoOpen(false);\n    }\n\n    setInfoOpen(true);\n  };\n\n  if (loadError) return \"Error\";\n  if (!isLoaded) return \"Loading...\";\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 150,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Container, {\n    fluid: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 151,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(BrandBar, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 152,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(Wrapper, {\n    style: {\n      width: \"75%\",\n      float: \"left\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 153,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(GoogleMap, {\n    mapContainerStyle: mapContainerStyle,\n    center: center,\n    zoom: zoom,\n    maxZoom: 13,\n    options: mapOptions,\n    onLoad: onMapLoad,\n    restriction: {\n      latLngBounds: dublinBounds,\n      strictBounds: false\n    },\n    ref: mapRef => mapRef && mapRef.fitBounds(dublinBounds),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 155,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(Locate, {\n    panTo: panTo,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 165,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(MarkerClusterer, {\n    options: options,\n    maxZoom: 16,\n    minimumClusterSize: 4,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 167,\n      columnNumber: 13\n    }\n  }, clusterer => myStops.map(stop => /*#__PURE__*/React.createElement(Marker, {\n    icon: icon,\n    key: stop.properties.id,\n    position: stop.geometry.pos,\n    clusterer: clusterer,\n    onLoad: marker => markerLoadHandler(marker, stop),\n    onClick: event => markerClickHandler(event, stop),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 174,\n      columnNumber: 19\n    }\n  }))), infoOpen && selectedPlace && /*#__PURE__*/React.createElement(InfoWindow, {\n    anchor: markerMap[selectedPlace.properties.id],\n    onCloseClick: () => setInfoOpen(false),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 187,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 191,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"h3\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 192,\n      columnNumber: 19\n    }\n  }, \"Stop Number: \", selectedPlace.properties.id), /*#__PURE__*/React.createElement(\"h5\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 193,\n      columnNumber: 19\n    }\n  }, \"Routes: \", selectedPlace.properties.routes.join(\", \")))), markers.map(marker => /*#__PURE__*/React.createElement(Marker, {\n    key: `${marker.lat}-${marker.lng}`,\n    position: {\n      lat: marker.lat,\n      lng: marker.lng\n    },\n    onClick: () => {\n      setSelected(marker);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 199,\n      columnNumber: 15\n    }\n  })), /*#__PURE__*/React.createElement(Directions, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 207,\n      columnNumber: 13\n    }\n  }))), /*#__PURE__*/React.createElement(Wrapper, {\n    style: {\n      width: \"25%\",\n      float: \"right\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 211,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Container, {\n    style: {\n      paddingTop: \"2vh\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 212,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(Form, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 213,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Form.Group, {\n    controlId: \"formDeparture\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 214,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(Form.Label, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 215,\n      columnNumber: 17\n    }\n  }, \"Real Time Stop Information\"), /*#__PURE__*/React.createElement(Search, {\n    panTo: panTo,\n    stopChoice: stopChoice,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 216,\n      columnNumber: 17\n    }\n  }))), /*#__PURE__*/React.createElement(StopInfo, {\n    number: stopNumber,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 220,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    id: \"panel\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 222,\n      columnNumber: 13\n    }\n  })))));\n} // Generate an icon which when clicked\n// will adjust the map to the users location.\n\nfunction Locate({\n  panTo\n}) {\n  return /*#__PURE__*/React.createElement(\"button\", {\n    className: \"locate\",\n    onClick: () => {\n      navigator.geolocation.getCurrentPosition( // Hard coding Dublin for the time being.\n      position => {\n        panTo({\n          // lat: position.coords.latitude,\n          // lng: position.coords.longitude,\n          lat: dublinCenter.lat,\n          lng: dublinCenter.lng\n        });\n      }, () => null);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 234,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"img\", {\n    alt: \"compass\",\n    src: \"/compass.svg\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 251,\n      columnNumber: 7\n    }\n  }));\n} // Generate a searchbox that includes all of the\n// stops. Chosen stop will adjust the map to that\n// stops location and display its realtime info.\n\n\nfunction Search({\n  panTo,\n  stopChoice\n}) {\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 261,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Typeahead, {\n    id: \"basic-example\",\n    options: stopDescriptions,\n    maxVisible: 2,\n    placeholder: \"Choose a stop...\",\n    onChange: address => {\n      try {\n        for (var i = 0; i < parsedStops.length; i++) {\n          if (address == parsedStops[i].description) {\n            const lat = parsedStops[i].geometry.lat;\n            const lng = parsedStops[i].geometry.lng;\n            const id = parsedStops[i].id;\n            panTo({\n              lat,\n              lng\n            });\n            stopChoice({\n              id\n            });\n          }\n        }\n      } catch (error) {\n        console.log(\"error\");\n      }\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 262,\n      columnNumber: 7\n    }\n  }));\n} // Calls the realtime api and returns a table.\n\n\nfunction StopInfo(props) {\n  const fetcher = (...args) => fetch(...args).then(response => response.json());\n\n  const url = \"https://data.smartdublin.ie/cgi-bin/rtpi/realtimebusinformation?stopid=\" + props.number + \"&operator=bac\";\n  const {\n    data,\n    error\n  } = useSwr(url, {\n    fetcher\n  });\n  const rawStopData = data && !error ? data : // creating a placeholder object while awaiting api response\n  {\n    results: [{\n      arrivaldatetime: \"08/07/2020 00:00:00\",\n      route: \"\",\n      destination: \"\",\n      duetime: \"\"\n    }]\n  };\n  const stopData = rawStopData.results;\n  const realInfo = stopData.map(info => ({\n    id: info.arrivaldatetime,\n    route: info.route,\n    destination: info.destination,\n    arrivaltime: info.duetime\n  }));\n  return /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      maxHeight: \"15vh\",\n      overflowY: \"scroll\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 319,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Table, {\n    striped: true,\n    bordered: true,\n    hover: true,\n    size: \"sm\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 320,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"thead\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 321,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"tr\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 322,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"th\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 323,\n      columnNumber: 13\n    }\n  }, \"Route\"), /*#__PURE__*/React.createElement(\"th\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 324,\n      columnNumber: 13\n    }\n  }, \"Destination\"), /*#__PURE__*/React.createElement(\"th\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 325,\n      columnNumber: 13\n    }\n  }, \"Arrival\"))), /*#__PURE__*/React.createElement(\"tbody\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 328,\n      columnNumber: 9\n    }\n  }, realInfo.map(info => {\n    return /*#__PURE__*/React.createElement(\"tr\", {\n      key: info.id,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 331,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 332,\n        columnNumber: 17\n      }\n    }, info.route), /*#__PURE__*/React.createElement(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 333,\n        columnNumber: 17\n      }\n    }, info.destination), /*#__PURE__*/React.createElement(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 334,\n        columnNumber: 17\n      }\n    }, info.arrivaltime, \" mins\"));\n  }))));\n}","map":{"version":3,"sources":["/Users/evanbyrnes/Pycharm-python-workspace/T13_SP/client/src/App.js"],"names":["React","useState","useLoadScript","GoogleMap","Marker","InfoWindow","MarkerClusterer","Container","Form","Table","Typeahead","styled","useSwr","Api","DateTimeSelector","BrandBar","Directions","data","googleMapApiKey","libraries","Wrapper","main","styles","require","mapOptions","disableDefaultUI","zoomControl","mapContainerStyle","height","dublinCenter","lat","lng","dublinBounds","north","south","west","east","icon","url","scaledSize","width","options","imagePath","rawData","results","myStops","map","stop","description","stopid","fullname","type","properties","id","routes","operators","geometry","pos","parseFloat","latitude","longitude","parsedStops","parsed","stopDescriptions","i","length","push","App","isLoaded","loadError","googleMapsApiKey","center","setCenter","zoom","setZoom","selectedPlace","setSelectedPlace","markerMap","setMarkerMap","infoOpen","setInfoOpen","markers","setMarkers","selected","setSelected","stopNumber","setStopNumber","mapRef","useRef","onMapLoad","useCallback","current","panTo","stopChoice","number","parseInt","markerLoadHandler","marker","prevState","markerClickHandler","event","place","float","latLngBounds","strictBounds","fitBounds","clusterer","join","paddingTop","Locate","navigator","geolocation","getCurrentPosition","position","Search","address","error","console","log","StopInfo","props","fetcher","args","fetch","then","response","json","rawStopData","arrivaldatetime","route","destination","duetime","stopData","realInfo","info","arrivaltime","maxHeight","overflowY"],"mappings":"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","sourcesContent":["// Importing outside developed components.\nimport React, { useState } from \"react\";\nimport {\n  useLoadScript,\n  GoogleMap,\n  Marker,\n  InfoWindow,\n  MarkerClusterer,\n} from \"@react-google-maps/api\";\nimport Container from \"react-bootstrap/Container\";\nimport Form from \"react-bootstrap/Form\";\nimport Table from \"react-bootstrap/Table\";\nimport { Typeahead } from \"react-bootstrap-typeahead\";\nimport styled from \"styled-components\";\nimport useSwr from \"swr\";\n// Importing self-developed components.\nimport Api from \"./components/Api\";\nimport DateTimeSelector from \"./components/DateTimeSelector\";\nimport BrandBar from \"./components/BrandBar\";\nimport Directions from \"./components/Directions\";\n// import Table from \"./components/Table\";\n// Importing outside developed css.\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"@reach/combobox/styles.css\";\n// Importing the Dublin Bus API stops data\nimport * as data from \"./data/DublinBusStops.json\";\n// Importing Google Maps Api Key.\nimport googleMapApiKey from \"./config\";\n// Defining libraries for Google Places\nconst libraries = [\"places\"];\n// Defined styling for separation of page displayed.\nconst Wrapper = styled.main`\n  width: 100%;\n  height: 100%;\n`;\n// Importing custom styles to customize the style of Google Map.\n// Important for including and excluding certain place markers etc.\nconst styles = require(\"./data/GoogleMapStyles.json\");\n// Defined custom styles and location for Google Map.\nconst mapOptions = {\n  styles: styles,\n  disableDefaultUI: true,\n  zoomControl: true,\n};\nconst mapContainerStyle = {\n  height: \"94vh\",\n};\n// consts: [53.349804, -6.260310] - Dublin\nconst dublinCenter = {\n  lat: 53.349804,\n  lng: -6.30131,\n};\nconst dublinBounds = {\n  north: 51.09,\n  south: 54.29,\n  west: -7.02,\n  east: -5.26,\n};\n\n// Icon used to represent a bus stop on the map.\nconst icon = {\n  url: \"/bus_icon.svg\",\n  scaledSize: { width: 18, height: 18 },\n};\n// Icons used when Markers are clustered.\nconst options = {\n  imagePath:\n    \"https://developers.google.com/maps/documentation/javascript/examples/markerclusterer/m\",\n};\n// Parsing the Stops data into various object shapes.\nconst rawData = data.results;\nconst myStops = rawData.map((stop) => ({\n  description: \"Stop \" + stop.stopid + \", \" + stop.fullname,\n  type: \"Feature\",\n  properties: {\n    id: stop.stopid,\n    fullname: stop.fullname,\n    routes: stop.operators[0].routes,\n  },\n  geometry: {\n    type: \"Point\",\n    pos: {\n      lat: parseFloat(stop.latitude),\n      lng: parseFloat(stop.longitude),\n    },\n  },\n}));\nconst parsedStops = myStops.map((parsed) => ({\n  id: parsed.properties.id,\n  description: parsed.description,\n  geometry: parsed.geometry.pos,\n}));\n// An array that contains only the names of all the stops.\nconst stopDescriptions = [];\nfor (var i = 0; i < parsedStops.length; i++) {\n  stopDescriptions.push(parsedStops[i].description);\n}\n// Main function to draw the Map/Page.\nexport default function App() {\n  const { isLoaded, loadError } = useLoadScript({\n    googleMapsApiKey: googleMapApiKey,\n    libraries,\n  });\n  const [center, setCenter] = useState(dublinCenter);\n  const [zoom, setZoom] = useState(11);\n  // The things we need to track in state:\n  const [selectedPlace, setSelectedPlace] = useState(null);\n  const [markerMap, setMarkerMap] = useState({});\n  const [infoOpen, setInfoOpen] = useState(false);\n  const [markers, setMarkers] = React.useState([]);\n  const [selected, setSelected] = React.useState(null);\n  const [stopNumber, setStopNumber] = React.useState(0);\n\n  const mapRef = React.useRef();\n  const onMapLoad = React.useCallback((map) => {\n    mapRef.current = map;\n  }, []);\n\n  const panTo = React.useCallback(({ lat, lng }) => {\n    mapRef.current.panTo({ lat, lng });\n    mapRef.current.setZoom(16);\n    setMarkers((current) => [...current, { lat: lat, lng: lng }]);\n  }, []);\n  // Changing stop realtime info based on user choice.\n  const stopChoice = React.useCallback((number) => {\n    setStopNumber(() => parseInt(number.id));\n  });\n\n  // We have to create a mapping of our places to actual Marker objects\n  const markerLoadHandler = (marker, stop) => {\n    return setMarkerMap((prevState) => {\n      return { ...prevState, [stop.properties.id]: marker };\n    });\n  };\n\n  const markerClickHandler = (event, place) => {\n    // Remember which stop was clicked\n    setSelectedPlace(place);\n    // Required so clicking a 2nd marker works as expected\n    if (infoOpen) {\n      setInfoOpen(false);\n    }\n    setInfoOpen(true);\n  };\n\n  if (loadError) return \"Error\";\n  if (!isLoaded) return \"Loading...\";\n\n  return (\n    <div>\n      <Container fluid>\n        <BrandBar></BrandBar>\n        <Wrapper style={{ width: \"75%\", float: \"left\" }}>\n          {/* Render the Google Map */}\n          <GoogleMap\n            mapContainerStyle={mapContainerStyle}\n            center={center}\n            zoom={zoom}\n            maxZoom={13}\n            options={mapOptions}\n            onLoad={onMapLoad}\n            restriction={{ latLngBounds: dublinBounds, strictBounds: false }}\n            ref={(mapRef) => mapRef && mapRef.fitBounds(dublinBounds)}\n          >\n            <Locate panTo={panTo} />\n\n            <MarkerClusterer\n              options={options}\n              maxZoom={16}\n              minimumClusterSize={4}\n            >\n              {(clusterer) =>\n                myStops.map((stop) => (\n                  <Marker\n                    icon={icon}\n                    key={stop.properties.id}\n                    position={stop.geometry.pos}\n                    clusterer={clusterer}\n                    onLoad={(marker) => markerLoadHandler(marker, stop)}\n                    onClick={(event) => markerClickHandler(event, stop)}\n                  />\n                ))\n              }\n            </MarkerClusterer>\n\n            {infoOpen && selectedPlace && (\n              <InfoWindow\n                anchor={markerMap[selectedPlace.properties.id]}\n                onCloseClick={() => setInfoOpen(false)}\n              >\n                <div>\n                  <h3>Stop Number: {selectedPlace.properties.id}</h3>\n                  <h5>Routes: {selectedPlace.properties.routes.join(\", \")}</h5>\n                </div>\n              </InfoWindow>\n            )}\n            {/* Markers dropped on selection box choice. */}\n            {markers.map((marker) => (\n              <Marker\n                key={`${marker.lat}-${marker.lng}`}\n                position={{ lat: marker.lat, lng: marker.lng }}\n                onClick={() => {\n                  setSelected(marker);\n                }}\n              />\n            ))}\n            <Directions></Directions>\n          </GoogleMap>\n        </Wrapper>\n\n        <Wrapper style={{ width: \"25%\", float: \"right\" }}>\n          <Container style={{ paddingTop: \"2vh\" }}>\n            <Form>\n              <Form.Group controlId=\"formDeparture\">\n                <Form.Label>Real Time Stop Information</Form.Label>\n                <Search panTo={panTo} stopChoice={stopChoice} />\n              </Form.Group>\n            </Form>\n\n            <StopInfo number={stopNumber} />\n\n            <div id=\"panel\"></div>\n          </Container>\n        </Wrapper>\n      </Container>\n    </div>\n  );\n}\n\n// Generate an icon which when clicked\n// will adjust the map to the users location.\nfunction Locate({ panTo }) {\n  return (\n    <button\n      className=\"locate\"\n      onClick={() => {\n        navigator.geolocation.getCurrentPosition(\n          // Hard coding Dublin for the time being.\n          (position) => {\n            panTo({\n              // lat: position.coords.latitude,\n              // lng: position.coords.longitude,\n              lat: dublinCenter.lat,\n              lng: dublinCenter.lng,\n            });\n          },\n          () => null\n        );\n      }}\n    >\n      <img alt=\"compass\" src=\"/compass.svg\" />\n    </button>\n  );\n}\n\n// Generate a searchbox that includes all of the\n// stops. Chosen stop will adjust the map to that\n// stops location and display its realtime info.\nfunction Search({ panTo, stopChoice }) {\n  return (\n    <div>\n      <Typeahead\n        id=\"basic-example\"\n        options={stopDescriptions}\n        maxVisible={2}\n        placeholder=\"Choose a stop...\"\n        onChange={(address) => {\n          try {\n            for (var i = 0; i < parsedStops.length; i++) {\n              if (address == parsedStops[i].description) {\n                const lat = parsedStops[i].geometry.lat;\n                const lng = parsedStops[i].geometry.lng;\n                const id = parsedStops[i].id;\n                panTo({ lat, lng });\n                stopChoice({ id });\n              }\n            }\n          } catch (error) {\n            console.log(\"error\");\n          }\n        }}\n      />\n    </div>\n  );\n}\n\n// Calls the realtime api and returns a table.\nfunction StopInfo(props) {\n  const fetcher = (...args) =>\n    fetch(...args).then((response) => response.json());\n  const url =\n    \"https://data.smartdublin.ie/cgi-bin/rtpi/realtimebusinformation?stopid=\" +\n    props.number +\n    \"&operator=bac\";\n  const { data, error } = useSwr(url, { fetcher });\n  const rawStopData =\n    data && !error\n      ? data\n      : // creating a placeholder object while awaiting api response\n        {\n          results: [\n            {\n              arrivaldatetime: \"08/07/2020 00:00:00\",\n              route: \"\",\n              destination: \"\",\n              duetime: \"\",\n            },\n          ],\n        };\n  const stopData = rawStopData.results;\n  const realInfo = stopData.map((info) => ({\n    id: info.arrivaldatetime,\n    route: info.route,\n    destination: info.destination,\n    arrivaltime: info.duetime,\n  }));\n\n  return (\n    <div style={{ maxHeight: \"15vh\", overflowY: \"scroll\" }}>\n      <Table striped bordered hover size=\"sm\">\n        <thead>\n          <tr>\n            <th>Route</th>\n            <th>Destination</th>\n            <th>Arrival</th>\n          </tr>\n        </thead>\n        <tbody>\n          {realInfo.map((info) => {\n            return (\n              <tr key={info.id}>\n                <td>{info.route}</td>\n                <td>{info.destination}</td>\n                <td>{info.arrivaltime} mins</td>\n              </tr>\n            );\n          })}\n        </tbody>\n      </Table>\n    </div>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}