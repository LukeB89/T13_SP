{"ast":null,"code":"var _jsxFileName = \"/Users/evanbyrnes/Pycharm-python-workspace/T13_SP/client/src/components/T13GoogleMap.js\";\nimport React, { Component } from \"react\";\nimport { //   useLoadScript,\nGoogleMap, Marker, InfoWindow, MarkerClusterer } from \"@react-google-maps/api\"; // import googleMapApiKey from \"./config\";\n\nclass T13GoogleMap extends Component {\n  render() {\n    return /*#__PURE__*/React.createElement(GoogleMap // Do stuff on map initial laod\n    , {\n      onLoad: loadHandler // Save the current center position in state\n      ,\n      onCenterChanged: () => setCenter(mapRef.getCenter().toJSON()) // Save the user's map click position\n      // onClick={e => setClickedLatLng(e.latLng.toJSON())}\n      ,\n      center: center,\n      zoom: zoom,\n      mapContainerStyle: {\n        height: \"94vh\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 15,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(MarkerClusterer, {\n      options: options,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 28,\n        columnNumber: 9\n      }\n    }, clusterer => myStops.map(stop => /*#__PURE__*/React.createElement(Marker, {\n      key: stop.properties.id,\n      position: stop.geometry.pos,\n      clusterer: clusterer,\n      onLoad: marker => markerLoadHandler(marker, stop),\n      onClick: event => markerClickHandler(event, stop),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 15\n      }\n    }))), infoOpen && selectedPlace && /*#__PURE__*/React.createElement(InfoWindow, {\n      anchor: markerMap[selectedPlace.properties.id],\n      onCloseClick: () => setInfoOpen(false),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"h3\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 15\n      }\n    }, \"STOPID: \", selectedPlace.properties.id), /*#__PURE__*/React.createElement(\"h5\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 15\n      }\n    }, \"ROUTES: \", selectedPlace.properties.routes.join(\", \")))));\n  }\n\n}\n\nexport default T13GoogleMap;","map":{"version":3,"sources":["/Users/evanbyrnes/Pycharm-python-workspace/T13_SP/client/src/components/T13GoogleMap.js"],"names":["React","Component","GoogleMap","Marker","InfoWindow","MarkerClusterer","T13GoogleMap","render","loadHandler","setCenter","mapRef","getCenter","toJSON","center","zoom","height","options","clusterer","myStops","map","stop","properties","id","geometry","pos","marker","markerLoadHandler","event","markerClickHandler","infoOpen","selectedPlace","markerMap","setInfoOpen","routes","join"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SACE;AACAC,SAFF,EAGEC,MAHF,EAIEC,UAJF,EAKEC,eALF,QAMO,wBANP,C,CAQA;;AAEA,MAAMC,YAAN,SAA2BL,SAA3B,CAAqC;AACnCM,EAAAA,MAAM,GAAG;AACP,wBACE,oBAAC,SAAD,CACE;AADF;AAEE,MAAA,MAAM,EAAEC,WAFV,CAGE;AAHF;AAIE,MAAA,eAAe,EAAE,MAAMC,SAAS,CAACC,MAAM,CAACC,SAAP,GAAmBC,MAAnB,EAAD,CAJlC,CAKE;AACA;AANF;AAOE,MAAA,MAAM,EAAEC,MAPV;AAQE,MAAA,IAAI,EAAEC,IARR;AASE,MAAA,iBAAiB,EAAE;AACjBC,QAAAA,MAAM,EAAE;AADS,OATrB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAaE,oBAAC,eAAD;AAAiB,MAAA,OAAO,EAAEC,OAA1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACIC,SAAD,IACCC,OAAO,CAACC,GAAR,CAAaC,IAAD,iBACV,oBAAC,MAAD;AACE,MAAA,GAAG,EAAEA,IAAI,CAACC,UAAL,CAAgBC,EADvB;AAEE,MAAA,QAAQ,EAAEF,IAAI,CAACG,QAAL,CAAcC,GAF1B;AAGE,MAAA,SAAS,EAAEP,SAHb;AAIE,MAAA,MAAM,EAAGQ,MAAD,IAAYC,iBAAiB,CAACD,MAAD,EAASL,IAAT,CAJvC;AAKE,MAAA,OAAO,EAAGO,KAAD,IAAWC,kBAAkB,CAACD,KAAD,EAAQP,IAAR,CALxC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,CAFJ,CAbF,EA2BGS,QAAQ,IAAIC,aAAZ,iBACC,oBAAC,UAAD;AACE,MAAA,MAAM,EAAEC,SAAS,CAACD,aAAa,CAACT,UAAd,CAAyBC,EAA1B,CADnB;AAEE,MAAA,YAAY,EAAE,MAAMU,WAAW,CAAC,KAAD,CAFjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAIE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAAaF,aAAa,CAACT,UAAd,CAAyBC,EAAtC,CADF,eAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAAaQ,aAAa,CAACT,UAAd,CAAyBY,MAAzB,CAAgCC,IAAhC,CAAqC,IAArC,CAAb,CAFF,CAJF,CA5BJ,CADF;AA0CD;;AA5CkC;;AA+CrC,eAAe5B,YAAf","sourcesContent":["import React, { Component } from \"react\";\nimport {\n  //   useLoadScript,\n  GoogleMap,\n  Marker,\n  InfoWindow,\n  MarkerClusterer,\n} from \"@react-google-maps/api\";\n\n// import googleMapApiKey from \"./config\";\n\nclass T13GoogleMap extends Component {\n  render() {\n    return (\n      <GoogleMap\n        // Do stuff on map initial laod\n        onLoad={loadHandler}\n        // Save the current center position in state\n        onCenterChanged={() => setCenter(mapRef.getCenter().toJSON())}\n        // Save the user's map click position\n        // onClick={e => setClickedLatLng(e.latLng.toJSON())}\n        center={center}\n        zoom={zoom}\n        mapContainerStyle={{\n          height: \"94vh\",\n        }}\n      >\n        <MarkerClusterer options={options}>\n          {(clusterer) =>\n            myStops.map((stop) => (\n              <Marker\n                key={stop.properties.id}\n                position={stop.geometry.pos}\n                clusterer={clusterer}\n                onLoad={(marker) => markerLoadHandler(marker, stop)}\n                onClick={(event) => markerClickHandler(event, stop)}\n              />\n            ))\n          }\n        </MarkerClusterer>\n\n        {infoOpen && selectedPlace && (\n          <InfoWindow\n            anchor={markerMap[selectedPlace.properties.id]}\n            onCloseClick={() => setInfoOpen(false)}\n          >\n            <div>\n              <h3>STOPID: {selectedPlace.properties.id}</h3>\n              <h5>ROUTES: {selectedPlace.properties.routes.join(\", \")}</h5>\n              {/* <div>This is your info window content</div> */}\n            </div>\n          </InfoWindow>\n        )}\n      </GoogleMap>\n    );\n  }\n}\n\nexport default T13GoogleMap;\n"]},"metadata":{},"sourceType":"module"}