{"ast":null,"code":"var _jsxFileName = \"/Users/evanbyrnes/Pycharm-python-workspace/T13_SP/client/src/index.js\";\n// import apikey from config file\nimport googleMapApiKey from './config';\nimport Api from './Api';\nimport React, { useState, Fragment } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport styled from 'styled-components';\nimport { useLoadScript, GoogleMap, Marker, InfoWindow, MarkerClusterer } from \"@react-google-maps/api\";\nimport DateTimeSelector from './components/DateTimeSelector';\nimport * as data from \"./data/db-stops.json\";\nconst options = {\n  imagePath: \"https://developers.google.com/maps/documentation/javascript/examples/markerclusterer/m\"\n};\nconst Wrapper = styled.main`\n  width: 100%;\n  height: 100%;\n`;\n\nfunction SinglePageApplication() {\n  // The things we need to track in state\n  const [mapRef, setMapRef] = useState(null);\n  const [selectedPlace, setSelectedPlace] = useState(null);\n  const [markerMap, setMarkerMap] = useState({}); // consts: [53.349804, -6.260310]\n\n  const [center, setCenter] = useState({\n    lat: 53.349804,\n    lng: -6.260310\n  }); // const [center, setCenter] = useState({ lat: 44.076613, lng: -98.362239833 });\n\n  const [zoom, setZoom] = useState(10); // const [clickedLatLng, setClickedLatLng] = useState(null);\n\n  const [infoOpen, setInfoOpen] = useState(false); // Load the Google maps scripts\n\n  const {\n    isLoaded\n  } = useLoadScript({\n    // Enter your own Google Maps API key\n    googleMapsApiKey: googleMapApiKey // googleMapsApiKey: \"AIzaSyDmDEDnZrcDTrRnaCt-fDtCM-xRnML5jyM\"\n    // AIzaSyDFfQele6SPurbIljoHv4tVF5USA_7y1-o\n\n  });\n  const uncleanData = data.results;\n  const myStops = uncleanData.map(stop => ({\n    type: \"Feature\",\n    properties: {\n      id: stop.stopid,\n      fullname: stop.fullname,\n      routes: stop.operators[0].routes\n    },\n    geometry: {\n      type: \"Point\",\n      pos: {\n        lat: parseFloat(stop.latitude),\n        lng: parseFloat(stop.longitude)\n      }\n    }\n  })); // Iterate myStops to size, center, and zoom map to contain all markers\n\n  const fitBounds = map => {\n    const bounds = new window.google.maps.LatLngBounds();\n    myStops.map(stop => {\n      bounds.extend(stop.geometry.pos);\n      return stop.properties.id;\n    });\n    map.fitBounds(bounds);\n  };\n\n  const loadHandler = map => {\n    // Store a reference to the google map instance in state\n    setMapRef(map); // Fit map bounds to contain all markers\n\n    fitBounds(map);\n  }; // We have to create a mapping of our places to actual Marker objects\n\n\n  const markerLoadHandler = (marker, stop) => {\n    return setMarkerMap(prevState => {\n      // console.log(stop.properties.id);\n      return { ...prevState,\n        [stop.properties.id]: marker\n      };\n    });\n  };\n\n  const markerClickHandler = (event, place) => {\n    // Remember which stop was clicked\n    setSelectedPlace(place); // Required so clicking a 2nd marker works as expected\n\n    if (infoOpen) {\n      setInfoOpen(false);\n    }\n\n    setInfoOpen(true); // If you want to zoom in a little on marker click\n\n    if (zoom < 11) {\n      setZoom(11);\n    } // if you want to center the selected Marker\n    //setCenter(place.pos)\n\n  };\n\n  const renderPage = () => {\n    return /*#__PURE__*/React.createElement(Fragment, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(Wrapper, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(Wrapper, {\n      style: {\n        width: \"75%\",\n        float: \"left\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(GoogleMap // Do stuff on map initial laod\n    , {\n      onLoad: loadHandler // Save the current center position in state\n      ,\n      onCenterChanged: () => setCenter(mapRef.getCenter().toJSON()) // Save the user's map click position\n      // onClick={e => setClickedLatLng(e.latLng.toJSON())}\n      ,\n      center: center,\n      zoom: zoom,\n      mapContainerStyle: {\n        height: \"99vh\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(MarkerClusterer, {\n      options: options,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 15\n      }\n    }, clusterer => myStops.map(stop => /*#__PURE__*/React.createElement(Marker, {\n      key: stop.properties.id,\n      position: stop.geometry.pos,\n      clusterer: clusterer,\n      onLoad: marker => markerLoadHandler(marker, stop),\n      onClick: event => markerClickHandler(event, stop),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 21\n      }\n    }))), infoOpen && selectedPlace && /*#__PURE__*/React.createElement(InfoWindow, {\n      anchor: markerMap[selectedPlace.properties.id],\n      onCloseClick: () => setInfoOpen(false),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 141,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 145,\n        columnNumber: 19\n      }\n    }, /*#__PURE__*/React.createElement(\"h3\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 146,\n        columnNumber: 21\n      }\n    }, \"STOPID: \", selectedPlace.properties.id), /*#__PURE__*/React.createElement(\"h5\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 147,\n        columnNumber: 21\n      }\n    }, \"ROUTES: \", selectedPlace.properties.routes.join(', ')))))), /*#__PURE__*/React.createElement(Wrapper, {\n      style: {\n        width: \"25%\",\n        float: \"right\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 156,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(DateTimeSelector, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 158,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(Api, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 160,\n        columnNumber: 13\n      }\n    }))));\n  };\n\n  return isLoaded ? renderPage() : null;\n}\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render( /*#__PURE__*/React.createElement(SinglePageApplication, {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 173,\n    columnNumber: 17\n  }\n}), rootElement);","map":{"version":3,"sources":["/Users/evanbyrnes/Pycharm-python-workspace/T13_SP/client/src/index.js"],"names":["googleMapApiKey","Api","React","useState","Fragment","ReactDOM","styled","useLoadScript","GoogleMap","Marker","InfoWindow","MarkerClusterer","DateTimeSelector","data","options","imagePath","Wrapper","main","SinglePageApplication","mapRef","setMapRef","selectedPlace","setSelectedPlace","markerMap","setMarkerMap","center","setCenter","lat","lng","zoom","setZoom","infoOpen","setInfoOpen","isLoaded","googleMapsApiKey","uncleanData","results","myStops","map","stop","type","properties","id","stopid","fullname","routes","operators","geometry","pos","parseFloat","latitude","longitude","fitBounds","bounds","window","google","maps","LatLngBounds","extend","loadHandler","markerLoadHandler","marker","prevState","markerClickHandler","event","place","renderPage","width","float","getCenter","toJSON","height","clusterer","join","rootElement","document","getElementById","render"],"mappings":"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","sourcesContent":["// import apikey from config file\nimport googleMapApiKey from './config';\nimport Api from './Api';\n\nimport React, { useState, Fragment } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport styled from 'styled-components';\n\nimport {\n  useLoadScript,\n  GoogleMap,\n  Marker,\n  InfoWindow,\n  MarkerClusterer\n} from \"@react-google-maps/api\";\n\nimport DateTimeSelector from './components/DateTimeSelector';\n\nimport * as data from \"./data/db-stops.json\";\n\nconst options = {\n  imagePath: \"https://developers.google.com/maps/documentation/javascript/examples/markerclusterer/m\"\n};\n\nconst Wrapper = styled.main`\n  width: 100%;\n  height: 100%;\n`;\n\nfunction SinglePageApplication() {\n  // The things we need to track in state\n  const [mapRef, setMapRef] = useState(null);\n  const [selectedPlace, setSelectedPlace] = useState(null);\n  const [markerMap, setMarkerMap] = useState({});\n  // consts: [53.349804, -6.260310]\n  const [center, setCenter] = useState({ lat: 53.349804, lng: -6.260310 });\n  // const [center, setCenter] = useState({ lat: 44.076613, lng: -98.362239833 });\n  const [zoom, setZoom] = useState(10);\n  // const [clickedLatLng, setClickedLatLng] = useState(null);\n  const [infoOpen, setInfoOpen] = useState(false);\n\n  // Load the Google maps scripts\n  const { isLoaded } = useLoadScript({\n    // Enter your own Google Maps API key\n    googleMapsApiKey: googleMapApiKey\n    // googleMapsApiKey: \"AIzaSyDmDEDnZrcDTrRnaCt-fDtCM-xRnML5jyM\"\n    // AIzaSyDFfQele6SPurbIljoHv4tVF5USA_7y1-o\n  });\n\n  const uncleanData = data.results;\n  const myStops = uncleanData.map(stop => ({\n    type: \"Feature\",\n    properties: { id: stop.stopid, fullname: stop.fullname, routes: stop.operators[0].routes },\n    geometry: {\n      type: \"Point\",\n      pos: {\n        lat: parseFloat(stop.latitude),\n        lng: parseFloat(stop.longitude)  \n      }\n    }\n  }));\n\n  // Iterate myStops to size, center, and zoom map to contain all markers\n  const fitBounds = map => {\n    const bounds = new window.google.maps.LatLngBounds();\n    myStops.map(stop => {\n      bounds.extend(stop.geometry.pos);\n      return stop.properties.id;\n    });\n    map.fitBounds(bounds);\n  };\n\n  const loadHandler = map => {\n    // Store a reference to the google map instance in state\n    setMapRef(map);\n    // Fit map bounds to contain all markers\n    fitBounds(map);\n  };\n\n  // We have to create a mapping of our places to actual Marker objects\n  const markerLoadHandler = (marker, stop) => {\n    return setMarkerMap(prevState => {\n      // console.log(stop.properties.id);\n      return { ...prevState, [stop.properties.id]: marker };\n    });\n  };\n\n  const markerClickHandler = (event, place) => {\n    // Remember which stop was clicked\n    setSelectedPlace(place);\n\n    // Required so clicking a 2nd marker works as expected\n    if (infoOpen) {\n      setInfoOpen(false);\n    }\n\n    setInfoOpen(true);\n\n    // If you want to zoom in a little on marker click\n    if (zoom < 11) {\n      setZoom(11);\n    }\n\n    // if you want to center the selected Marker\n    //setCenter(place.pos)\n  };\n\n  const renderPage = () => {\n    return (\n      <Fragment>\n        <Wrapper>\n          <Wrapper style={{ width: \"75%\", float: \"left\"}}>\n            <GoogleMap\n              // Do stuff on map initial laod\n              onLoad={loadHandler}\n              // Save the current center position in state\n              onCenterChanged={() => setCenter(mapRef.getCenter().toJSON())}\n              // Save the user's map click position\n              // onClick={e => setClickedLatLng(e.latLng.toJSON())}\n              center={center}\n              zoom={zoom}\n              mapContainerStyle={{\n                height: \"99vh\"\n              }}\n            >\n              <MarkerClusterer options={options}>\n                {clusterer =>\n                  myStops.map(stop => (\n                    <Marker \n                      key={stop.properties.id} \n                      position={stop.geometry.pos} \n                      clusterer={clusterer} \n                      onLoad={marker => markerLoadHandler(marker, stop)}\n                      onClick={event => markerClickHandler(event, stop)}\n                      />\n                  ))\n                }\n              </MarkerClusterer>\n\n              {infoOpen && selectedPlace && (\n                <InfoWindow\n                  anchor={markerMap[selectedPlace.properties.id]}\n                  onCloseClick={() => setInfoOpen(false)}\n                >\n                  <div>\n                    <h3>STOPID: {selectedPlace.properties.id}</h3>\n                    <h5>ROUTES: {selectedPlace.properties.routes.join(', ')}</h5>\n                    {/* <div>This is your info window content</div> */}\n                  </div>\n                </InfoWindow>\n              )}\n\n            </GoogleMap>\n          </Wrapper>\n          \n          <Wrapper style= {{ width: \"25%\", float: \"right\" }}>\n\n            <DateTimeSelector></DateTimeSelector>\n            {/* Rendering the database information from here. */}\n            <Api />\n\n          </Wrapper>\n\n        </Wrapper>\n      </Fragment>\n    );\n  };\n\n  return isLoaded ? renderPage() : null;\n}\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(<SinglePageApplication />, rootElement);\n"]},"metadata":{},"sourceType":"module"}