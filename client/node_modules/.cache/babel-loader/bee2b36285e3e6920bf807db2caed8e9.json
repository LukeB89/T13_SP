{"ast":null,"code":"var _jsxFileName = \"/Users/evanbyrnes/Pycharm-python-workspace/T13_SP/client/src/components/T13GoogleMap.js\";\nimport React, { useState } from \"react\";\nimport { useLoadScript, GoogleMap, Marker, InfoWindow, MarkerClusterer } from \"@react-google-maps/api\";\nimport useSwr from \"swr\";\nimport googleMapApiKey from \".././config\";\nimport * as datal from \".././data/db-stops.json\"; // Import custom styles to customize the style of Google Map\n\nconst styles = require(\"../data/GoogleMapStyles.json\");\n\nconst options = {\n  imagePath: \"https://developers.google.com/maps/documentation/javascript/examples/markerclusterer/m\"\n};\n\nconst fetcher = (...args) => fetch(...args).then(response => response.json());\n\nexport default function T13GoogleMap() {\n  // The things we need to track in state\n  const [mapRef, setMapRef] = useState(null);\n  const [selectedPlace, setSelectedPlace] = useState(null);\n  const [markerMap, setMarkerMap] = useState({}); // consts: [53.349804, -6.260310] - Dublin\n\n  const [center, setCenter] = useState({\n    lat: 53.349804,\n    lng: -6.26031\n  });\n  const [zoom, setZoom] = useState(11);\n  const [infoOpen, setInfoOpen] = useState(false); // Load the Google maps scripts\n\n  const {\n    isLoaded\n  } = useLoadScript({\n    // Enter your own Google Maps API key in config.js\n    googleMapsApiKey: googleMapApiKey\n  });\n  const url = \"https://data.smartdublin.ie/cgi-bin/rtpi/busstopinformation?operator=bac\";\n  const {\n    data,\n    error\n  } = useSwr(url, {\n    fetcher\n  });\n  const stopData = data && !error ? data : [];\n  console.log(\"Stop data here\", stopData);\n  const loourl = \"https://data.police.uk/api/crimes-street/all-crime?lat=52.629729&lng=-1.131592&date=2019-10\";\n  const {\n    datas,\n    errors\n  } = useSwr(loourl, {\n    fetcher\n  });\n  const crimes = datas && !errors ? datas : [];\n  console.log(\"Crime data here\", crimes);\n  const points = crimes.map(crime => ({\n    type: \"Feature\",\n    properties: {\n      cluster: false,\n      crimeId: crime.id,\n      category: crime.category\n    },\n    geometry: {\n      type: \"Point\",\n      coordinates: [parseFloat(crime.location.longitude), parseFloat(crime.location.latitude)]\n    }\n  }));\n  console.log(points); // console.log(points);\n\n  const uncleanData = datal.results; // A GeoJSON Feature object, with the geometry/pos of each object being a GeoJSON Point\n  // ref: https://tools.ietf.org/html/rfc7946#section-3.2\n\n  const myStops = uncleanData.map(stop => ({\n    type: \"Feature\",\n    properties: {\n      id: stop.stopid,\n      fullname: stop.fullname,\n      routes: stop.operators[0].routes\n    },\n    geometry: {\n      type: \"Point\",\n      pos: {\n        lat: parseFloat(stop.latitude),\n        lng: parseFloat(stop.longitude)\n      }\n    }\n  })); // console.log(\"cunt here again\", yourACunt[0]);\n  // Iterate myStops to size, center, and zoom map to contain all markers\n\n  const fitBounds = map => {\n    const bounds = new window.google.maps.LatLngBounds();\n    myStops.map(stop => {\n      bounds.extend(stop.geometry.pos);\n      return stop.properties.id;\n    });\n    map.fitBounds(bounds);\n  };\n\n  const loadHandler = map => {\n    // Store a reference to the google map instance in state\n    setMapRef(map); // Fit map bounds to contain all markers\n\n    fitBounds(map);\n  }; // We have to create a mapping of our places to actual Marker objects\n\n\n  const markerLoadHandler = (marker, stop) => {\n    return setMarkerMap(prevState => {\n      return { ...prevState,\n        [stop.properties.id]: marker\n      };\n    });\n  };\n\n  const markerClickHandler = (event, place) => {\n    // Remember which stop was clicked\n    setSelectedPlace(place); // Required so clicking a 2nd marker works as expected\n\n    if (infoOpen) {\n      setInfoOpen(false);\n    }\n\n    setInfoOpen(true); // If you want to zoom in a little on marker click\n\n    if (zoom < 11) {\n      setZoom(11);\n    } // if you want to center the selected Marker\n    //setCenter(place.pos)\n\n  };\n\n  const renderPage = () => {\n    return /*#__PURE__*/React.createElement(GoogleMap, {\n      onLoad: loadHandler,\n      onCenterChanged: () => setCenter(mapRef.getCenter().toJSON()),\n      center: center,\n      zoom: zoom,\n      options: {\n        styles: styles\n      },\n      mapContainerStyle: {\n        height: \"94vh\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 133,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(MarkerClusterer, {\n      options: options,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 143,\n        columnNumber: 9\n      }\n    }, clusterer => myStops.map(stop => /*#__PURE__*/React.createElement(Marker, {\n      key: stop.properties.id,\n      position: stop.geometry.pos,\n      clusterer: clusterer,\n      onLoad: marker => markerLoadHandler(marker, stop),\n      onClick: event => markerClickHandler(event, stop),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 146,\n        columnNumber: 15\n      }\n    }))), infoOpen && selectedPlace && /*#__PURE__*/React.createElement(InfoWindow, {\n      anchor: markerMap[selectedPlace.properties.id],\n      onCloseClick: () => setInfoOpen(false),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 158,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 162,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"h3\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 163,\n        columnNumber: 15\n      }\n    }, \"STOPID: \", selectedPlace.properties.id), /*#__PURE__*/React.createElement(\"h5\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 164,\n        columnNumber: 15\n      }\n    }, \"ROUTES: \", selectedPlace.properties.routes.join(\", \")))));\n  };\n\n  return isLoaded ? renderPage() : null;\n}","map":{"version":3,"sources":["/Users/evanbyrnes/Pycharm-python-workspace/T13_SP/client/src/components/T13GoogleMap.js"],"names":["React","useState","useLoadScript","GoogleMap","Marker","InfoWindow","MarkerClusterer","useSwr","googleMapApiKey","datal","styles","require","options","imagePath","fetcher","args","fetch","then","response","json","T13GoogleMap","mapRef","setMapRef","selectedPlace","setSelectedPlace","markerMap","setMarkerMap","center","setCenter","lat","lng","zoom","setZoom","infoOpen","setInfoOpen","isLoaded","googleMapsApiKey","url","data","error","stopData","console","log","loourl","datas","errors","crimes","points","map","crime","type","properties","cluster","crimeId","id","category","geometry","coordinates","parseFloat","location","longitude","latitude","uncleanData","results","myStops","stop","stopid","fullname","routes","operators","pos","fitBounds","bounds","window","google","maps","LatLngBounds","extend","loadHandler","markerLoadHandler","marker","prevState","markerClickHandler","event","place","renderPage","getCenter","toJSON","height","clusterer","join"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport {\n  useLoadScript,\n  GoogleMap,\n  Marker,\n  InfoWindow,\n  MarkerClusterer,\n} from \"@react-google-maps/api\";\nimport useSwr from \"swr\";\n\nimport googleMapApiKey from \".././config\";\nimport * as datal from \".././data/db-stops.json\";\n\n// Import custom styles to customize the style of Google Map\nconst styles = require(\"../data/GoogleMapStyles.json\");\n\nconst options = {\n  imagePath:\n    \"https://developers.google.com/maps/documentation/javascript/examples/markerclusterer/m\",\n};\n\nconst fetcher = (...args) => fetch(...args).then((response) => response.json());\n\nexport default function T13GoogleMap() {\n  // The things we need to track in state\n  const [mapRef, setMapRef] = useState(null);\n  const [selectedPlace, setSelectedPlace] = useState(null);\n  const [markerMap, setMarkerMap] = useState({});\n  // consts: [53.349804, -6.260310] - Dublin\n  const [center, setCenter] = useState({ lat: 53.349804, lng: -6.26031 });\n  const [zoom, setZoom] = useState(11);\n  const [infoOpen, setInfoOpen] = useState(false);\n\n  // Load the Google maps scripts\n  const { isLoaded } = useLoadScript({\n    // Enter your own Google Maps API key in config.js\n    googleMapsApiKey: googleMapApiKey,\n  });\n\n  const url =\n    \"https://data.smartdublin.ie/cgi-bin/rtpi/busstopinformation?operator=bac\";\n  const { data, error } = useSwr(url, { fetcher });\n  const stopData = data && !error ? data : [];\n  console.log(\"Stop data here\", stopData);\n\n  const loourl =\n    \"https://data.police.uk/api/crimes-street/all-crime?lat=52.629729&lng=-1.131592&date=2019-10\";\n  const { datas, errors } = useSwr(loourl, { fetcher });\n  const crimes = datas && !errors ? datas : [];\n  console.log(\"Crime data here\", crimes);\n  const points = crimes.map((crime) => ({\n    type: \"Feature\",\n    properties: { cluster: false, crimeId: crime.id, category: crime.category },\n    geometry: {\n      type: \"Point\",\n      coordinates: [\n        parseFloat(crime.location.longitude),\n        parseFloat(crime.location.latitude),\n      ],\n    },\n  }));\n  console.log(points);\n\n  // console.log(points);\n\n  const uncleanData = datal.results;\n  // A GeoJSON Feature object, with the geometry/pos of each object being a GeoJSON Point\n  // ref: https://tools.ietf.org/html/rfc7946#section-3.2\n  const myStops = uncleanData.map((stop) => ({\n    type: \"Feature\",\n    properties: {\n      id: stop.stopid,\n      fullname: stop.fullname,\n      routes: stop.operators[0].routes,\n    },\n    geometry: {\n      type: \"Point\",\n      pos: {\n        lat: parseFloat(stop.latitude),\n        lng: parseFloat(stop.longitude),\n      },\n    },\n  }));\n\n  // console.log(\"cunt here again\", yourACunt[0]);\n\n  // Iterate myStops to size, center, and zoom map to contain all markers\n  const fitBounds = (map) => {\n    const bounds = new window.google.maps.LatLngBounds();\n    myStops.map((stop) => {\n      bounds.extend(stop.geometry.pos);\n      return stop.properties.id;\n    });\n    map.fitBounds(bounds);\n  };\n\n  const loadHandler = (map) => {\n    // Store a reference to the google map instance in state\n    setMapRef(map);\n    // Fit map bounds to contain all markers\n    fitBounds(map);\n  };\n\n  // We have to create a mapping of our places to actual Marker objects\n  const markerLoadHandler = (marker, stop) => {\n    return setMarkerMap((prevState) => {\n      return { ...prevState, [stop.properties.id]: marker };\n    });\n  };\n\n  const markerClickHandler = (event, place) => {\n    // Remember which stop was clicked\n    setSelectedPlace(place);\n\n    // Required so clicking a 2nd marker works as expected\n    if (infoOpen) {\n      setInfoOpen(false);\n    }\n\n    setInfoOpen(true);\n\n    // If you want to zoom in a little on marker click\n    if (zoom < 11) {\n      setZoom(11);\n    }\n\n    // if you want to center the selected Marker\n    //setCenter(place.pos)\n  };\n\n  const renderPage = () => {\n    return (\n      <GoogleMap\n        onLoad={loadHandler}\n        onCenterChanged={() => setCenter(mapRef.getCenter().toJSON())}\n        center={center}\n        zoom={zoom}\n        options={{ styles: styles }}\n        mapContainerStyle={{\n          height: \"94vh\",\n        }}\n      >\n        <MarkerClusterer options={options}>\n          {(clusterer) =>\n            myStops.map((stop) => (\n              <Marker\n                key={stop.properties.id}\n                position={stop.geometry.pos}\n                clusterer={clusterer}\n                onLoad={(marker) => markerLoadHandler(marker, stop)}\n                onClick={(event) => markerClickHandler(event, stop)}\n              />\n            ))\n          }\n        </MarkerClusterer>\n\n        {infoOpen && selectedPlace && (\n          <InfoWindow\n            anchor={markerMap[selectedPlace.properties.id]}\n            onCloseClick={() => setInfoOpen(false)}\n          >\n            <div>\n              <h3>STOPID: {selectedPlace.properties.id}</h3>\n              <h5>ROUTES: {selectedPlace.properties.routes.join(\", \")}</h5>\n            </div>\n          </InfoWindow>\n        )}\n      </GoogleMap>\n    );\n  };\n  return isLoaded ? renderPage() : null;\n}\n"]},"metadata":{},"sourceType":"module"}