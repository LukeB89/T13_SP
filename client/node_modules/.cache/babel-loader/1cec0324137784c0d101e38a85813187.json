{"ast":null,"code":"var _jsxFileName = \"/Users/evanbyrnes/Pycharm-python-workspace/T13_SP/client/src/App.js\";\n// Importing outside developed components.\nimport React, { useState } from \"react\";\nimport { useLoadScript, GoogleMap, Marker, InfoWindow, MarkerClusterer, DirectionsRenderer, DirectionsService } from \"@react-google-maps/api\";\nimport Row from \"react-bootstrap/Row\";\nimport Col from \"react-bootstrap/Col\";\nimport Container from \"react-bootstrap/Container\"; // Importing self-developed components.\n\nimport CustomNavBar from \"./components/CustomNavBar\";\nimport FilterRoute from \"./components/FilterRoute\";\nimport StopSearch from \"./components/StopSearch\";\nimport Locate from \"./components/Locate\";\nimport PredictionInput from \"./components/PredictionInput\";\nimport RtpiApi from \"./components/RtpiApi\"; // Importing outside developed css.\n\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"@reach/combobox/styles.css\"; // Importing Google Maps Api Key.\n\nimport googleMapApiKey from \"./config\"; // Defining libraries for Google Places\n\nconst libraries = [\"places\"]; // Importing the Dublin Bus API stops data\n\nconst data = require(\"./data/DublinBusStops.json\"); // // consts: [53.349804, -6.260310] - Dublin\n\n\nconst dublinCenter = require(\"./data/DublinCenter.json\"); // Importing custom styles to customize the style of Google Map...\n// important for including and excluding certain place markers etc.\n\n\nconst styles = require(\"./data/GoogleMapStyles.json\"); // Defined custom styles and location for Google Map.\n\n\nconst mapOptions = {\n  styles: styles,\n  disableDefaultUI: true,\n  zoomControl: true,\n  maxZoom: 17,\n  minZoom: 1\n};\nconst mapContainerStyle = {\n  height: \"93vh\"\n}; // Icon used to represent a bus stop on the map.\n\nconst icon = {\n  url: \"/bus_icon.svg\",\n  scaledSize: {\n    width: 18,\n    height: 18\n  }\n}; // Icons used when Markers are clustered.\n\nconst options = {\n  imagePath: \"https://developers.google.com/maps/documentation/javascript/examples/markerclusterer/m\"\n}; // Parsing the Stops data into various object shapes.\n\nconst rawData = data.results;\nconst myStops = rawData.map(stop => ({\n  description: \"Stop \" + stop.stopid + \", \" + stop.fullname,\n  type: \"Feature\",\n  properties: {\n    id: stop.stopid,\n    fullname: stop.fullname,\n    routes: stop.operators[0].routes\n  },\n  geometry: {\n    type: \"Point\",\n    pos: {\n      lat: parseFloat(stop.latitude),\n      lng: parseFloat(stop.longitude)\n    }\n  }\n}));\nconst parsedStops = myStops.map(parsed => ({\n  id: parsed.properties.id,\n  description: parsed.description,\n  geometry: parsed.geometry.pos\n}));\nconst stopDescriptions = [];\n\nfor (var i = 0; i < parsedStops.length; i++) {\n  stopDescriptions.push(parsedStops[i].description);\n}\n\nconst routesArray = [];\nconst duplicateRoutes = [];\n\nfor (var j = 0; j < myStops.length; j++) {\n  routesArray.push(myStops[j].properties.routes);\n}\n\nfor (var k = 0; k < routesArray.length; k++) {\n  for (var l = 0; l < routesArray[k].length; l++) {\n    duplicateRoutes.push(routesArray[k][l]);\n  }\n}\n\nconst allRoutes = duplicateRoutes.filter((a, b) => duplicateRoutes.indexOf(a) === b); // Main function for the SPA, generating the Map/Page.\n\nexport default function App() {\n  const {\n    isLoaded,\n    loadError\n  } = useLoadScript({\n    googleMapsApiKey: googleMapApiKey,\n    libraries\n  });\n  const center = dublinCenter; // eslint-disable-next-line\n\n  const [zoom, setZoom] = useState(11); // removing unwanted warning.\n  // The general things we need to track in state:\n\n  const [selectedPlace, setSelectedPlace] = useState(null);\n  const [markerMap, setMarkerMap] = useState({});\n  const [infoOpen, setInfoOpen] = useState(false);\n  const [markers, setMarkers] = useState([]); // eslint-disable-next-line\n\n  const [selected, setSelected] = useState(null); // removing unwanted warning.\n  // Consider removing this variable stopNumber, see if it can be merged with either originNumber or destinationNumber.\n  // eslint-disable-next-line\n\n  const [stopNumber, setStopNumber] = useState(0); // removing unwanted warning.\n  // These are being used to track selected stop numbers\n\n  const [originNumber, setOriginNumber] = useState(0);\n  const [destinationNumber, setDestinationNumber] = useState(0); // This is used to track the string value of selected routes.\n\n  const [routeString, setRouteString] = useState(\"\"); // The things for Directions (Service and Renderer) we need to track in state.\n\n  const [response, setResponse] = useState(null);\n  const [origin, setOrigin] = useState(\"\");\n  const [destination, setDestination] = useState(\"\"); // This is being used to track in state which set of markers is displayed. (Clusters or Route Markers)\n\n  const [markerSelection, setMarkerSelection] = useState(\"True\"); // The things for selected time (Hour, Day, Month) we need to track in state.\n\n  const [selectedTime, setSelectedTime] = useState(new Date()); // Setting the time, day and month values as the current time.\n  // This allows for user to make prediction for journey that occurs at\n  // this time without having to select the time.\n\n  const initialTime = selectedTime.toTimeString().substring(0, 2);\n  const [initialDay, initialMonth] = selectedTime.toDateString().split(\" \"); // An array containing time data for model input.\n\n  const [timeDayMonth, setTimeDayMonth] = useState([initialTime, initialDay, initialMonth]); // Track state of user selected routes and directions.\n\n  const [routeSelect, setRouteSelect] = React.useState(\"\");\n  const [directionSelect, setDirectionSelect] = React.useState(undefined); // Track state of filtered bus stops.\n\n  const [filteredStops, setFilteredStops] = React.useState([]);\n  const [filteredStopsLatLng, setFilteredStopsLatLng] = React.useState([]);\n  console.log(\"filteredStops triggered\", filteredStops);\n  const mapRef = React.useRef();\n  const onMapLoad = React.useCallback(map => {\n    mapRef.current = map;\n  }, []); // const onMapLoad = React.useCallback(function callback(map) {\n  //   const bounds = new window.google.maps.LatLngBounds();\n  //   map.fitBounds(bounds);\n  //   setMap(map);\n  // }, []);\n  // Orient the map to selected location.\n\n  const panTo = React.useCallback(({\n    lat,\n    lng\n  }) => {\n    mapRef.current.panTo({\n      lat,\n      lng\n    });\n    mapRef.current.setZoom(16); // Resetting the drawn route anytime this functions is called.\n\n    setDestination(\"\"); // Allowing only one marker on the map at a time.\n\n    setMarkers(current => []);\n    setMarkers(current => [...current, {\n      lat: lat,\n      lng: lng\n    }]);\n  }, []); // Orient the map to the selected route.\n  // Will need to have passed in to it an array of stop locations.\n\n  const panTwo = React.useCallback(geometry => {\n    console.log(geometry, \"here is geometry in panTwo in App.js\");\n    const bounds = new window.google.maps.LatLngBounds(); // create an empty new bounds object\n\n    bounds.extend(geometry); // bounds.extend({\n    //   lat: 53.349804,\n    //   lng: -6.30131,\n    // });\n\n    mapRef.current.fitBounds(bounds); // mapRef.current.panTwo({ lat, lng });\n\n    mapRef.current.setZoom(12); // Resetting the drawn route anytime this functions is called.\n\n    setDestination(\"\"); // // Trying to reset the Model API.\n    // setOriginNumber(0);\n    // setDestinationNumber(0);\n    // setRouteSelect(undefined);\n    // setDirectionSelect(NaN);\n  }, []); // We have to create a mapping of our places to actual Marker objects\n\n  const markerLoadHandler = (marker, stop) => {\n    return setMarkerMap(prevState => {\n      return { ...prevState,\n        [stop.properties.id]: marker\n      };\n    });\n  };\n\n  const markerClickHandler = (event, place) => {\n    // Remember which stop was clicked\n    setSelectedPlace(place); // Required so clicking a 2nd marker works as expected\n\n    if (infoOpen) {\n      setInfoOpen(false);\n    }\n\n    setInfoOpen(true);\n  }; // Changing stop realtime info based on user choice.\n\n\n  const stopChoice = number => {\n    setStopNumber(() => parseInt(number.id));\n  }; // Changing origin info based on user choice.\n\n\n  const originChoice = address => {\n    // console.log(\"originChoice triggered\", address);\n    setOrigin(() => address); // setOrigin(() => address.results[0].formatted_address);\n  }; // Changing destination info based on user choice.\n\n\n  const destinationChoice = address => {\n    // console.log(\"destinationChoice triggered\", address);\n    setDestination(() => address); // setDestination(() => address.results[0].formatted_address);\n  }; // Changing stops of route displayed on based on user choice.\n\n\n  const routeChoice = route => {\n    setRouteString(() => route.routeString);\n  }; // For generating a directions route on the map.\n\n\n  const directionsCallback = response => {\n    if (response !== null) {\n      if (response.status === \"OK\") {\n        console.log(\"routeSelect in directionsCallback\", routeSelect.toLowerCase()); // This is the array you want associated with\n        // the response instead of the one that google assigns.\n\n        const selectedRouteArray = [];\n\n        for (var i = 0; i < response.routes.length; i++) {\n          for (var j = 0; j < response.routes[i].legs.length; j++) {\n            for (var k = 0; k < response.routes[i].legs[j].steps.length; k++) {\n              if ( // making sure that WALKING is excluded since it will not contain bus name information\n              response.routes[i].legs[j].steps[k].travel_mode == \"TRANSIT\" && // locating the first occurence of the users selected route\n              String(response.routes[i].legs[j].steps[k].transit.line.short_name) === routeSelect.toLowerCase()) {\n                selectedRouteArray.push(response.routes[i]);\n              }\n            }\n          }\n        } // setting the routes array to be the one containing our desired bus route.\n\n\n        response.routes = selectedRouteArray;\n        setResponse(() => ({\n          response\n        }));\n      } else {}\n    }\n  }; //  For which set of markers to display (Clusters or Route Markers).\n\n\n  const markerSelectionChoice = () => {\n    setMarkerSelection(() => \"False\");\n  }; // For setting the selected origin stop number in state.\n\n\n  const originNumberChoice = number => {\n    console.log(\"originNumberChoice\", number);\n    setOriginNumber(() => parseInt(number.id));\n  }; // For setting the selected destination stop number in state.\n\n\n  const destinationNumberChoice = number => {\n    console.log(\"destinationNumberChoice\", number);\n    setDestinationNumber(() => parseInt(number.id));\n  }; // For setting the time in state.\n\n\n  const timeChoice = selectedTime => {\n    const time = selectedTime.toTimeString().substring(0, 2);\n    const [day, month] = selectedTime.toDateString().split(\" \");\n    setSelectedTime(selectedTime);\n    setTimeDayMonth([time, day, month]);\n  }; // console.log(\"These are the time values: date-day-month\", timeDayMonth);\n\n\n  const filteredStopsChoice = filteredMarkers => {\n    setFilteredStops(() => filteredMarkers);\n  };\n\n  const filteredStopsLatLngChoice = filteredMarkers => {\n    setFilteredStopsLatLng(() => filteredMarkers);\n  };\n\n  if (loadError) return \"Error\";\n  if (!isLoaded) return \"Loading...\";\n  return /*#__PURE__*/React.createElement(Container, {\n    fluid: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 309,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Row, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 310,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Col, {\n    sm: 12,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 311,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(CustomNavBar // Passing in props - Custom built components.\n  , {\n    FilterRoute: FilterRoute,\n    StopSearch: StopSearch // Passing in props - Functions defined above.\n    ,\n    panTo: panTo,\n    stopChoice: stopChoice,\n    routeChoice: routeChoice,\n    panTwo: panTwo // Passing in props - Stop data defined above.\n    ,\n    parsedStops: parsedStops,\n    stopDescriptions: stopDescriptions,\n    allRoutes: allRoutes,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 312,\n      columnNumber: 11\n    }\n  }))), /*#__PURE__*/React.createElement(Row, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 328,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Col, {\n    lg: 9,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 329,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(GoogleMap // Inbuilt props: https://react-google-maps-api-docs.netlify.app/#googlemap.\n  , {\n    mapContainerStyle: mapContainerStyle,\n    center: center,\n    zoom: zoom,\n    options: mapOptions,\n    onLoad: onMapLoad,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 331,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(Locate // Passing in props - Functions defined above.\n  , {\n    panTo: panTo,\n    setResponse: setResponse,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 339,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(RouteInfo // Passing in props - Functions defined above.\n  , {\n    markerLoadHandler: markerLoadHandler,\n    markerClickHandler: markerClickHandler,\n    markerSelectionChoice: markerSelectionChoice // Passing in props - Stop data defined above.\n    ,\n    route: routeString,\n    filteredStopsChoice: filteredStopsChoice,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 345,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(ClusteredMarkers // Passing in props - Functions defined above.\n  , {\n    markerLoadHandler: markerLoadHandler,\n    markerClickHandler: markerClickHandler,\n    markerSelection: markerSelection // Passing in props - Stop data defined above.\n    ,\n    myStops: myStops,\n    setFilteredStops: setFilteredStops,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 355,\n      columnNumber: 13\n    }\n  }), infoOpen && selectedPlace && /*#__PURE__*/React.createElement(InfoWindow // Inbuilt props: https://react-google-maps-api-docs.netlify.app/#infowindow.\n  , {\n    anchor: markerMap[selectedPlace.properties.id],\n    onCloseClick: () => setInfoOpen(false),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 366,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 371,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"h5\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 372,\n      columnNumber: 19\n    }\n  }, selectedPlace.properties.fullname + \", stop \" + selectedPlace.properties.id), /*#__PURE__*/React.createElement(RtpiApi // Passing in props - Stop data defined above.\n  , {\n    number: selectedPlace.properties.id,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 377,\n      columnNumber: 19\n    }\n  }))), markers.map(marker => /*#__PURE__*/React.createElement(Marker // Inbuilt props: https://react-google-maps-api-docs.netlify.app/#marker.\n  , {\n    key: `${marker.lat}-${marker.lng}`,\n    position: {\n      lat: marker.lat,\n      lng: marker.lng\n    },\n    onClick: () => {\n      setSelected(marker);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 386,\n      columnNumber: 15\n    }\n  })), destination !== \"\" && origin !== \"\" && /*#__PURE__*/React.createElement(DirectionsService // Inbuilt props: https://react-google-maps-api-docs.netlify.app/#directionsservice.\n  , {\n    options: {\n      destination: destination,\n      origin: origin,\n      travelMode: \"TRANSIT\",\n      provideRouteAlternatives: true,\n      transitOptions: {\n        modes: [\"BUS\"],\n        routingPreference: \"FEWER_TRANSFERS\",\n        departureTime: selectedTime\n      } // transitDetails: { trip_short_name: \"145\" },\n\n    } // required\n    ,\n    callback: directionsCallback,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 396,\n      columnNumber: 15\n    }\n  }), response !== null && /*#__PURE__*/React.createElement(DirectionsRenderer // Inbuilt props: https://react-google-maps-api-docs.netlify.app/#directionsrenderer.\n  // what you might try to do is iterate over\n  // the route list and find the one with short_name of\n  // selected route, then render that one using routeIndex : i.\n  // required\n  , {\n    options: {\n      directions: response.response,\n      // hideRouteList: true,\n      polylineOptions: {\n        strokeColor: \"red\",\n        strokeWeight: 5\n      },\n      suppressInfoWindows: true,\n      suppressMarkers: false\n    } // panel={document.getElementById(\"panel\")}\n    // removing all displayed stops upon loading\n    ,\n    onLoad: () => {\n      setRouteString(\"\");\n      setMarkerSelection(\"False\");\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 415,\n      columnNumber: 15\n    }\n  }))), /*#__PURE__*/React.createElement(Col, {\n    lg: 3 // CSS\n    ,\n    style: {\n      paddingTop: \"2vh\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 441,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(PredictionInput // Passing in props - Functions defined above.\n  , {\n    panTo: panTo,\n    panTwo: panTwo,\n    originChoice: originChoice,\n    destinationChoice: destinationChoice,\n    originNumberChoice: originNumberChoice,\n    destinationNumberChoice: destinationNumberChoice,\n    timeChoice: timeChoice,\n    routeChoice: routeChoice // Passing in props - Variables defined above.\n    ,\n    originNumber: originNumber,\n    destinationNumber: destinationNumber,\n    selectedTime: selectedTime,\n    setSelectedTime: setSelectedTime,\n    timeDayMonth: timeDayMonth,\n    setTimeDayMonth: setTimeDayMonth,\n    routeSelect: routeSelect,\n    setRouteSelect: setRouteSelect,\n    directionSelect: directionSelect,\n    setDirectionSelect: setDirectionSelect,\n    setResponse: setResponse // Passing in props - Stop data defined above.\n    ,\n    parsedStops: parsedStops,\n    stopDescriptions: stopDescriptions,\n    allRoutes: allRoutes,\n    filteredStops: filteredStops,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 446,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    id: \"panel\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 474,\n      columnNumber: 11\n    }\n  }))));\n} // Function that filters the markers on the map\n// according to a user selected route.\n\nfunction RouteInfo(props) {\n  // i want to be able to define this variable outside of this function.\n  // but it has to be populated in here.\n  // when it has been populated it shoiuld be set in App.\n  const filteredMarkers = [];\n  const filteredStopStrings = [];\n\n  for (var i = 0; i < myStops.length; i++) {\n    for (var j = 0; j < myStops[i].properties.routes.length; j++) {\n      if (String(myStops[i].properties.routes[j]) === props.route) {\n        filteredMarkers.push(myStops[i]);\n        filteredStopStrings.push(myStops[i].description);\n      }\n    }\n  }\n\n  const uniqueMarkers = filteredMarkers.filter((a, b) => filteredMarkers.indexOf(a) === b); // console.log(filteredMarkers);\n\n  return uniqueMarkers.map(stop => /*#__PURE__*/React.createElement(Marker, {\n    icon: icon,\n    key: stop.properties.id,\n    position: stop.geometry.pos,\n    onLoad: marker => {\n      props.filteredStopsChoice(filteredStopStrings);\n      props.filteredStopsLatLngChoice(stop.geometry.pos);\n      console.log(stop.geometry.pos); // Will do for now - removing cluster upon selection of route.\n\n      props.markerSelectionChoice(\"False\");\n      props.markerLoadHandler(marker, stop);\n    },\n    onClick: event => {\n      props.markerClickHandler(event, stop);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 505,\n      columnNumber: 5\n    }\n  }));\n} // Function that renders all of the Dublin Bus stops in clustered form.\n// props.markerSelection being set to True means that they will all be displayed on\n// the first load. When a route is chosen from the RouteInfo function above,\n// props.cheker gets set to False and all of the markers are removed. This solution\n// is intended only to be temporary until something better comes up.\n\n\nfunction ClusteredMarkers(props) {\n  if (props.markerSelection === \"True\") {\n    return /*#__PURE__*/React.createElement(MarkerClusterer, {\n      options: options,\n      maxZoom: 15,\n      minimumClusterSize: 4,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 532,\n        columnNumber: 7\n      }\n    }, clusterer => props.myStops.map(stop => /*#__PURE__*/React.createElement(Marker, {\n      icon: icon,\n      key: stop.properties.id,\n      position: stop.geometry.pos,\n      clusterer: clusterer,\n      onLoad: marker => props.markerLoadHandler(marker, stop),\n      onClick: event => props.markerClickHandler(event, stop),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 535,\n        columnNumber: 13\n      }\n    })));\n  } else {\n    return null;\n  }\n}","map":{"version":3,"sources":["/Users/evanbyrnes/Pycharm-python-workspace/T13_SP/client/src/App.js"],"names":["React","useState","useLoadScript","GoogleMap","Marker","InfoWindow","MarkerClusterer","DirectionsRenderer","DirectionsService","Row","Col","Container","CustomNavBar","FilterRoute","StopSearch","Locate","PredictionInput","RtpiApi","googleMapApiKey","libraries","data","require","dublinCenter","styles","mapOptions","disableDefaultUI","zoomControl","maxZoom","minZoom","mapContainerStyle","height","icon","url","scaledSize","width","options","imagePath","rawData","results","myStops","map","stop","description","stopid","fullname","type","properties","id","routes","operators","geometry","pos","lat","parseFloat","latitude","lng","longitude","parsedStops","parsed","stopDescriptions","i","length","push","routesArray","duplicateRoutes","j","k","l","allRoutes","filter","a","b","indexOf","App","isLoaded","loadError","googleMapsApiKey","center","zoom","setZoom","selectedPlace","setSelectedPlace","markerMap","setMarkerMap","infoOpen","setInfoOpen","markers","setMarkers","selected","setSelected","stopNumber","setStopNumber","originNumber","setOriginNumber","destinationNumber","setDestinationNumber","routeString","setRouteString","response","setResponse","origin","setOrigin","destination","setDestination","markerSelection","setMarkerSelection","selectedTime","setSelectedTime","Date","initialTime","toTimeString","substring","initialDay","initialMonth","toDateString","split","timeDayMonth","setTimeDayMonth","routeSelect","setRouteSelect","directionSelect","setDirectionSelect","undefined","filteredStops","setFilteredStops","filteredStopsLatLng","setFilteredStopsLatLng","console","log","mapRef","useRef","onMapLoad","useCallback","current","panTo","panTwo","bounds","window","google","maps","LatLngBounds","extend","fitBounds","markerLoadHandler","marker","prevState","markerClickHandler","event","place","stopChoice","number","parseInt","originChoice","address","destinationChoice","routeChoice","route","directionsCallback","status","toLowerCase","selectedRouteArray","legs","steps","travel_mode","String","transit","line","short_name","markerSelectionChoice","originNumberChoice","destinationNumberChoice","timeChoice","time","day","month","filteredStopsChoice","filteredMarkers","filteredStopsLatLngChoice","travelMode","provideRouteAlternatives","transitOptions","modes","routingPreference","departureTime","directions","polylineOptions","strokeColor","strokeWeight","suppressInfoWindows","suppressMarkers","paddingTop","RouteInfo","props","filteredStopStrings","uniqueMarkers","ClusteredMarkers","clusterer"],"mappings":"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","sourcesContent":["// Importing outside developed components.\nimport React, { useState } from \"react\";\nimport {\n  useLoadScript,\n  GoogleMap,\n  Marker,\n  InfoWindow,\n  MarkerClusterer,\n  DirectionsRenderer,\n  DirectionsService,\n} from \"@react-google-maps/api\";\nimport Row from \"react-bootstrap/Row\";\nimport Col from \"react-bootstrap/Col\";\nimport Container from \"react-bootstrap/Container\";\n// Importing self-developed components.\nimport CustomNavBar from \"./components/CustomNavBar\";\nimport FilterRoute from \"./components/FilterRoute\";\nimport StopSearch from \"./components/StopSearch\";\nimport Locate from \"./components/Locate\";\nimport PredictionInput from \"./components/PredictionInput\";\nimport RtpiApi from \"./components/RtpiApi\";\n// Importing outside developed css.\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"@reach/combobox/styles.css\";\n// Importing Google Maps Api Key.\nimport googleMapApiKey from \"./config\";\n// Defining libraries for Google Places\nconst libraries = [\"places\"];\n// Importing the Dublin Bus API stops data\nconst data = require(\"./data/DublinBusStops.json\");\n// // consts: [53.349804, -6.260310] - Dublin\nconst dublinCenter = require(\"./data/DublinCenter.json\");\n// Importing custom styles to customize the style of Google Map...\n// important for including and excluding certain place markers etc.\nconst styles = require(\"./data/GoogleMapStyles.json\");\n// Defined custom styles and location for Google Map.\nconst mapOptions = {\n  styles: styles,\n  disableDefaultUI: true,\n  zoomControl: true,\n  maxZoom: 17,\n  minZoom: 1,\n};\nconst mapContainerStyle = {\n  height: \"93vh\",\n};\n// Icon used to represent a bus stop on the map.\nconst icon = {\n  url: \"/bus_icon.svg\",\n  scaledSize: { width: 18, height: 18 },\n};\n// Icons used when Markers are clustered.\nconst options = {\n  imagePath:\n    \"https://developers.google.com/maps/documentation/javascript/examples/markerclusterer/m\",\n};\n// Parsing the Stops data into various object shapes.\nconst rawData = data.results;\n\nconst myStops = rawData.map((stop) => ({\n  description: \"Stop \" + stop.stopid + \", \" + stop.fullname,\n  type: \"Feature\",\n  properties: {\n    id: stop.stopid,\n    fullname: stop.fullname,\n    routes: stop.operators[0].routes,\n  },\n  geometry: {\n    type: \"Point\",\n    pos: {\n      lat: parseFloat(stop.latitude),\n      lng: parseFloat(stop.longitude),\n    },\n  },\n}));\n\nconst parsedStops = myStops.map((parsed) => ({\n  id: parsed.properties.id,\n  description: parsed.description,\n  geometry: parsed.geometry.pos,\n}));\n\nconst stopDescriptions = [];\nfor (var i = 0; i < parsedStops.length; i++) {\n  stopDescriptions.push(parsedStops[i].description);\n}\n\nconst routesArray = [];\nconst duplicateRoutes = [];\nfor (var j = 0; j < myStops.length; j++) {\n  routesArray.push(myStops[j].properties.routes);\n}\nfor (var k = 0; k < routesArray.length; k++) {\n  for (var l = 0; l < routesArray[k].length; l++) {\n    duplicateRoutes.push(routesArray[k][l]);\n  }\n}\nconst allRoutes = duplicateRoutes.filter(\n  (a, b) => duplicateRoutes.indexOf(a) === b\n);\n\n// Main function for the SPA, generating the Map/Page.\nexport default function App() {\n  const { isLoaded, loadError } = useLoadScript({\n    googleMapsApiKey: googleMapApiKey,\n    libraries,\n  });\n  const center = dublinCenter;\n  // eslint-disable-next-line\n  const [zoom, setZoom] = useState(11); // removing unwanted warning.\n  // The general things we need to track in state:\n  const [selectedPlace, setSelectedPlace] = useState(null);\n  const [markerMap, setMarkerMap] = useState({});\n  const [infoOpen, setInfoOpen] = useState(false);\n  const [markers, setMarkers] = useState([]);\n  // eslint-disable-next-line\n  const [selected, setSelected] = useState(null); // removing unwanted warning.\n  // Consider removing this variable stopNumber, see if it can be merged with either originNumber or destinationNumber.\n  // eslint-disable-next-line\n  const [stopNumber, setStopNumber] = useState(0); // removing unwanted warning.\n  // These are being used to track selected stop numbers\n  const [originNumber, setOriginNumber] = useState(0);\n  const [destinationNumber, setDestinationNumber] = useState(0);\n  // This is used to track the string value of selected routes.\n  const [routeString, setRouteString] = useState(\"\");\n  // The things for Directions (Service and Renderer) we need to track in state.\n  const [response, setResponse] = useState(null);\n  const [origin, setOrigin] = useState(\"\");\n  const [destination, setDestination] = useState(\"\");\n  // This is being used to track in state which set of markers is displayed. (Clusters or Route Markers)\n  const [markerSelection, setMarkerSelection] = useState(\"True\");\n  // The things for selected time (Hour, Day, Month) we need to track in state.\n  const [selectedTime, setSelectedTime] = useState(new Date());\n  // Setting the time, day and month values as the current time.\n  // This allows for user to make prediction for journey that occurs at\n  // this time without having to select the time.\n  const initialTime = selectedTime.toTimeString().substring(0, 2);\n  const [initialDay, initialMonth] = selectedTime.toDateString().split(\" \");\n  // An array containing time data for model input.\n  const [timeDayMonth, setTimeDayMonth] = useState([\n    initialTime,\n    initialDay,\n    initialMonth,\n  ]);\n  // Track state of user selected routes and directions.\n  const [routeSelect, setRouteSelect] = React.useState(\"\");\n  const [directionSelect, setDirectionSelect] = React.useState(undefined);\n  // Track state of filtered bus stops.\n  const [filteredStops, setFilteredStops] = React.useState([]);\n  const [filteredStopsLatLng, setFilteredStopsLatLng] = React.useState([]);\n  console.log(\"filteredStops triggered\", filteredStops);\n\n  const mapRef = React.useRef();\n  const onMapLoad = React.useCallback((map) => {\n    mapRef.current = map;\n  }, []);\n\n  // const onMapLoad = React.useCallback(function callback(map) {\n  //   const bounds = new window.google.maps.LatLngBounds();\n  //   map.fitBounds(bounds);\n  //   setMap(map);\n  // }, []);\n  // Orient the map to selected location.\n  const panTo = React.useCallback(({ lat, lng }) => {\n    mapRef.current.panTo({ lat, lng });\n    mapRef.current.setZoom(16);\n    // Resetting the drawn route anytime this functions is called.\n    setDestination(\"\");\n    // Allowing only one marker on the map at a time.\n    setMarkers((current) => []);\n    setMarkers((current) => [...current, { lat: lat, lng: lng }]);\n  }, []);\n\n  // Orient the map to the selected route.\n  // Will need to have passed in to it an array of stop locations.\n  const panTwo = React.useCallback((geometry) => {\n    console.log(geometry, \"here is geometry in panTwo in App.js\");\n    const bounds = new window.google.maps.LatLngBounds(); // create an empty new bounds object\n    bounds.extend(geometry);\n    // bounds.extend({\n    //   lat: 53.349804,\n    //   lng: -6.30131,\n    // });\n    mapRef.current.fitBounds(bounds);\n\n    // mapRef.current.panTwo({ lat, lng });\n    mapRef.current.setZoom(12);\n    // Resetting the drawn route anytime this functions is called.\n    setDestination(\"\");\n    // // Trying to reset the Model API.\n    // setOriginNumber(0);\n    // setDestinationNumber(0);\n    // setRouteSelect(undefined);\n    // setDirectionSelect(NaN);\n  }, []);\n\n  // We have to create a mapping of our places to actual Marker objects\n  const markerLoadHandler = (marker, stop) => {\n    return setMarkerMap((prevState) => {\n      return { ...prevState, [stop.properties.id]: marker };\n    });\n  };\n\n  const markerClickHandler = (event, place) => {\n    // Remember which stop was clicked\n    setSelectedPlace(place);\n    // Required so clicking a 2nd marker works as expected\n    if (infoOpen) {\n      setInfoOpen(false);\n    }\n    setInfoOpen(true);\n  };\n\n  // Changing stop realtime info based on user choice.\n  const stopChoice = (number) => {\n    setStopNumber(() => parseInt(number.id));\n  };\n  // Changing origin info based on user choice.\n  const originChoice = (address) => {\n    // console.log(\"originChoice triggered\", address);\n    setOrigin(() => address);\n    // setOrigin(() => address.results[0].formatted_address);\n  };\n  // Changing destination info based on user choice.\n  const destinationChoice = (address) => {\n    // console.log(\"destinationChoice triggered\", address);\n    setDestination(() => address);\n    // setDestination(() => address.results[0].formatted_address);\n  };\n  // Changing stops of route displayed on based on user choice.\n  const routeChoice = (route) => {\n    setRouteString(() => route.routeString);\n  };\n\n  // For generating a directions route on the map.\n  const directionsCallback = (response) => {\n    if (response !== null) {\n      if (response.status === \"OK\") {\n        console.log(\n          \"routeSelect in directionsCallback\",\n          routeSelect.toLowerCase()\n        );\n        // This is the array you want associated with\n        // the response instead of the one that google assigns.\n        const selectedRouteArray = [];\n        for (var i = 0; i < response.routes.length; i++) {\n          for (var j = 0; j < response.routes[i].legs.length; j++) {\n            for (var k = 0; k < response.routes[i].legs[j].steps.length; k++) {\n              if (\n                // making sure that WALKING is excluded since it will not contain bus name information\n                response.routes[i].legs[j].steps[k].travel_mode == \"TRANSIT\" &&\n                // locating the first occurence of the users selected route\n                String(\n                  response.routes[i].legs[j].steps[k].transit.line.short_name\n                ) === routeSelect.toLowerCase()\n              ) {\n                selectedRouteArray.push(response.routes[i]);\n              }\n            }\n          }\n        }\n        // setting the routes array to be the one containing our desired bus route.\n        response.routes = selectedRouteArray;\n        setResponse(() => ({\n          response,\n        }));\n      } else {\n      }\n    }\n  };\n\n  //  For which set of markers to display (Clusters or Route Markers).\n  const markerSelectionChoice = () => {\n    setMarkerSelection(() => \"False\");\n  };\n\n  // For setting the selected origin stop number in state.\n  const originNumberChoice = (number) => {\n    console.log(\"originNumberChoice\", number);\n    setOriginNumber(() => parseInt(number.id));\n  };\n  // For setting the selected destination stop number in state.\n  const destinationNumberChoice = (number) => {\n    console.log(\"destinationNumberChoice\", number);\n    setDestinationNumber(() => parseInt(number.id));\n  };\n\n  // For setting the time in state.\n  const timeChoice = (selectedTime) => {\n    const time = selectedTime.toTimeString().substring(0, 2);\n    const [day, month] = selectedTime.toDateString().split(\" \");\n    setSelectedTime(selectedTime);\n    setTimeDayMonth([time, day, month]);\n  };\n  // console.log(\"These are the time values: date-day-month\", timeDayMonth);\n\n  const filteredStopsChoice = (filteredMarkers) => {\n    setFilteredStops(() => filteredMarkers);\n  };\n\n  const filteredStopsLatLngChoice = (filteredMarkers) => {\n    setFilteredStopsLatLng(() => filteredMarkers);\n  };\n\n  if (loadError) return \"Error\";\n  if (!isLoaded) return \"Loading...\";\n\n  return (\n    <Container fluid>\n      <Row>\n        <Col sm={12}>\n          <CustomNavBar\n            // Passing in props - Custom built components.\n            FilterRoute={FilterRoute}\n            StopSearch={StopSearch}\n            // Passing in props - Functions defined above.\n            panTo={panTo}\n            stopChoice={stopChoice}\n            routeChoice={routeChoice}\n            panTwo={panTwo}\n            // Passing in props - Stop data defined above.\n            parsedStops={parsedStops}\n            stopDescriptions={stopDescriptions}\n            allRoutes={allRoutes}\n          />\n        </Col>\n      </Row>\n      <Row>\n        <Col lg={9}>\n          {/* Render the Google Map */}\n          <GoogleMap\n            // Inbuilt props: https://react-google-maps-api-docs.netlify.app/#googlemap.\n            mapContainerStyle={mapContainerStyle}\n            center={center}\n            zoom={zoom}\n            options={mapOptions}\n            onLoad={onMapLoad}\n          >\n            <Locate\n              // Passing in props - Functions defined above.\n              panTo={panTo}\n              setResponse={setResponse}\n            />\n\n            <RouteInfo\n              // Passing in props - Functions defined above.\n              markerLoadHandler={markerLoadHandler}\n              markerClickHandler={markerClickHandler}\n              markerSelectionChoice={markerSelectionChoice}\n              // Passing in props - Stop data defined above.\n              route={routeString}\n              filteredStopsChoice={filteredStopsChoice}\n            />\n\n            <ClusteredMarkers\n              // Passing in props - Functions defined above.\n              markerLoadHandler={markerLoadHandler}\n              markerClickHandler={markerClickHandler}\n              markerSelection={markerSelection}\n              // Passing in props - Stop data defined above.\n              myStops={myStops}\n              setFilteredStops={setFilteredStops}\n            />\n\n            {infoOpen && selectedPlace && (\n              <InfoWindow\n                // Inbuilt props: https://react-google-maps-api-docs.netlify.app/#infowindow.\n                anchor={markerMap[selectedPlace.properties.id]}\n                onCloseClick={() => setInfoOpen(false)}\n              >\n                <div>\n                  <h5>\n                    {selectedPlace.properties.fullname +\n                      \", stop \" +\n                      selectedPlace.properties.id}\n                  </h5>\n                  <RtpiApi\n                    // Passing in props - Stop data defined above.\n                    number={selectedPlace.properties.id}\n                  />\n                </div>\n              </InfoWindow>\n            )}\n            {/* Markers dropped when stop has been chosen or geolocation activated. */}\n            {markers.map((marker) => (\n              <Marker\n                // Inbuilt props: https://react-google-maps-api-docs.netlify.app/#marker.\n                key={`${marker.lat}-${marker.lng}`}\n                position={{ lat: marker.lat, lng: marker.lng }}\n                onClick={() => {\n                  setSelected(marker);\n                }}\n              />\n            ))}\n            {destination !== \"\" && origin !== \"\" && (\n              <DirectionsService\n                // Inbuilt props: https://react-google-maps-api-docs.netlify.app/#directionsservice.\n                options={{\n                  destination: destination,\n                  origin: origin,\n                  travelMode: \"TRANSIT\",\n                  provideRouteAlternatives: true,\n                  transitOptions: {\n                    modes: [\"BUS\"],\n                    routingPreference: \"FEWER_TRANSFERS\",\n                    departureTime: selectedTime,\n                  },\n                  // transitDetails: { trip_short_name: \"145\" },\n                }}\n                // required\n                callback={directionsCallback}\n              />\n            )}\n            {response !== null && (\n              <DirectionsRenderer\n                // Inbuilt props: https://react-google-maps-api-docs.netlify.app/#directionsrenderer.\n                // what you might try to do is iterate over\n                // the route list and find the one with short_name of\n                // selected route, then render that one using routeIndex : i.\n                // required\n                options={{\n                  directions: response.response,\n                  // hideRouteList: true,\n                  polylineOptions: {\n                    strokeColor: \"red\",\n                    strokeWeight: 5,\n                  },\n                  suppressInfoWindows: true,\n                  suppressMarkers: false,\n                }}\n                // panel={document.getElementById(\"panel\")}\n                // removing all displayed stops upon loading\n                onLoad={() => {\n                  setRouteString(\"\");\n                  setMarkerSelection(\"False\");\n                }}\n              />\n            )}\n          </GoogleMap>\n        </Col>\n        <Col\n          lg={3}\n          // CSS\n          style={{ paddingTop: \"2vh\" }}\n        >\n          <PredictionInput\n            // Passing in props - Functions defined above.\n            panTo={panTo}\n            panTwo={panTwo}\n            originChoice={originChoice}\n            destinationChoice={destinationChoice}\n            originNumberChoice={originNumberChoice}\n            destinationNumberChoice={destinationNumberChoice}\n            timeChoice={timeChoice}\n            routeChoice={routeChoice}\n            // Passing in props - Variables defined above.\n            originNumber={originNumber}\n            destinationNumber={destinationNumber}\n            selectedTime={selectedTime}\n            setSelectedTime={setSelectedTime}\n            timeDayMonth={timeDayMonth}\n            setTimeDayMonth={setTimeDayMonth}\n            routeSelect={routeSelect}\n            setRouteSelect={setRouteSelect}\n            directionSelect={directionSelect}\n            setDirectionSelect={setDirectionSelect}\n            setResponse={setResponse}\n            // Passing in props - Stop data defined above.\n            parsedStops={parsedStops}\n            stopDescriptions={stopDescriptions}\n            allRoutes={allRoutes}\n            filteredStops={filteredStops}\n          />\n          <div id=\"panel\"></div>\n        </Col>\n      </Row>\n    </Container>\n  );\n}\n\n// Function that filters the markers on the map\n// according to a user selected route.\nfunction RouteInfo(props) {\n  // i want to be able to define this variable outside of this function.\n  // but it has to be populated in here.\n  // when it has been populated it shoiuld be set in App.\n  const filteredMarkers = [];\n  const filteredStopStrings = [];\n\n  for (var i = 0; i < myStops.length; i++) {\n    for (var j = 0; j < myStops[i].properties.routes.length; j++) {\n      if (String(myStops[i].properties.routes[j]) === props.route) {\n        filteredMarkers.push(myStops[i]);\n        filteredStopStrings.push(myStops[i].description);\n      }\n    }\n  }\n\n  const uniqueMarkers = filteredMarkers.filter(\n    (a, b) => filteredMarkers.indexOf(a) === b\n  );\n\n  // console.log(filteredMarkers);\n  return uniqueMarkers.map((stop) => (\n    <Marker\n      icon={icon}\n      key={stop.properties.id}\n      position={stop.geometry.pos}\n      onLoad={(marker) => {\n        props.filteredStopsChoice(filteredStopStrings);\n        props.filteredStopsLatLngChoice(stop.geometry.pos);\n        console.log(stop.geometry.pos);\n        // Will do for now - removing cluster upon selection of route.\n        props.markerSelectionChoice(\"False\");\n        props.markerLoadHandler(marker, stop);\n      }}\n      onClick={(event) => {\n        props.markerClickHandler(event, stop);\n      }}\n    />\n  ));\n}\n\n// Function that renders all of the Dublin Bus stops in clustered form.\n// props.markerSelection being set to True means that they will all be displayed on\n// the first load. When a route is chosen from the RouteInfo function above,\n// props.cheker gets set to False and all of the markers are removed. This solution\n// is intended only to be temporary until something better comes up.\nfunction ClusteredMarkers(props) {\n  if (props.markerSelection === \"True\") {\n    return (\n      <MarkerClusterer options={options} maxZoom={15} minimumClusterSize={4}>\n        {(clusterer) =>\n          props.myStops.map((stop) => (\n            <Marker\n              icon={icon}\n              key={stop.properties.id}\n              position={stop.geometry.pos}\n              clusterer={clusterer}\n              onLoad={(marker) => props.markerLoadHandler(marker, stop)}\n              onClick={(event) => props.markerClickHandler(event, stop)}\n            />\n          ))\n        }\n      </MarkerClusterer>\n    );\n  } else {\n    return null;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}