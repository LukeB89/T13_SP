{"ast":null,"code":"var _jsxFileName = \"/Users/evanbyrnes/Pycharm-python-workspace/T13_SP/client/src/components/T13GoogleMap.js\";\nimport React, { useState } from \"react\";\nimport { useLoadScript, GoogleMap, Marker, InfoWindow, MarkerClusterer } from \"@react-google-maps/api\";\nimport useSwr from \"swr\";\nimport googleMapApiKey from \".././config\";\nimport * as datal from \".././data/db-stops.json\"; // Import custom styles to customize the style of Google Map\n\nconst styles = require(\"../data/GoogleMapStyles.json\");\n\nconst options = {\n  imagePath: \"https://developers.google.com/maps/documentation/javascript/examples/markerclusterer/m\"\n}; // // This code will be used when the api calls are possible\n// const fetcher = (...args) =>\n//   fetch(...args).then((response) => response.json());\n\nexport default function T13GoogleMap() {\n  // The things we need to track in state\n  const [mapRef, setMapRef] = useState(null);\n  const [selectedPlace, setSelectedPlace] = useState(null);\n  const [markerMap, setMarkerMap] = useState({}); // consts: [53.349804, -6.260310] - Dublin\n\n  const [center, setCenter] = useState({\n    lat: 53.349804,\n    lng: -6.26031\n  });\n  const [zoom, setZoom] = useState(11);\n  const [infoOpen, setInfoOpen] = useState(false); // Load the Google maps scripts\n\n  const {\n    isLoaded\n  } = useLoadScript({\n    // Enter your own Google Maps API key in config.js\n    googleMapsApiKey: googleMapApiKey\n  }); // const url =\n  //   \"https://data.smartdublin.ie/cgi-bin/rtpi/busstopinformation?operator=bac\";\n  // // const { data, error } = useSwr(url, { fetcher });\n  // const data = useSwr(url, { fetcher });\n  // // const stopData = data && !error ? data(0, 5000) : [];\n  // console.log(data);\n\n  const url = \"https://data.police.uk/api/crimes-street/all-crime?lat=52.629729&lng=-1.131592&date=2019-10\";\n  const {\n    data,\n    error\n  } = useSwr(url, {\n    fetcher\n  });\n  const crimes = data && !error ? data : [];\n  console.log(crimes);\n  const uncleanData = datal.results; // A GeoJSON Feature object, with the geometry/pos of each object being a GeoJSON Point\n  // ref: https://tools.ietf.org/html/rfc7946#section-3.2\n\n  const myStops = uncleanData.map(stop => ({\n    type: \"Feature\",\n    properties: {\n      id: stop.stopid,\n      fullname: stop.fullname,\n      routes: stop.operators[0].routes\n    },\n    geometry: {\n      type: \"Point\",\n      pos: {\n        lat: parseFloat(stop.latitude),\n        lng: parseFloat(stop.longitude)\n      }\n    }\n  })); // Iterate myStops to size, center, and zoom map to contain all markers\n\n  const fitBounds = map => {\n    const bounds = new window.google.maps.LatLngBounds();\n    myStops.map(stop => {\n      bounds.extend(stop.geometry.pos);\n      return stop.properties.id;\n    });\n    map.fitBounds(bounds);\n  };\n\n  const loadHandler = map => {\n    // Store a reference to the google map instance in state\n    setMapRef(map); // Fit map bounds to contain all markers\n\n    fitBounds(map);\n  }; // We have to create a mapping of our places to actual Marker objects\n\n\n  const markerLoadHandler = (marker, stop) => {\n    return setMarkerMap(prevState => {\n      return { ...prevState,\n        [stop.properties.id]: marker\n      };\n    });\n  };\n\n  const markerClickHandler = (event, place) => {\n    // Remember which stop was clicked\n    setSelectedPlace(place); // Required so clicking a 2nd marker works as expected\n\n    if (infoOpen) {\n      setInfoOpen(false);\n    }\n\n    setInfoOpen(true); // If you want to zoom in a little on marker click\n\n    if (zoom < 11) {\n      setZoom(11);\n    } // if you want to center the selected Marker\n    //setCenter(place.pos)\n\n  };\n\n  const renderPage = () => {\n    return /*#__PURE__*/React.createElement(GoogleMap, {\n      onLoad: loadHandler,\n      onCenterChanged: () => setCenter(mapRef.getCenter().toJSON()),\n      center: center,\n      zoom: zoom,\n      options: {\n        styles: styles\n      },\n      mapContainerStyle: {\n        height: \"94vh\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(MarkerClusterer, {\n      options: options,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 132,\n        columnNumber: 9\n      }\n    }, clusterer => myStops.map(stop => /*#__PURE__*/React.createElement(Marker, {\n      key: stop.properties.id,\n      position: stop.geometry.pos,\n      clusterer: clusterer,\n      onLoad: marker => markerLoadHandler(marker, stop),\n      onClick: event => markerClickHandler(event, stop),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 135,\n        columnNumber: 15\n      }\n    }))), infoOpen && selectedPlace && /*#__PURE__*/React.createElement(InfoWindow, {\n      anchor: markerMap[selectedPlace.properties.id],\n      onCloseClick: () => setInfoOpen(false),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 147,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 151,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"h3\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 152,\n        columnNumber: 15\n      }\n    }, \"STOPID: \", selectedPlace.properties.id), /*#__PURE__*/React.createElement(\"h5\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 153,\n        columnNumber: 15\n      }\n    }, \"ROUTES: \", selectedPlace.properties.routes.join(\", \")))));\n  };\n\n  return isLoaded ? renderPage() : null;\n}","map":{"version":3,"sources":["/Users/evanbyrnes/Pycharm-python-workspace/T13_SP/client/src/components/T13GoogleMap.js"],"names":["React","useState","useLoadScript","GoogleMap","Marker","InfoWindow","MarkerClusterer","useSwr","googleMapApiKey","datal","styles","require","options","imagePath","T13GoogleMap","mapRef","setMapRef","selectedPlace","setSelectedPlace","markerMap","setMarkerMap","center","setCenter","lat","lng","zoom","setZoom","infoOpen","setInfoOpen","isLoaded","googleMapsApiKey","url","data","error","fetcher","crimes","console","log","uncleanData","results","myStops","map","stop","type","properties","id","stopid","fullname","routes","operators","geometry","pos","parseFloat","latitude","longitude","fitBounds","bounds","window","google","maps","LatLngBounds","extend","loadHandler","markerLoadHandler","marker","prevState","markerClickHandler","event","place","renderPage","getCenter","toJSON","height","clusterer","join"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport {\n  useLoadScript,\n  GoogleMap,\n  Marker,\n  InfoWindow,\n  MarkerClusterer,\n} from \"@react-google-maps/api\";\nimport useSwr from \"swr\";\n\nimport googleMapApiKey from \".././config\";\nimport * as datal from \".././data/db-stops.json\";\n\n// Import custom styles to customize the style of Google Map\nconst styles = require(\"../data/GoogleMapStyles.json\");\n\nconst options = {\n  imagePath:\n    \"https://developers.google.com/maps/documentation/javascript/examples/markerclusterer/m\",\n};\n\n// // This code will be used when the api calls are possible\n// const fetcher = (...args) =>\n//   fetch(...args).then((response) => response.json());\n\nexport default function T13GoogleMap() {\n  // The things we need to track in state\n  const [mapRef, setMapRef] = useState(null);\n  const [selectedPlace, setSelectedPlace] = useState(null);\n  const [markerMap, setMarkerMap] = useState({});\n  // consts: [53.349804, -6.260310] - Dublin\n  const [center, setCenter] = useState({ lat: 53.349804, lng: -6.26031 });\n  const [zoom, setZoom] = useState(11);\n  const [infoOpen, setInfoOpen] = useState(false);\n\n  // Load the Google maps scripts\n  const { isLoaded } = useLoadScript({\n    // Enter your own Google Maps API key in config.js\n    googleMapsApiKey: googleMapApiKey,\n  });\n\n  // const url =\n  //   \"https://data.smartdublin.ie/cgi-bin/rtpi/busstopinformation?operator=bac\";\n\n  // // const { data, error } = useSwr(url, { fetcher });\n  // const data = useSwr(url, { fetcher });\n\n  // // const stopData = data && !error ? data(0, 5000) : [];\n  // console.log(data);\n\n  const url =\n    \"https://data.police.uk/api/crimes-street/all-crime?lat=52.629729&lng=-1.131592&date=2019-10\";\n  const { data, error } = useSwr(url, { fetcher });\n  const crimes = data && !error ? data : [];\n  console.log(crimes);\n\n  const uncleanData = datal.results;\n  // A GeoJSON Feature object, with the geometry/pos of each object being a GeoJSON Point\n  // ref: https://tools.ietf.org/html/rfc7946#section-3.2\n  const myStops = uncleanData.map((stop) => ({\n    type: \"Feature\",\n    properties: {\n      id: stop.stopid,\n      fullname: stop.fullname,\n      routes: stop.operators[0].routes,\n    },\n    geometry: {\n      type: \"Point\",\n      pos: {\n        lat: parseFloat(stop.latitude),\n        lng: parseFloat(stop.longitude),\n      },\n    },\n  }));\n\n  // Iterate myStops to size, center, and zoom map to contain all markers\n  const fitBounds = (map) => {\n    const bounds = new window.google.maps.LatLngBounds();\n    myStops.map((stop) => {\n      bounds.extend(stop.geometry.pos);\n      return stop.properties.id;\n    });\n    map.fitBounds(bounds);\n  };\n\n  const loadHandler = (map) => {\n    // Store a reference to the google map instance in state\n    setMapRef(map);\n    // Fit map bounds to contain all markers\n    fitBounds(map);\n  };\n\n  // We have to create a mapping of our places to actual Marker objects\n  const markerLoadHandler = (marker, stop) => {\n    return setMarkerMap((prevState) => {\n      return { ...prevState, [stop.properties.id]: marker };\n    });\n  };\n\n  const markerClickHandler = (event, place) => {\n    // Remember which stop was clicked\n    setSelectedPlace(place);\n\n    // Required so clicking a 2nd marker works as expected\n    if (infoOpen) {\n      setInfoOpen(false);\n    }\n\n    setInfoOpen(true);\n\n    // If you want to zoom in a little on marker click\n    if (zoom < 11) {\n      setZoom(11);\n    }\n\n    // if you want to center the selected Marker\n    //setCenter(place.pos)\n  };\n\n  const renderPage = () => {\n    return (\n      <GoogleMap\n        onLoad={loadHandler}\n        onCenterChanged={() => setCenter(mapRef.getCenter().toJSON())}\n        center={center}\n        zoom={zoom}\n        options={{ styles: styles }}\n        mapContainerStyle={{\n          height: \"94vh\",\n        }}\n      >\n        <MarkerClusterer options={options}>\n          {(clusterer) =>\n            myStops.map((stop) => (\n              <Marker\n                key={stop.properties.id}\n                position={stop.geometry.pos}\n                clusterer={clusterer}\n                onLoad={(marker) => markerLoadHandler(marker, stop)}\n                onClick={(event) => markerClickHandler(event, stop)}\n              />\n            ))\n          }\n        </MarkerClusterer>\n\n        {infoOpen && selectedPlace && (\n          <InfoWindow\n            anchor={markerMap[selectedPlace.properties.id]}\n            onCloseClick={() => setInfoOpen(false)}\n          >\n            <div>\n              <h3>STOPID: {selectedPlace.properties.id}</h3>\n              <h5>ROUTES: {selectedPlace.properties.routes.join(\", \")}</h5>\n            </div>\n          </InfoWindow>\n        )}\n      </GoogleMap>\n    );\n  };\n  return isLoaded ? renderPage() : null;\n}\n"]},"metadata":{},"sourceType":"module"}