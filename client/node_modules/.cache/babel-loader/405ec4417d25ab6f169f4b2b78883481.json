{"ast":null,"code":"var _jsxFileName = \"/Users/evanbyrnes/Pycharm-python-workspace/T13_SP/client/src/components/T13GoogleMap.js\";\nimport React, { Component, useState } from \"react\";\nimport { useLoadScript, GoogleMap, Marker, InfoWindow, MarkerClusterer } from \"@react-google-maps/api\";\nimport googleMapApiKey from \".././config\";\nimport useSwr from \"swr\";\nimport * as data from \".././data/db-stops.json\";\nconst options = {\n  imagePath: \"https://developers.google.com/maps/documentation/javascript/examples/markerclusterer/m\"\n}; // The things we need to track in state\n\nconst [mapRef, setMapRef] = useState(null);\nconst [selectedPlace, setSelectedPlace] = useState(null);\nconst [markerMap, setMarkerMap] = useState({}); // consts: [53.349804, -6.260310] - Dublin\n\nconst [center, setCenter] = useState({\n  lat: 53.349804,\n  lng: -6.26031\n});\nconst [zoom, setZoom] = useState(10); // const [clickedLatLng, setClickedLatLng] = useState(null);\n\nconst [infoOpen, setInfoOpen] = useState(false); // Load the Google maps scripts\n\nconst {\n  isLoaded\n} = useLoadScript({\n  // Enter your own Google Maps API key in config.js\n  googleMapsApiKey: googleMapApiKey\n}); // Currently reading in data variable from db-stops.json file, will use API in future, see three lines below\n//   const url = \"https://data.smartdublin.ie/cgi-bin/rtpi/busstopinformation?operator=bac\";\n//   const { data, error } = useSwr(url, { fetcher });\n//   const stopData = data && !error ? data.slice(0, 4200) : [];\n// Currently reading in data variable from db-stops.json file, will use API in future, see three commented lines above.\n\nconst uncleanData = data.results; // A GeoJSON Feature object, with the geometry/pos of each object being a GeoJSON Point\n// ref: https://tools.ietf.org/html/rfc7946#section-3.2\n\nconst myStops = uncleanData.map(stop => ({\n  type: \"Feature\",\n  properties: {\n    id: stop.stopid,\n    fullname: stop.fullname,\n    routes: stop.operators[0].routes\n  },\n  geometry: {\n    type: \"Point\",\n    pos: {\n      lat: parseFloat(stop.latitude),\n      lng: parseFloat(stop.longitude)\n    }\n  }\n})); // Iterate myStops to size, center, and zoom map to contain all markers\n\nconst fitBounds = map => {\n  const bounds = new window.google.maps.LatLngBounds();\n  myStops.map(stop => {\n    bounds.extend(stop.geometry.pos);\n    return stop.properties.id;\n  });\n  map.fitBounds(bounds);\n};\n\nconst loadHandler = map => {\n  // Store a reference to the google map instance in state\n  setMapRef(map); // Fit map bounds to contain all markers\n\n  fitBounds(map);\n}; // We have to create a mapping of our places to actual Marker objects\n\n\nconst markerLoadHandler = (marker, stop) => {\n  return setMarkerMap(prevState => {\n    return { ...prevState,\n      [stop.properties.id]: marker\n    };\n  });\n};\n\nconst markerClickHandler = (event, place) => {\n  // Remember which stop was clicked\n  setSelectedPlace(place); // Required so clicking a 2nd marker works as expected\n\n  if (infoOpen) {\n    setInfoOpen(false);\n  }\n\n  setInfoOpen(true); // If you want to zoom in a little on marker click\n\n  if (zoom < 11) {\n    setZoom(11);\n  } // if you want to center the selected Marker\n  //setCenter(place.pos)\n\n};\n\nexport default function T13GoogleMap() {\n  return /*#__PURE__*/React.createElement(GoogleMap // Do stuff on map initial laod\n  , {\n    onLoad: loadHandler // Save the current center position in state\n    ,\n    onCenterChanged: () => setCenter(mapRef.getCenter().toJSON()) // Save the user's map click position\n    // onClick={e => setClickedLatLng(e.latLng.toJSON())}\n    ,\n    center: center,\n    zoom: zoom,\n    mapContainerStyle: {\n      height: \"94vh\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(MarkerClusterer, {\n    options: options,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 7\n    }\n  }, clusterer => myStops.map(stop => /*#__PURE__*/React.createElement(Marker, {\n    key: stop.properties.id,\n    position: stop.geometry.pos,\n    clusterer: clusterer,\n    onLoad: marker => markerLoadHandler(marker, stop),\n    onClick: event => markerClickHandler(event, stop),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 13\n    }\n  }))), infoOpen && selectedPlace && /*#__PURE__*/React.createElement(InfoWindow, {\n    anchor: markerMap[selectedPlace.properties.id],\n    onCloseClick: () => setInfoOpen(false),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"h3\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 13\n    }\n  }, \"STOPID: \", selectedPlace.properties.id), /*#__PURE__*/React.createElement(\"h5\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 13\n    }\n  }, \"ROUTES: \", selectedPlace.properties.routes.join(\", \")))));\n}","map":{"version":3,"sources":["/Users/evanbyrnes/Pycharm-python-workspace/T13_SP/client/src/components/T13GoogleMap.js"],"names":["React","Component","useState","useLoadScript","GoogleMap","Marker","InfoWindow","MarkerClusterer","googleMapApiKey","useSwr","data","options","imagePath","mapRef","setMapRef","selectedPlace","setSelectedPlace","markerMap","setMarkerMap","center","setCenter","lat","lng","zoom","setZoom","infoOpen","setInfoOpen","isLoaded","googleMapsApiKey","uncleanData","results","myStops","map","stop","type","properties","id","stopid","fullname","routes","operators","geometry","pos","parseFloat","latitude","longitude","fitBounds","bounds","window","google","maps","LatLngBounds","extend","loadHandler","markerLoadHandler","marker","prevState","markerClickHandler","event","place","T13GoogleMap","getCenter","toJSON","height","clusterer","join"],"mappings":"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","sourcesContent":["import React, { Component, useState } from \"react\";\nimport {\n  useLoadScript,\n  GoogleMap,\n  Marker,\n  InfoWindow,\n  MarkerClusterer,\n} from \"@react-google-maps/api\";\n\nimport googleMapApiKey from \".././config\";\nimport useSwr from \"swr\";\n\nimport * as data from \".././data/db-stops.json\";\nconst options = {\n  imagePath:\n    \"https://developers.google.com/maps/documentation/javascript/examples/markerclusterer/m\",\n};\n// The things we need to track in state\nconst [mapRef, setMapRef] = useState(null);\nconst [selectedPlace, setSelectedPlace] = useState(null);\nconst [markerMap, setMarkerMap] = useState({});\n// consts: [53.349804, -6.260310] - Dublin\nconst [center, setCenter] = useState({ lat: 53.349804, lng: -6.26031 });\nconst [zoom, setZoom] = useState(10);\n// const [clickedLatLng, setClickedLatLng] = useState(null);\nconst [infoOpen, setInfoOpen] = useState(false);\n\n// Load the Google maps scripts\nconst { isLoaded } = useLoadScript({\n  // Enter your own Google Maps API key in config.js\n  googleMapsApiKey: googleMapApiKey,\n});\n\n// Currently reading in data variable from db-stops.json file, will use API in future, see three lines below\n//   const url = \"https://data.smartdublin.ie/cgi-bin/rtpi/busstopinformation?operator=bac\";\n//   const { data, error } = useSwr(url, { fetcher });\n//   const stopData = data && !error ? data.slice(0, 4200) : [];\n// Currently reading in data variable from db-stops.json file, will use API in future, see three commented lines above.\nconst uncleanData = data.results;\n// A GeoJSON Feature object, with the geometry/pos of each object being a GeoJSON Point\n// ref: https://tools.ietf.org/html/rfc7946#section-3.2\nconst myStops = uncleanData.map((stop) => ({\n  type: \"Feature\",\n  properties: {\n    id: stop.stopid,\n    fullname: stop.fullname,\n    routes: stop.operators[0].routes,\n  },\n  geometry: {\n    type: \"Point\",\n    pos: {\n      lat: parseFloat(stop.latitude),\n      lng: parseFloat(stop.longitude),\n    },\n  },\n}));\n\n// Iterate myStops to size, center, and zoom map to contain all markers\nconst fitBounds = (map) => {\n  const bounds = new window.google.maps.LatLngBounds();\n  myStops.map((stop) => {\n    bounds.extend(stop.geometry.pos);\n    return stop.properties.id;\n  });\n  map.fitBounds(bounds);\n};\n\nconst loadHandler = (map) => {\n  // Store a reference to the google map instance in state\n  setMapRef(map);\n  // Fit map bounds to contain all markers\n  fitBounds(map);\n};\n\n// We have to create a mapping of our places to actual Marker objects\nconst markerLoadHandler = (marker, stop) => {\n  return setMarkerMap((prevState) => {\n    return { ...prevState, [stop.properties.id]: marker };\n  });\n};\n\nconst markerClickHandler = (event, place) => {\n  // Remember which stop was clicked\n  setSelectedPlace(place);\n\n  // Required so clicking a 2nd marker works as expected\n  if (infoOpen) {\n    setInfoOpen(false);\n  }\n\n  setInfoOpen(true);\n\n  // If you want to zoom in a little on marker click\n  if (zoom < 11) {\n    setZoom(11);\n  }\n\n  // if you want to center the selected Marker\n  //setCenter(place.pos)\n};\n\nexport default function T13GoogleMap() {\n  return (\n    <GoogleMap\n      // Do stuff on map initial laod\n      onLoad={loadHandler}\n      // Save the current center position in state\n      onCenterChanged={() => setCenter(mapRef.getCenter().toJSON())}\n      // Save the user's map click position\n      // onClick={e => setClickedLatLng(e.latLng.toJSON())}\n      center={center}\n      zoom={zoom}\n      mapContainerStyle={{\n        height: \"94vh\",\n      }}\n    >\n      <MarkerClusterer options={options}>\n        {(clusterer) =>\n          myStops.map((stop) => (\n            <Marker\n              key={stop.properties.id}\n              position={stop.geometry.pos}\n              clusterer={clusterer}\n              onLoad={(marker) => markerLoadHandler(marker, stop)}\n              onClick={(event) => markerClickHandler(event, stop)}\n            />\n          ))\n        }\n      </MarkerClusterer>\n\n      {infoOpen && selectedPlace && (\n        <InfoWindow\n          anchor={markerMap[selectedPlace.properties.id]}\n          onCloseClick={() => setInfoOpen(false)}\n        >\n          <div>\n            <h3>STOPID: {selectedPlace.properties.id}</h3>\n            <h5>ROUTES: {selectedPlace.properties.routes.join(\", \")}</h5>\n            {/* <div>This is your info window content</div> */}\n          </div>\n        </InfoWindow>\n      )}\n    </GoogleMap>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}