{"ast":null,"code":"var _jsxFileName = \"/Users/evanbyrnes/Pycharm-python-workspace/T13_SP/client/src/components/T13GoogleMap.js\";\nimport React, { useState } from \"react\";\nimport { useLoadScript, GoogleMap, Marker, InfoWindow, MarkerClusterer } from \"@react-google-maps/api\";\nimport googleMapApiKey from \".././config\";\nimport * as data from \".././data/db-stops.json\"; // Import custom styles to customize the style of Google Map\n\nconst styles = require(\"../data/GoogleMapStyles.json\");\n\nconst options = {\n  imagePath: \"https://developers.google.com/maps/documentation/javascript/examples/markerclusterer/m\"\n};\nconst mapOptions = {\n  styles: styles,\n  disableDefaultUI: true,\n  zoomControl: true\n};\nexport default function T13GoogleMap() {\n  // The things we need to track in state\n  const [mapRef, setMapRef] = useState(null);\n  const [selectedPlace, setSelectedPlace] = useState(null);\n  const [markerMap, setMarkerMap] = useState({}); // consts: [53.349804, -6.260310] - Dublin\n\n  const [center, setCenter] = useState({\n    lat: 53.349804,\n    lng: -6.26031\n  });\n  const [zoom, setZoom] = useState(11);\n  const [infoOpen, setInfoOpen] = useState(false); // Load the Google maps scripts\n\n  const {\n    isLoaded\n  } = useLoadScript({\n    // Enter your own Google Maps API key in config.js\n    googleMapsApiKey: googleMapApiKey\n  }); // Iterate myStops to size, center, and zoom map to contain all markers\n\n  const fitBounds = map => {\n    const bounds = new window.google.maps.LatLngBounds();\n    myStops.map(stop => {\n      bounds.extend(stop.geometry.pos);\n      return stop.properties.id;\n    });\n    map.fitBounds(bounds);\n  };\n\n  const loadHandler = map => {\n    // Store a reference to the google map instance in state\n    setMapRef(map); // Fit map bounds to contain all markers\n\n    fitBounds(map);\n  }; // We have to create a mapping of our places to actual Marker objects\n\n\n  const markerLoadHandler = (marker, stop) => {\n    return setMarkerMap(prevState => {\n      return { ...prevState,\n        [stop.properties.id]: marker\n      };\n    });\n  };\n\n  const markerClickHandler = (event, place) => {\n    // Remember which stop was clicked\n    setSelectedPlace(place); // Required so clicking a 2nd marker works as expected\n\n    if (infoOpen) {\n      setInfoOpen(false);\n    }\n\n    setInfoOpen(true); // If you want to zoom in a little on marker click\n\n    if (zoom < 11) {\n      setZoom(11);\n    } // if you want to center the selected Marker\n    //setCenter(place.pos)\n\n  };\n\n  const refoM = React.useRef();\n  const panTo = React.useCallback(({\n    lat,\n    lng\n  }) => {\n    refoM.current.panTo({\n      lat,\n      lng\n    });\n    refoM.current.setZoom(14);\n  }, []);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Locate, {\n    panTo: panTo,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(GoogleMap, {\n    onLoad: loadHandler,\n    onCenterChanged: () => setCenter(mapRef.getCenter().toJSON()),\n    center: center,\n    zoom: zoom,\n    maxZoom: 13,\n    options: mapOptions // options={{ styles: styles }}\n    ,\n    mapContainerStyle: {\n      height: \"94vh\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(MarkerClusterer, {\n    options: options,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 9\n    }\n  }, clusterer => myStops.map(stop => /*#__PURE__*/React.createElement(Marker, {\n    key: stop.properties.id,\n    position: stop.geometry.pos,\n    clusterer: clusterer,\n    onLoad: marker => markerLoadHandler(marker, stop),\n    onClick: event => markerClickHandler(event, stop),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 15\n    }\n  }))), infoOpen && selectedPlace && /*#__PURE__*/React.createElement(InfoWindow, {\n    anchor: markerMap[selectedPlace.properties.id],\n    onCloseClick: () => setInfoOpen(false),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"h3\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 15\n    }\n  }, \"Stop Number: \", selectedPlace.properties.id), /*#__PURE__*/React.createElement(\"h5\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 15\n    }\n  }, \"Routes: \", selectedPlace.properties.routes.join(\", \"))))));\n} // const renderPage = () => {\n//   return (\n//     <div>\n//       <Locate panTo={panTo} />\n//       <GoogleMap\n//         onLoad={loadHandler}\n//         onCenterChanged={() => setCenter(mapRef.getCenter().toJSON())}\n//         center={center}\n//         zoom={zoom}\n//         maxZoom={13}\n//         options={mapOptions}\n//         // options={{ styles: styles }}\n//         mapContainerStyle={{\n//           height: \"94vh\",\n//         }}\n//       >\n//         <MarkerClusterer options={options}>\n//           {(clusterer) =>\n//             myStops.map((stop) => (\n//               <Marker\n//                 key={stop.properties.id}\n//                 position={stop.geometry.pos}\n//                 clusterer={clusterer}\n//                 onLoad={(marker) => markerLoadHandler(marker, stop)}\n//                 onClick={(event) => markerClickHandler(event, stop)}\n//               />\n//             ))\n//           }\n//         </MarkerClusterer>\n//         {infoOpen && selectedPlace && (\n//           <InfoWindow\n//             anchor={markerMap[selectedPlace.properties.id]}\n//             onCloseClick={() => setInfoOpen(false)}\n//           >\n//             <div>\n//               <h3>Stop Number: {selectedPlace.properties.id}</h3>\n//               <h5>Routes: {selectedPlace.properties.routes.join(\", \")}</h5>\n//             </div>\n//           </InfoWindow>\n//         )}\n//       </GoogleMap>\n//     </div>\n//   );\n// };\n// return isLoaded ? renderPage() : null;\n// }\n\nfunction Locate({\n  panTo\n}) {\n  return /*#__PURE__*/React.createElement(\"button\", {\n    className: \"locate\",\n    onClick: () => {\n      navigator.geolocation.getCurrentPosition(position => {\n        panTo({\n          lat: position.coords.latitude,\n          lng: position.coords.longitude\n        });\n      }, () => null);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 189,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"img\", {\n    src: \"/compass.svg\",\n    alt: \"compass\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 203,\n      columnNumber: 7\n    }\n  }));\n}","map":{"version":3,"sources":["/Users/evanbyrnes/Pycharm-python-workspace/T13_SP/client/src/components/T13GoogleMap.js"],"names":["React","useState","useLoadScript","GoogleMap","Marker","InfoWindow","MarkerClusterer","googleMapApiKey","data","styles","require","options","imagePath","mapOptions","disableDefaultUI","zoomControl","T13GoogleMap","mapRef","setMapRef","selectedPlace","setSelectedPlace","markerMap","setMarkerMap","center","setCenter","lat","lng","zoom","setZoom","infoOpen","setInfoOpen","isLoaded","googleMapsApiKey","fitBounds","map","bounds","window","google","maps","LatLngBounds","myStops","stop","extend","geometry","pos","properties","id","loadHandler","markerLoadHandler","marker","prevState","markerClickHandler","event","place","refoM","useRef","panTo","useCallback","current","getCenter","toJSON","height","clusterer","routes","join","Locate","navigator","geolocation","getCurrentPosition","position","coords","latitude","longitude"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport {\n  useLoadScript,\n  GoogleMap,\n  Marker,\n  InfoWindow,\n  MarkerClusterer,\n} from \"@react-google-maps/api\";\n\nimport googleMapApiKey from \".././config\";\nimport * as data from \".././data/db-stops.json\";\n\n// Import custom styles to customize the style of Google Map\nconst styles = require(\"../data/GoogleMapStyles.json\");\n\nconst options = {\n  imagePath:\n    \"https://developers.google.com/maps/documentation/javascript/examples/markerclusterer/m\",\n};\n\nconst mapOptions = {\n  styles: styles,\n  disableDefaultUI: true,\n  zoomControl: true,\n};\n\nexport default function T13GoogleMap() {\n  // The things we need to track in state\n  const [mapRef, setMapRef] = useState(null);\n  const [selectedPlace, setSelectedPlace] = useState(null);\n  const [markerMap, setMarkerMap] = useState({});\n  // consts: [53.349804, -6.260310] - Dublin\n  const [center, setCenter] = useState({ lat: 53.349804, lng: -6.26031 });\n  const [zoom, setZoom] = useState(11);\n  const [infoOpen, setInfoOpen] = useState(false);\n\n  // Load the Google maps scripts\n  const { isLoaded } = useLoadScript({\n    // Enter your own Google Maps API key in config.js\n    googleMapsApiKey: googleMapApiKey,\n  });\n\n  // Iterate myStops to size, center, and zoom map to contain all markers\n  const fitBounds = (map) => {\n    const bounds = new window.google.maps.LatLngBounds();\n    myStops.map((stop) => {\n      bounds.extend(stop.geometry.pos);\n      return stop.properties.id;\n    });\n    map.fitBounds(bounds);\n  };\n\n  const loadHandler = (map) => {\n    // Store a reference to the google map instance in state\n    setMapRef(map);\n    // Fit map bounds to contain all markers\n    fitBounds(map);\n  };\n\n  // We have to create a mapping of our places to actual Marker objects\n  const markerLoadHandler = (marker, stop) => {\n    return setMarkerMap((prevState) => {\n      return { ...prevState, [stop.properties.id]: marker };\n    });\n  };\n\n  const markerClickHandler = (event, place) => {\n    // Remember which stop was clicked\n    setSelectedPlace(place);\n\n    // Required so clicking a 2nd marker works as expected\n    if (infoOpen) {\n      setInfoOpen(false);\n    }\n\n    setInfoOpen(true);\n\n    // If you want to zoom in a little on marker click\n    if (zoom < 11) {\n      setZoom(11);\n    }\n\n    // if you want to center the selected Marker\n    //setCenter(place.pos)\n  };\n\n  const refoM = React.useRef();\n\n  const panTo = React.useCallback(({ lat, lng }) => {\n    refoM.current.panTo({ lat, lng });\n    refoM.current.setZoom(14);\n  }, []);\n\n  return (\n    <div>\n      <Locate panTo={panTo} />\n      <GoogleMap\n        onLoad={loadHandler}\n        onCenterChanged={() => setCenter(mapRef.getCenter().toJSON())}\n        center={center}\n        zoom={zoom}\n        maxZoom={13}\n        options={mapOptions}\n        // options={{ styles: styles }}\n        mapContainerStyle={{\n          height: \"94vh\",\n        }}\n      >\n        <MarkerClusterer options={options}>\n          {(clusterer) =>\n            myStops.map((stop) => (\n              <Marker\n                key={stop.properties.id}\n                position={stop.geometry.pos}\n                clusterer={clusterer}\n                onLoad={(marker) => markerLoadHandler(marker, stop)}\n                onClick={(event) => markerClickHandler(event, stop)}\n              />\n            ))\n          }\n        </MarkerClusterer>\n\n        {infoOpen && selectedPlace && (\n          <InfoWindow\n            anchor={markerMap[selectedPlace.properties.id]}\n            onCloseClick={() => setInfoOpen(false)}\n          >\n            <div>\n              <h3>Stop Number: {selectedPlace.properties.id}</h3>\n              <h5>Routes: {selectedPlace.properties.routes.join(\", \")}</h5>\n            </div>\n          </InfoWindow>\n        )}\n      </GoogleMap>\n    </div>\n  );\n}\n\n// const renderPage = () => {\n//   return (\n//     <div>\n//       <Locate panTo={panTo} />\n//       <GoogleMap\n//         onLoad={loadHandler}\n//         onCenterChanged={() => setCenter(mapRef.getCenter().toJSON())}\n//         center={center}\n//         zoom={zoom}\n//         maxZoom={13}\n//         options={mapOptions}\n//         // options={{ styles: styles }}\n//         mapContainerStyle={{\n//           height: \"94vh\",\n//         }}\n//       >\n//         <MarkerClusterer options={options}>\n//           {(clusterer) =>\n//             myStops.map((stop) => (\n//               <Marker\n//                 key={stop.properties.id}\n//                 position={stop.geometry.pos}\n//                 clusterer={clusterer}\n//                 onLoad={(marker) => markerLoadHandler(marker, stop)}\n//                 onClick={(event) => markerClickHandler(event, stop)}\n//               />\n//             ))\n//           }\n//         </MarkerClusterer>\n\n//         {infoOpen && selectedPlace && (\n//           <InfoWindow\n//             anchor={markerMap[selectedPlace.properties.id]}\n//             onCloseClick={() => setInfoOpen(false)}\n//           >\n//             <div>\n//               <h3>Stop Number: {selectedPlace.properties.id}</h3>\n//               <h5>Routes: {selectedPlace.properties.routes.join(\", \")}</h5>\n//             </div>\n//           </InfoWindow>\n//         )}\n//       </GoogleMap>\n//     </div>\n//   );\n// };\n// return isLoaded ? renderPage() : null;\n// }\n\nfunction Locate({ panTo }) {\n  return (\n    <button\n      className=\"locate\"\n      onClick={() => {\n        navigator.geolocation.getCurrentPosition(\n          (position) => {\n            panTo({\n              lat: position.coords.latitude,\n              lng: position.coords.longitude,\n            });\n          },\n          () => null\n        );\n      }}\n    >\n      <img src=\"/compass.svg\" alt=\"compass\" />\n    </button>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}