{"ast":null,"code":"var _jsxFileName = \"/Users/evanbyrnes/Pycharm-python-workspace/T13_SP/client/src/components/JourneySearch.js\";\nimport React from \"react\";\nimport usePlacesAutocomplete, { getGeocode } from \"use-places-autocomplete\";\nimport { Combobox, ComboboxInput, ComboboxPopover, ComboboxList, ComboboxOption } from \"@reach/combobox\"; // Generating a Search box with Google Places and Autocomplete.\n// For use in selecting journey origin and destination points.\n\nexport default function JourneySearch({\n  originChoice,\n  destinationChoice,\n  placeholder\n}) {\n  const {\n    ready,\n    value,\n    suggestions: {\n      status,\n      data\n    },\n    setValue,\n    clearSuggestions\n  } = usePlacesAutocomplete({\n    requestOptions: {\n      location: {\n        lat: () => 53,\n        lng: () => -6\n      },\n      radius: 100 * 1000\n    }\n  }); // https://developers.google.com/maps/documentation/javascript/reference/places-autocomplete-service#AutocompletionRequest\n\n  const handleInput = e => {\n    setValue(e.target.value);\n  };\n\n  const handleSelect = async address => {\n    setValue(address, false);\n    clearSuggestions();\n\n    if (String(placeholder) === \"Departure\") {\n      try {\n        const results = await getGeocode({\n          address\n        });\n        console.log(\"first results\", results);\n        originChoice({\n          results\n        });\n      } catch (error) {\n        console.log(\"ðŸ˜± Error: \", error);\n      }\n    } else if (String(placeholder) === \"Arrival\") {\n      try {\n        const results = await getGeocode({\n          address\n        });\n        destinationChoice({\n          results\n        });\n      } catch (error) {\n        console.log(\"ðŸ˜± Error: \", error);\n      }\n    }\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"searchLocations\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Combobox, {\n    onSelect: handleSelect,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(ComboboxInput, {\n    value: value,\n    onChange: handleInput,\n    disabled: !ready,\n    placeholder: placeholder,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(ComboboxPopover, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(ComboboxList, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 11\n    }\n  }, status === \"OK\" && data.map(({\n    id,\n    description\n  }) => /*#__PURE__*/React.createElement(ComboboxOption, {\n    key: id,\n    value: description,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 17\n    }\n  }))))));\n}","map":{"version":3,"sources":["/Users/evanbyrnes/Pycharm-python-workspace/T13_SP/client/src/components/JourneySearch.js"],"names":["React","usePlacesAutocomplete","getGeocode","Combobox","ComboboxInput","ComboboxPopover","ComboboxList","ComboboxOption","JourneySearch","originChoice","destinationChoice","placeholder","ready","value","suggestions","status","data","setValue","clearSuggestions","requestOptions","location","lat","lng","radius","handleInput","e","target","handleSelect","address","String","results","console","log","error","map","id","description"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport usePlacesAutocomplete, { getGeocode } from \"use-places-autocomplete\";\nimport {\n  Combobox,\n  ComboboxInput,\n  ComboboxPopover,\n  ComboboxList,\n  ComboboxOption,\n} from \"@reach/combobox\";\n\n// Generating a Search box with Google Places and Autocomplete.\n// For use in selecting journey origin and destination points.\nexport default function JourneySearch({\n  originChoice,\n  destinationChoice,\n  placeholder,\n}) {\n  const {\n    ready,\n    value,\n    suggestions: { status, data },\n    setValue,\n    clearSuggestions,\n  } = usePlacesAutocomplete({\n    requestOptions: {\n      location: { lat: () => 53, lng: () => -6 },\n      radius: 100 * 1000,\n    },\n  });\n\n  // https://developers.google.com/maps/documentation/javascript/reference/places-autocomplete-service#AutocompletionRequest\n\n  const handleInput = (e) => {\n    setValue(e.target.value);\n  };\n\n  const handleSelect = async (address) => {\n    setValue(address, false);\n    clearSuggestions();\n\n    if (String(placeholder) === \"Departure\") {\n      try {\n        const results = await getGeocode({ address });\n        console.log(\"first results\", results);\n        originChoice({ results });\n      } catch (error) {\n        console.log(\"ðŸ˜± Error: \", error);\n      }\n    } else if (String(placeholder) === \"Arrival\") {\n      try {\n        const results = await getGeocode({ address });\n        destinationChoice({ results });\n      } catch (error) {\n        console.log(\"ðŸ˜± Error: \", error);\n      }\n    }\n  };\n\n  return (\n    <div className=\"searchLocations\">\n      <Combobox onSelect={handleSelect}>\n        <ComboboxInput\n          value={value}\n          onChange={handleInput}\n          disabled={!ready}\n          placeholder={placeholder}\n        />\n        <ComboboxPopover>\n          <ComboboxList>\n            {status === \"OK\" &&\n              data.map(({ id, description }) => (\n                <ComboboxOption key={id} value={description} />\n              ))}\n          </ComboboxList>\n        </ComboboxPopover>\n      </Combobox>\n    </div>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}