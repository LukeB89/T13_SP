{"ast":null,"code":"var _jsxFileName = \"/Users/evanbyrnes/Pycharm-python-workspace/T13_SP/client/src/components/T13GoogleMap.js\";\nimport React, { Component } from \"react\";\nimport { //   useLoadScript,\nGoogleMap, Marker, InfoWindow, MarkerClusterer } from \"@react-google-maps/api\"; // import googleMapApiKey from \"./config\";\n\nconst loadHandler = map => {\n  // Store a reference to the google map instance in state\n  setMapRef(map); // Fit map bounds to contain all markers\n\n  fitBounds(map);\n}; // We have to create a mapping of our places to actual Marker objects\n\n\nconst markerLoadHandler = (marker, stop) => {\n  return setMarkerMap(prevState => {\n    return { ...prevState,\n      [stop.properties.id]: marker\n    };\n  });\n};\n\nconst markerClickHandler = (event, place) => {\n  // Remember which stop was clicked\n  setSelectedPlace(place); // Required so clicking a 2nd marker works as expected\n\n  if (infoOpen) {\n    setInfoOpen(false);\n  }\n\n  setInfoOpen(true); // If you want to zoom in a little on marker click\n\n  if (zoom < 11) {\n    setZoom(11);\n  } // if you want to center the selected Marker\n  //setCenter(place.pos)\n\n};\n\nclass T13GoogleMap extends Component {\n  render() {\n    return /*#__PURE__*/React.createElement(GoogleMap // Do stuff on map initial laod\n    , {\n      onLoad: loadHandler // Save the current center position in state\n      ,\n      onCenterChanged: () => setCenter(mapRef.getCenter().toJSON()) // Save the user's map click position\n      // onClick={e => setClickedLatLng(e.latLng.toJSON())}\n      ,\n      center: center,\n      zoom: zoom,\n      mapContainerStyle: {\n        height: \"94vh\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(MarkerClusterer, {\n      options: options,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 9\n      }\n    }, clusterer => myStops.map(stop => /*#__PURE__*/React.createElement(Marker, {\n      key: stop.properties.id,\n      position: stop.geometry.pos,\n      clusterer: clusterer,\n      onLoad: marker => markerLoadHandler(marker, stop),\n      onClick: event => markerClickHandler(event, stop),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 15\n      }\n    }))), infoOpen && selectedPlace && /*#__PURE__*/React.createElement(InfoWindow, {\n      anchor: markerMap[selectedPlace.properties.id],\n      onCloseClick: () => setInfoOpen(false),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"h3\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 15\n      }\n    }, \"STOPID: \", selectedPlace.properties.id), /*#__PURE__*/React.createElement(\"h5\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 15\n      }\n    }, \"ROUTES: \", selectedPlace.properties.routes.join(\", \")))));\n  }\n\n}\n\nexport default T13GoogleMap;","map":{"version":3,"sources":["/Users/evanbyrnes/Pycharm-python-workspace/T13_SP/client/src/components/T13GoogleMap.js"],"names":["React","Component","GoogleMap","Marker","InfoWindow","MarkerClusterer","loadHandler","map","setMapRef","fitBounds","markerLoadHandler","marker","stop","setMarkerMap","prevState","properties","id","markerClickHandler","event","place","setSelectedPlace","infoOpen","setInfoOpen","zoom","setZoom","T13GoogleMap","render","setCenter","mapRef","getCenter","toJSON","center","height","options","clusterer","myStops","geometry","pos","selectedPlace","markerMap","routes","join"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport {\n  //   useLoadScript,\n  GoogleMap,\n  Marker,\n  InfoWindow,\n  MarkerClusterer,\n} from \"@react-google-maps/api\";\n\n// import googleMapApiKey from \"./config\";\n\nconst loadHandler = (map) => {\n  // Store a reference to the google map instance in state\n  setMapRef(map);\n  // Fit map bounds to contain all markers\n  fitBounds(map);\n};\n\n// We have to create a mapping of our places to actual Marker objects\nconst markerLoadHandler = (marker, stop) => {\n  return setMarkerMap((prevState) => {\n    return { ...prevState, [stop.properties.id]: marker };\n  });\n};\n\nconst markerClickHandler = (event, place) => {\n  // Remember which stop was clicked\n  setSelectedPlace(place);\n\n  // Required so clicking a 2nd marker works as expected\n  if (infoOpen) {\n    setInfoOpen(false);\n  }\n\n  setInfoOpen(true);\n\n  // If you want to zoom in a little on marker click\n  if (zoom < 11) {\n    setZoom(11);\n  }\n\n  // if you want to center the selected Marker\n  //setCenter(place.pos)\n};\n\nclass T13GoogleMap extends Component {\n  render() {\n    return (\n      <GoogleMap\n        // Do stuff on map initial laod\n        onLoad={loadHandler}\n        // Save the current center position in state\n        onCenterChanged={() => setCenter(mapRef.getCenter().toJSON())}\n        // Save the user's map click position\n        // onClick={e => setClickedLatLng(e.latLng.toJSON())}\n        center={center}\n        zoom={zoom}\n        mapContainerStyle={{\n          height: \"94vh\",\n        }}\n      >\n        <MarkerClusterer options={options}>\n          {(clusterer) =>\n            myStops.map((stop) => (\n              <Marker\n                key={stop.properties.id}\n                position={stop.geometry.pos}\n                clusterer={clusterer}\n                onLoad={(marker) => markerLoadHandler(marker, stop)}\n                onClick={(event) => markerClickHandler(event, stop)}\n              />\n            ))\n          }\n        </MarkerClusterer>\n\n        {infoOpen && selectedPlace && (\n          <InfoWindow\n            anchor={markerMap[selectedPlace.properties.id]}\n            onCloseClick={() => setInfoOpen(false)}\n          >\n            <div>\n              <h3>STOPID: {selectedPlace.properties.id}</h3>\n              <h5>ROUTES: {selectedPlace.properties.routes.join(\", \")}</h5>\n              {/* <div>This is your info window content</div> */}\n            </div>\n          </InfoWindow>\n        )}\n      </GoogleMap>\n    );\n  }\n}\n\nexport default T13GoogleMap;\n"]},"metadata":{},"sourceType":"module"}