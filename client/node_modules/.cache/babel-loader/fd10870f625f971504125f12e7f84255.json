{"ast":null,"code":"var _jsxFileName = \"/Users/evanbyrnes/Pycharm-python-workspace/T13_SP/client/src/components/Directions.js\";\n\n/*global google*/\nimport React, { Component } from \"react\";\nimport { DirectionsRenderer } from \"@react-google-maps/api\";\nimport usePlacesAutocomplete, { getGeocode, getLatLng } from \"use-places-autocomplete\";\nimport { Combobox, ComboboxInput, ComboboxPopover, ComboboxList, ComboboxOption } from \"@reach/combobox\";\nimport * as data from \".././data/db-stops.json\";\nconst rawData = data.results;\n\nclass Directions extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      directions: null,\n      selected: []\n    };\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 28,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(Search, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(DirectionsRenderer, {\n      directions: this.state.directions,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 9\n      }\n    }));\n  }\n\n  componentDidMount() {\n    const directionsService = new google.maps.DirectionsService(); // we want to make these variable values, to be able to\n    // pass this information from what has been selected above.\n\n    const origin = {\n      lat: 53.3472419444,\n      lng: -6.2587911111\n    };\n    const destination = {\n      lat: 53.3466669444,\n      lng: -6.258325\n    };\n    directionsService.route({\n      origin: origin,\n      destination: destination,\n      travelMode: google.maps.TravelMode.WALKING\n    }, (result, status) => {\n      if (status === google.maps.DirectionsStatus.OK) {\n        this.setState({\n          directions: result\n        });\n      } else {\n        console.error(`error fetching directions ${result}`);\n      }\n    });\n  }\n\n}\n\nexport default Directions;\n\nfunction Search() {\n  const {\n    ready,\n    value,\n    suggestions: {\n      status,\n      data\n    },\n    setValue,\n    clearSuggestions\n  } = usePlacesAutocomplete({\n    requestOptions: {\n      location: {\n        lat: () => 53.349804,\n        lng: () => -6.26031\n      },\n      radius: 10 * 1000\n    }\n  });\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"search\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Combobox, {\n    onSelect: address => {\n      console.log(address);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(ComboboxInput, {\n    value: value,\n    console: console.log(value),\n    onChange: e => {\n      setValue(e.target.value);\n    },\n    disabled: !ready,\n    placeholder: \"Enter an address\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(ComboboxPopover, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(ComboboxList, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 11\n    }\n  }, status === \"OK\" && data.map(({\n    id,\n    description\n  }) => /*#__PURE__*/React.createElement(ComboboxOption, {\n    key: id,\n    value: description,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 17\n    }\n  }))))));\n} // function that uses the mystops data in the same\n// way that the Search function above uses the usePlacesAutocomplete\n\n\nfunction altSearch() {\n  // need to store the geo data here\n  const nameOfStops = rawData.map(stop => ({\n    description: \"Stop \" + stop.stopid + \", \" + stop.fullname,\n    id: parseInt(stop.stopid),\n    geometry: {\n      type: \"Point\",\n      pos: {\n        lat: parseFloat(stop.latitude),\n        lng: parseFloat(stop.longitude)\n      }\n    }\n  }));\n  console.log(nameOfStops); // return (\n  //   <div className=\"search\">\n  //     <Combobox\n  //       onSelect={(address) => {\n  //         console.log(address);\n  //       }}\n  //     >\n  //       <ComboboxInput\n  //         value={value}\n  //         onChange={(e) => {\n  //           setValue(e.target.value);\n  //         }}\n  //         disabled={!ready}\n  //         placeholder=\"Enter an address\"\n  //       />\n  //       <ComboboxPopover>\n  //         <ComboboxList>\n  //           {status === \"OK\" &&\n  //             nameOfStops.map(({ id, description }) => (\n  //               <ComboboxOption key={id} value={description} />\n  //             ))}\n  //         </ComboboxList>\n  //       </ComboboxPopover>\n  //     </Combobox>\n  //   </div>\n  // );\n}","map":{"version":3,"sources":["/Users/evanbyrnes/Pycharm-python-workspace/T13_SP/client/src/components/Directions.js"],"names":["React","Component","DirectionsRenderer","usePlacesAutocomplete","getGeocode","getLatLng","Combobox","ComboboxInput","ComboboxPopover","ComboboxList","ComboboxOption","data","rawData","results","Directions","state","directions","selected","render","componentDidMount","directionsService","google","maps","DirectionsService","origin","lat","lng","destination","route","travelMode","TravelMode","WALKING","result","status","DirectionsStatus","OK","setState","console","error","Search","ready","value","suggestions","setValue","clearSuggestions","requestOptions","location","radius","address","log","e","target","map","id","description","altSearch","nameOfStops","stop","stopid","fullname","parseInt","geometry","type","pos","parseFloat","latitude","longitude"],"mappings":"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","sourcesContent":["/*global google*/\nimport React, { Component } from \"react\";\nimport { DirectionsRenderer } from \"@react-google-maps/api\";\nimport usePlacesAutocomplete, {\n  getGeocode,\n  getLatLng,\n} from \"use-places-autocomplete\";\nimport {\n  Combobox,\n  ComboboxInput,\n  ComboboxPopover,\n  ComboboxList,\n  ComboboxOption,\n} from \"@reach/combobox\";\n\nimport * as data from \".././data/db-stops.json\";\n\nconst rawData = data.results;\n\nclass Directions extends Component {\n  state = {\n    directions: null,\n    selected: [],\n  };\n\n  render() {\n    return (\n      <div>\n        <Search />\n        <DirectionsRenderer directions={this.state.directions} />\n      </div>\n    );\n  }\n\n  componentDidMount() {\n    const directionsService = new google.maps.DirectionsService();\n\n    // we want to make these variable values, to be able to\n    // pass this information from what has been selected above.\n    const origin = { lat: 53.3472419444, lng: -6.2587911111 };\n    const destination = { lat: 53.3466669444, lng: -6.258325 };\n\n    directionsService.route(\n      {\n        origin: origin,\n        destination: destination,\n        travelMode: google.maps.TravelMode.WALKING,\n      },\n      (result, status) => {\n        if (status === google.maps.DirectionsStatus.OK) {\n          this.setState({\n            directions: result,\n          });\n        } else {\n          console.error(`error fetching directions ${result}`);\n        }\n      }\n    );\n  }\n}\n\nexport default Directions;\n\nfunction Search() {\n  const {\n    ready,\n    value,\n    suggestions: { status, data },\n    setValue,\n    clearSuggestions,\n  } = usePlacesAutocomplete({\n    requestOptions: {\n      location: { lat: () => 53.349804, lng: () => -6.26031 },\n      radius: 10 * 1000,\n    },\n  });\n\n  return (\n    <div className=\"search\">\n      <Combobox\n        onSelect={(address) => {\n          console.log(address);\n        }}\n      >\n        <ComboboxInput\n          value={value}\n          console={console.log(value)}\n          onChange={(e) => {\n            setValue(e.target.value);\n          }}\n          disabled={!ready}\n          placeholder=\"Enter an address\"\n        />\n        <ComboboxPopover>\n          <ComboboxList>\n            {status === \"OK\" &&\n              data.map(({ id, description }) => (\n                <ComboboxOption key={id} value={description} />\n              ))}\n          </ComboboxList>\n        </ComboboxPopover>\n      </Combobox>\n    </div>\n  );\n}\n\n// function that uses the mystops data in the same\n// way that the Search function above uses the usePlacesAutocomplete\nfunction altSearch() {\n  // need to store the geo data here\n  const nameOfStops = rawData.map((stop) => ({\n    description: \"Stop \" + stop.stopid + \", \" + stop.fullname,\n    id: parseInt(stop.stopid),\n    geometry: {\n      type: \"Point\",\n      pos: {\n        lat: parseFloat(stop.latitude),\n        lng: parseFloat(stop.longitude),\n      },\n    },\n  }));\n\n  console.log(nameOfStops);\n  // return (\n  //   <div className=\"search\">\n  //     <Combobox\n  //       onSelect={(address) => {\n  //         console.log(address);\n  //       }}\n  //     >\n  //       <ComboboxInput\n  //         value={value}\n  //         onChange={(e) => {\n  //           setValue(e.target.value);\n  //         }}\n  //         disabled={!ready}\n  //         placeholder=\"Enter an address\"\n  //       />\n  //       <ComboboxPopover>\n  //         <ComboboxList>\n  //           {status === \"OK\" &&\n  //             nameOfStops.map(({ id, description }) => (\n  //               <ComboboxOption key={id} value={description} />\n  //             ))}\n  //         </ComboboxList>\n  //       </ComboboxPopover>\n  //     </Combobox>\n  //   </div>\n  // );\n}\n"]},"metadata":{},"sourceType":"module"}