{"ast":null,"code":"var _jsxFileName = \"/Users/evanbyrnes/Pycharm-python-workspace/T13_SP/client/src/components/StopsJourneySearch.js\";\nimport React from \"react\";\nimport usePlacesAutocomplete, { getGeocode } from \"use-places-autocomplete\";\nimport { Combobox, ComboboxInput, ComboboxPopover, ComboboxList, ComboboxOption } from \"@reach/combobox\"; // Generating a Search box with Google Places and Autocomplete.\n// For use in selecting journey origin and destination points.\n\nexport default function StopsJourneySearch({\n  originChoice,\n  destinationChoice,\n  placeholder,\n  parsedStops\n}) {\n  const {\n    ready,\n    value,\n    suggestions: {\n      status,\n      data\n    },\n    setValue,\n    clearSuggestions\n  } = usePlacesAutocomplete({\n    requestOptions: {\n      location: {\n        lat: () => 53,\n        lng: () => -6\n      },\n      radius: 100 * 1000\n    }\n  });\n\n  const dir1Nums46a = require(\"../data/46A_dir1_stops.json\");\n\n  const dir1Stops46a = [];\n\n  for (var q = 0; q < parsedStops.length; q++) {\n    for (var r = 0; r < dir1Nums46a.length; r++) {\n      if (dir1Nums46a[r] == parseInt(parsedStops[q].id)) {\n        dir1Stops46a.push(parsedStops[q].description);\n      }\n    }\n  } // https://developers.google.com/maps/documentation/javascript/reference/places-autocomplete-service#AutocompletionRequest\n\n\n  const handleInput = e => {\n    setValue(e.target.value);\n  };\n\n  const handleSelect = async address => {\n    setValue(address, false);\n    clearSuggestions();\n\n    if (String(placeholder) === \"Departure\") {\n      try {\n        console.log(address);\n        const results = await getGeocode({\n          address\n        });\n        console.log(\"first results\", results);\n        originChoice({\n          results\n        });\n      } catch (error) {\n        console.log(\"ðŸ˜± Error: \", error);\n      }\n    } else if (String(placeholder) === \"Arrival\") {\n      try {\n        const results = await getGeocode({\n          address\n        });\n        destinationChoice({\n          results\n        });\n      } catch (error) {\n        console.log(\"ðŸ˜± Error: \", error);\n      }\n    }\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"searchLocations\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Combobox, {\n    onSelect: handleSelect,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(ComboboxInput, {\n    value: value,\n    onChange: handleInput,\n    disabled: !ready,\n    placeholder: placeholder,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(ComboboxPopover, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(ComboboxList, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 11\n    }\n  }, parsedStops.map(({\n    id,\n    description\n  }) => /*#__PURE__*/React.createElement(ComboboxOption, {\n    key: id,\n    value: description,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 15\n    }\n  }))))));\n}","map":{"version":3,"sources":["/Users/evanbyrnes/Pycharm-python-workspace/T13_SP/client/src/components/StopsJourneySearch.js"],"names":["React","usePlacesAutocomplete","getGeocode","Combobox","ComboboxInput","ComboboxPopover","ComboboxList","ComboboxOption","StopsJourneySearch","originChoice","destinationChoice","placeholder","parsedStops","ready","value","suggestions","status","data","setValue","clearSuggestions","requestOptions","location","lat","lng","radius","dir1Nums46a","require","dir1Stops46a","q","length","r","parseInt","id","push","description","handleInput","e","target","handleSelect","address","String","console","log","results","error","map"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,qBAAP,IAAgCC,UAAhC,QAAkD,yBAAlD;AACA,SACEC,QADF,EAEEC,aAFF,EAGEC,eAHF,EAIEC,YAJF,EAKEC,cALF,QAMO,iBANP,C,CAQA;AACA;;AACA,eAAe,SAASC,kBAAT,CAA4B;AACzCC,EAAAA,YADyC;AAEzCC,EAAAA,iBAFyC;AAGzCC,EAAAA,WAHyC;AAIzCC,EAAAA;AAJyC,CAA5B,EAKZ;AACD,QAAM;AACJC,IAAAA,KADI;AAEJC,IAAAA,KAFI;AAGJC,IAAAA,WAAW,EAAE;AAAEC,MAAAA,MAAF;AAAUC,MAAAA;AAAV,KAHT;AAIJC,IAAAA,QAJI;AAKJC,IAAAA;AALI,MAMFlB,qBAAqB,CAAC;AACxBmB,IAAAA,cAAc,EAAE;AACdC,MAAAA,QAAQ,EAAE;AAAEC,QAAAA,GAAG,EAAE,MAAM,EAAb;AAAiBC,QAAAA,GAAG,EAAE,MAAM,CAAC;AAA7B,OADI;AAEdC,MAAAA,MAAM,EAAE,MAAM;AAFA;AADQ,GAAD,CANzB;;AAaA,QAAMC,WAAW,GAAGC,OAAO,CAAC,6BAAD,CAA3B;;AACA,QAAMC,YAAY,GAAG,EAArB;;AAEA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGhB,WAAW,CAACiB,MAAhC,EAAwCD,CAAC,EAAzC,EAA6C;AAC3C,SAAK,IAAIE,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGL,WAAW,CAACI,MAAhC,EAAwCC,CAAC,EAAzC,EAA6C;AAC3C,UAAIL,WAAW,CAACK,CAAD,CAAX,IAAkBC,QAAQ,CAACnB,WAAW,CAACgB,CAAD,CAAX,CAAeI,EAAhB,CAA9B,EAAmD;AACjDL,QAAAA,YAAY,CAACM,IAAb,CAAkBrB,WAAW,CAACgB,CAAD,CAAX,CAAeM,WAAjC;AACD;AACF;AACF,GAvBA,CAyBD;;;AAEA,QAAMC,WAAW,GAAIC,CAAD,IAAO;AACzBlB,IAAAA,QAAQ,CAACkB,CAAC,CAACC,MAAF,CAASvB,KAAV,CAAR;AACD,GAFD;;AAIA,QAAMwB,YAAY,GAAG,MAAOC,OAAP,IAAmB;AACtCrB,IAAAA,QAAQ,CAACqB,OAAD,EAAU,KAAV,CAAR;AACApB,IAAAA,gBAAgB;;AAEhB,QAAIqB,MAAM,CAAC7B,WAAD,CAAN,KAAwB,WAA5B,EAAyC;AACvC,UAAI;AACF8B,QAAAA,OAAO,CAACC,GAAR,CAAYH,OAAZ;AACA,cAAMI,OAAO,GAAG,MAAMzC,UAAU,CAAC;AAAEqC,UAAAA;AAAF,SAAD,CAAhC;AACAE,QAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ,EAA6BC,OAA7B;AACAlC,QAAAA,YAAY,CAAC;AAAEkC,UAAAA;AAAF,SAAD,CAAZ;AACD,OALD,CAKE,OAAOC,KAAP,EAAc;AACdH,QAAAA,OAAO,CAACC,GAAR,CAAY,YAAZ,EAA0BE,KAA1B;AACD;AACF,KATD,MASO,IAAIJ,MAAM,CAAC7B,WAAD,CAAN,KAAwB,SAA5B,EAAuC;AAC5C,UAAI;AACF,cAAMgC,OAAO,GAAG,MAAMzC,UAAU,CAAC;AAAEqC,UAAAA;AAAF,SAAD,CAAhC;AACA7B,QAAAA,iBAAiB,CAAC;AAAEiC,UAAAA;AAAF,SAAD,CAAjB;AACD,OAHD,CAGE,OAAOC,KAAP,EAAc;AACdH,QAAAA,OAAO,CAACC,GAAR,CAAY,YAAZ,EAA0BE,KAA1B;AACD;AACF;AACF,GArBD;;AAuBA,sBACE;AAAK,IAAA,SAAS,EAAC,iBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,QAAD;AAAU,IAAA,QAAQ,EAAEN,YAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,aAAD;AACE,IAAA,KAAK,EAAExB,KADT;AAEE,IAAA,QAAQ,EAAEqB,WAFZ;AAGE,IAAA,QAAQ,EAAE,CAACtB,KAHb;AAIE,IAAA,WAAW,EAAEF,WAJf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,eAOE,oBAAC,eAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,YAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGC,WAAW,CAACiC,GAAZ,CAAgB,CAAC;AAAEb,IAAAA,EAAF;AAAME,IAAAA;AAAN,GAAD,kBACf,oBAAC,cAAD;AAAgB,IAAA,GAAG,EAAEF,EAArB;AAAyB,IAAA,KAAK,EAAEE,WAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADD,CADH,CADF,CAPF,CADF,CADF;AAmBD","sourcesContent":["import React from \"react\";\nimport usePlacesAutocomplete, { getGeocode } from \"use-places-autocomplete\";\nimport {\n  Combobox,\n  ComboboxInput,\n  ComboboxPopover,\n  ComboboxList,\n  ComboboxOption,\n} from \"@reach/combobox\";\n\n// Generating a Search box with Google Places and Autocomplete.\n// For use in selecting journey origin and destination points.\nexport default function StopsJourneySearch({\n  originChoice,\n  destinationChoice,\n  placeholder,\n  parsedStops,\n}) {\n  const {\n    ready,\n    value,\n    suggestions: { status, data },\n    setValue,\n    clearSuggestions,\n  } = usePlacesAutocomplete({\n    requestOptions: {\n      location: { lat: () => 53, lng: () => -6 },\n      radius: 100 * 1000,\n    },\n  });\n\n  const dir1Nums46a = require(\"../data/46A_dir1_stops.json\");\n  const dir1Stops46a = [];\n\n  for (var q = 0; q < parsedStops.length; q++) {\n    for (var r = 0; r < dir1Nums46a.length; r++) {\n      if (dir1Nums46a[r] == parseInt(parsedStops[q].id)) {\n        dir1Stops46a.push(parsedStops[q].description);\n      }\n    }\n  }\n\n  // https://developers.google.com/maps/documentation/javascript/reference/places-autocomplete-service#AutocompletionRequest\n\n  const handleInput = (e) => {\n    setValue(e.target.value);\n  };\n\n  const handleSelect = async (address) => {\n    setValue(address, false);\n    clearSuggestions();\n\n    if (String(placeholder) === \"Departure\") {\n      try {\n        console.log(address);\n        const results = await getGeocode({ address });\n        console.log(\"first results\", results);\n        originChoice({ results });\n      } catch (error) {\n        console.log(\"ðŸ˜± Error: \", error);\n      }\n    } else if (String(placeholder) === \"Arrival\") {\n      try {\n        const results = await getGeocode({ address });\n        destinationChoice({ results });\n      } catch (error) {\n        console.log(\"ðŸ˜± Error: \", error);\n      }\n    }\n  };\n\n  return (\n    <div className=\"searchLocations\">\n      <Combobox onSelect={handleSelect}>\n        <ComboboxInput\n          value={value}\n          onChange={handleInput}\n          disabled={!ready}\n          placeholder={placeholder}\n        />\n        <ComboboxPopover>\n          <ComboboxList>\n            {parsedStops.map(({ id, description }) => (\n              <ComboboxOption key={id} value={description} />\n            ))}\n          </ComboboxList>\n        </ComboboxPopover>\n      </Combobox>\n    </div>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}