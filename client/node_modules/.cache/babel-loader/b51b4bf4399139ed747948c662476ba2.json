{"ast":null,"code":"var _jsxFileName = \"/Users/evanbyrnes/Pycharm-python-workspace/T13_SP/client/src/components/PredictionInput.js\";\nimport React from \"react\";\nimport DatePicker from \"react-datepicker\";\nimport { Typeahead } from \"react-bootstrap-typeahead\";\nimport Form from \"react-bootstrap/Form\";\nimport ModelApi from \"./ModelApi\";\nimport \"react-datepicker/dist/react-datepicker.css\";\nimport \".././styles.css\"; // Importing the Dublin Bus API stops data\n\nconst dir1Nums46a = require(\"../data/46A_dir1_stops.json\");\n\nconst dir1Stops46a = [];\n\nfor (var i = 0; i < dir1Nums46a.length; i++) {\n  if (parseInt(dir1Nums46a[i]) === parsedStops[i].id) {\n    console.log(dir1Nums46a[i]);\n    console.log(parsedStops[i].id);\n  }\n}\n\nconst PredictionInput = (props, {\n  parsedStops\n}) => {\n  return /*#__PURE__*/React.createElement(Form, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Form.Group, {\n    controlId: \"formTimeOfTravel\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Form.Label, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 9\n    }\n  }, \"Time of Travel: \"), /*#__PURE__*/React.createElement(DatePicker, {\n    selected: props.selectedTime // onSelect={props.timeChoice}\n    ,\n    onChange: props.timeChoice // Problem here!: if using onSelect, the time value isn't picked up\n    // using onChange means there's a click delay in the values being set.\n    ,\n    showTimeSelect: true,\n    timeFormat: \"HH:mm\",\n    timeIntervals: 60,\n    timeCaption: \"time\",\n    dateFormat: \"MMMM d, yyyy h:mm aa\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(Form.Label, {\n    style: {\n      paddingTop: \"1vh\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 9\n    }\n  }, \"Route: 46A\"), /*#__PURE__*/React.createElement(Typeahead, {\n    id: \"basic-example\",\n    options: props.stopDescriptions,\n    maxVisible: 2,\n    placeholder: \"Choose a stop to locate on map...\",\n    onChange: address => {\n      try {\n        for (var i = 0; i < parsedStops.length; i++) {\n          if (String(address) === parsedStops[i].description) {\n            const lat = parsedStops[i].geometry.lat;\n            const lng = parsedStops[i].geometry.lng;\n            const id = parsedStops[i].id;\n            props.panTo({\n              lat,\n              lng\n            });\n            props.stopChoice({\n              id\n            });\n          }\n        }\n      } catch (error) {\n        console.log(\"ðŸ˜± Error: \", error);\n      }\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 9\n    }\n  })), /*#__PURE__*/React.createElement(ModelApi, {\n    timeDayMonth: props.timeDayMonth,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }\n  }));\n};\n\nexport default PredictionInput; // // Generate a Typeahead search box that includes all of the stops.\n// // Choosing a stop will adjust the map to that stops location and place a red marker.\n// export default function StopSearch({\n//   panTo,\n//   stopChoice,\n//   stopDescriptions,\n//   parsedStops,\n// }) {\n//   return (\n//     <div>\n//       <Typeahead\n//         id=\"basic-example\"\n//         options={stopDescriptions}\n//         maxVisible={2}\n//         placeholder=\"Choose a stop to locate on map...\"\n//         onChange={(address) => {\n//           try {\n//             for (var i = 0; i < parsedStops.length; i++) {\n//               if (String(address) === parsedStops[i].description) {\n//                 const lat = parsedStops[i].geometry.lat;\n//                 const lng = parsedStops[i].geometry.lng;\n//                 const id = parsedStops[i].id;\n//                 panTo({ lat, lng });\n//                 stopChoice({ id });\n//               }\n//             }\n//           } catch (error) {\n//             console.log(\"ðŸ˜± Error: \", error);\n//           }\n//         }}\n//       />\n//     </div>\n//   );\n// }","map":{"version":3,"sources":["/Users/evanbyrnes/Pycharm-python-workspace/T13_SP/client/src/components/PredictionInput.js"],"names":["React","DatePicker","Typeahead","Form","ModelApi","dir1Nums46a","require","dir1Stops46a","i","length","parseInt","parsedStops","id","console","log","PredictionInput","props","selectedTime","timeChoice","paddingTop","stopDescriptions","address","String","description","lat","geometry","lng","panTo","stopChoice","error","timeDayMonth"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport DatePicker from \"react-datepicker\";\nimport { Typeahead } from \"react-bootstrap-typeahead\";\nimport Form from \"react-bootstrap/Form\";\nimport ModelApi from \"./ModelApi\";\n\nimport \"react-datepicker/dist/react-datepicker.css\";\nimport \".././styles.css\";\n\n// Importing the Dublin Bus API stops data\nconst dir1Nums46a = require(\"../data/46A_dir1_stops.json\");\nconst dir1Stops46a = [];\nfor (var i = 0; i < dir1Nums46a.length; i++) {\n  if (parseInt(dir1Nums46a[i]) === parsedStops[i].id) {\n    console.log(dir1Nums46a[i]);\n    console.log(parsedStops[i].id);\n  }\n}\n\nconst PredictionInput = (props, { parsedStops }) => {\n  return (\n    <Form>\n      <Form.Group controlId=\"formTimeOfTravel\">\n        <Form.Label>Time of Travel: </Form.Label>\n        <DatePicker\n          selected={props.selectedTime}\n          // onSelect={props.timeChoice}\n          onChange={props.timeChoice}\n          // Problem here!: if using onSelect, the time value isn't picked up\n          // using onChange means there's a click delay in the values being set.\n          showTimeSelect\n          timeFormat=\"HH:mm\"\n          timeIntervals={60}\n          timeCaption=\"time\"\n          dateFormat=\"MMMM d, yyyy h:mm aa\"\n        />\n        <Form.Label style={{ paddingTop: \"1vh\" }}>Route: 46A</Form.Label>\n        <Typeahead\n          id=\"basic-example\"\n          options={props.stopDescriptions}\n          maxVisible={2}\n          placeholder=\"Choose a stop to locate on map...\"\n          onChange={(address) => {\n            try {\n              for (var i = 0; i < parsedStops.length; i++) {\n                if (String(address) === parsedStops[i].description) {\n                  const lat = parsedStops[i].geometry.lat;\n                  const lng = parsedStops[i].geometry.lng;\n                  const id = parsedStops[i].id;\n                  props.panTo({ lat, lng });\n                  props.stopChoice({ id });\n                }\n              }\n            } catch (error) {\n              console.log(\"ðŸ˜± Error: \", error);\n            }\n          }}\n        />\n      </Form.Group>\n      <ModelApi timeDayMonth={props.timeDayMonth}></ModelApi>\n    </Form>\n  );\n};\n\nexport default PredictionInput;\n\n// // Generate a Typeahead search box that includes all of the stops.\n// // Choosing a stop will adjust the map to that stops location and place a red marker.\n// export default function StopSearch({\n//   panTo,\n//   stopChoice,\n//   stopDescriptions,\n//   parsedStops,\n// }) {\n//   return (\n//     <div>\n//       <Typeahead\n//         id=\"basic-example\"\n//         options={stopDescriptions}\n//         maxVisible={2}\n//         placeholder=\"Choose a stop to locate on map...\"\n//         onChange={(address) => {\n//           try {\n//             for (var i = 0; i < parsedStops.length; i++) {\n//               if (String(address) === parsedStops[i].description) {\n//                 const lat = parsedStops[i].geometry.lat;\n//                 const lng = parsedStops[i].geometry.lng;\n//                 const id = parsedStops[i].id;\n//                 panTo({ lat, lng });\n//                 stopChoice({ id });\n//               }\n//             }\n//           } catch (error) {\n//             console.log(\"ðŸ˜± Error: \", error);\n//           }\n//         }}\n//       />\n//     </div>\n//   );\n// }\n"]},"metadata":{},"sourceType":"module"}