{"ast":null,"code":"var _jsxFileName = \"/Users/evanbyrnes/Pycharm-python-workspace/T13_SP/client/src/components/PredictionInput.js\";\nimport React from \"react\";\nimport DatePicker from \"react-datepicker\";\nimport { Typeahead } from \"react-bootstrap-typeahead\";\nimport Form from \"react-bootstrap/Form\";\nimport ModelApi from \"./ModelApi\";\nimport \"react-datepicker/dist/react-datepicker.css\";\nimport \".././styles.css\";\n\nconst PredictionInput = (props, {\n  parsedStops\n}) => {\n  // Importing the Dublin Bus API stops data\n  const dir1Nums46a = require(\"../data/46A_dir1_stops.json\");\n\n  const dir1Stops46a = [];\n\n  try {\n    for (var i = 0; i < parsedStops.length; i++) {\n      if (String(address) === parsedStops[i].description) {\n        const lat = parsedStops[i].geometry.lat;\n        const lng = parsedStops[i].geometry.lng;\n        const id = parsedStops[i].id;\n        props.panTo({\n          lat,\n          lng\n        });\n        props.stopChoice({\n          id\n        });\n      }\n    }\n  } catch (error) {\n    console.log(\"ðŸ˜± Error: \", error);\n  }\n\n  for (var i = 0; i < props.parsedStops.length; i++) {\n    // console.log(\"hey\", parseInt(props.parsedStops[i].id));\n    // console.log(\"you\", dir1Nums46a[i]);\n    if (parseInt(props.parsedStops[i].id) === dir1Nums46a[i]) {\n      console.log(\"pass\");\n    }\n  }\n\n  return /*#__PURE__*/React.createElement(Form, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Form.Group, {\n    controlId: \"formTimeOfTravel\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Form.Label, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 9\n    }\n  }, \"Time of Travel: \"), /*#__PURE__*/React.createElement(DatePicker, {\n    selected: props.selectedTime // onSelect={props.timeChoice}\n    ,\n    onChange: props.timeChoice // Problem here!: if using onSelect, the time value isn't picked up\n    // using onChange means there's a click delay in the values being set.\n    ,\n    showTimeSelect: true,\n    timeFormat: \"HH:mm\",\n    timeIntervals: 60,\n    timeCaption: \"time\",\n    dateFormat: \"MMMM d, yyyy h:mm aa\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(Form.Label, {\n    style: {\n      paddingTop: \"1vh\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 9\n    }\n  }, \"Route: 46A\"), /*#__PURE__*/React.createElement(Typeahead, {\n    id: \"basic-example\",\n    options: props.stopDescriptions,\n    maxVisible: 2,\n    placeholder: \"Choose a stop to locate on map...\",\n    onChange: address => {\n      try {\n        for (var i = 0; i < parsedStops.length; i++) {\n          if (String(address) === parsedStops[i].description) {\n            const lat = parsedStops[i].geometry.lat;\n            const lng = parsedStops[i].geometry.lng;\n            const id = parsedStops[i].id;\n            props.panTo({\n              lat,\n              lng\n            });\n            props.stopChoice({\n              id\n            });\n          }\n        }\n      } catch (error) {\n        console.log(\"ðŸ˜± Error: \", error);\n      }\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 9\n    }\n  })), /*#__PURE__*/React.createElement(ModelApi, {\n    timeDayMonth: props.timeDayMonth,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 7\n    }\n  }));\n};\n\nexport default PredictionInput; // // Generate a Typeahead search box that includes all of the stops.\n// // Choosing a stop will adjust the map to that stops location and place a red marker.\n// export default function StopSearch({\n//   panTo,\n//   stopChoice,\n//   stopDescriptions,\n//   parsedStops,\n// }) {\n//   return (\n//     <div>\n//       <Typeahead\n//         id=\"basic-example\"\n//         options={stopDescriptions}\n//         maxVisible={2}\n//         placeholder=\"Choose a stop to locate on map...\"\n//         onChange={(address) => {\n//           try {\n//             for (var i = 0; i < parsedStops.length; i++) {\n//               if (String(address) === parsedStops[i].description) {\n//                 const lat = parsedStops[i].geometry.lat;\n//                 const lng = parsedStops[i].geometry.lng;\n//                 const id = parsedStops[i].id;\n//                 panTo({ lat, lng });\n//                 stopChoice({ id });\n//               }\n//             }\n//           } catch (error) {\n//             console.log(\"ðŸ˜± Error: \", error);\n//           }\n//         }}\n//       />\n//     </div>\n//   );\n// }","map":{"version":3,"sources":["/Users/evanbyrnes/Pycharm-python-workspace/T13_SP/client/src/components/PredictionInput.js"],"names":["React","DatePicker","Typeahead","Form","ModelApi","PredictionInput","props","parsedStops","dir1Nums46a","require","dir1Stops46a","i","length","String","address","description","lat","geometry","lng","id","panTo","stopChoice","error","console","log","parseInt","selectedTime","timeChoice","paddingTop","stopDescriptions","timeDayMonth"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport DatePicker from \"react-datepicker\";\nimport { Typeahead } from \"react-bootstrap-typeahead\";\nimport Form from \"react-bootstrap/Form\";\nimport ModelApi from \"./ModelApi\";\n\nimport \"react-datepicker/dist/react-datepicker.css\";\nimport \".././styles.css\";\n\nconst PredictionInput = (props, { parsedStops }) => {\n  // Importing the Dublin Bus API stops data\n  const dir1Nums46a = require(\"../data/46A_dir1_stops.json\");\n  const dir1Stops46a = [];\n\n  try {\n    for (var i = 0; i < parsedStops.length; i++) {\n      if (String(address) === parsedStops[i].description) {\n        const lat = parsedStops[i].geometry.lat;\n        const lng = parsedStops[i].geometry.lng;\n        const id = parsedStops[i].id;\n        props.panTo({ lat, lng });\n        props.stopChoice({ id });\n      }\n    }\n  } catch (error) {\n    console.log(\"ðŸ˜± Error: \", error);\n  }\n\n  for (var i = 0; i < props.parsedStops.length; i++) {\n    // console.log(\"hey\", parseInt(props.parsedStops[i].id));\n    // console.log(\"you\", dir1Nums46a[i]);\n    if (parseInt(props.parsedStops[i].id) === dir1Nums46a[i]) {\n      console.log(\"pass\");\n    }\n  }\n  return (\n    <Form>\n      <Form.Group controlId=\"formTimeOfTravel\">\n        <Form.Label>Time of Travel: </Form.Label>\n        <DatePicker\n          selected={props.selectedTime}\n          // onSelect={props.timeChoice}\n          onChange={props.timeChoice}\n          // Problem here!: if using onSelect, the time value isn't picked up\n          // using onChange means there's a click delay in the values being set.\n          showTimeSelect\n          timeFormat=\"HH:mm\"\n          timeIntervals={60}\n          timeCaption=\"time\"\n          dateFormat=\"MMMM d, yyyy h:mm aa\"\n        />\n        <Form.Label style={{ paddingTop: \"1vh\" }}>Route: 46A</Form.Label>\n        <Typeahead\n          id=\"basic-example\"\n          options={props.stopDescriptions}\n          maxVisible={2}\n          placeholder=\"Choose a stop to locate on map...\"\n          onChange={(address) => {\n            try {\n              for (var i = 0; i < parsedStops.length; i++) {\n                if (String(address) === parsedStops[i].description) {\n                  const lat = parsedStops[i].geometry.lat;\n                  const lng = parsedStops[i].geometry.lng;\n                  const id = parsedStops[i].id;\n                  props.panTo({ lat, lng });\n                  props.stopChoice({ id });\n                }\n              }\n            } catch (error) {\n              console.log(\"ðŸ˜± Error: \", error);\n            }\n          }}\n        />\n      </Form.Group>\n      <ModelApi timeDayMonth={props.timeDayMonth}></ModelApi>\n    </Form>\n  );\n};\n\nexport default PredictionInput;\n\n// // Generate a Typeahead search box that includes all of the stops.\n// // Choosing a stop will adjust the map to that stops location and place a red marker.\n// export default function StopSearch({\n//   panTo,\n//   stopChoice,\n//   stopDescriptions,\n//   parsedStops,\n// }) {\n//   return (\n//     <div>\n//       <Typeahead\n//         id=\"basic-example\"\n//         options={stopDescriptions}\n//         maxVisible={2}\n//         placeholder=\"Choose a stop to locate on map...\"\n//         onChange={(address) => {\n//           try {\n//             for (var i = 0; i < parsedStops.length; i++) {\n//               if (String(address) === parsedStops[i].description) {\n//                 const lat = parsedStops[i].geometry.lat;\n//                 const lng = parsedStops[i].geometry.lng;\n//                 const id = parsedStops[i].id;\n//                 panTo({ lat, lng });\n//                 stopChoice({ id });\n//               }\n//             }\n//           } catch (error) {\n//             console.log(\"ðŸ˜± Error: \", error);\n//           }\n//         }}\n//       />\n//     </div>\n//   );\n// }\n"]},"metadata":{},"sourceType":"module"}