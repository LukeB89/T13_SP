{"ast":null,"code":"// Importing outside developed components.\nimport React, { useState } from \"react\"; // Promise based HTTP client - https://github.com/axios/axios.\n\nconst axios = require(\"axios\"); // A function to request a list of stops from a user selected route going\n// in specified direction - each of these are received as input.\n\n\nexport default function TouristApi(props) {\n  // A placeholder variable used while waiting for RTPI response.\n  const placeholder = {\n    results: [{\n      business_status: \"\",\n      formatted_address: \"\",\n      geometry: {\n        location: {\n          lat: 53.3561935,\n          lng: -6.305289800000001\n        },\n        viewport: {\n          northeast: {\n            lat: 53.35833059999999,\n            lng: -6.30249385\n          },\n          southwest: {\n            lat: 53.3497822,\n            lng: -6.309030449999998\n          }\n        }\n      },\n      icon: \"https://maps.gstatic.com/mapfiles/place_api/icons/generic_business-71.png\",\n      name: \"Dublin Zoo\"\n    }]\n  }; // The response from the backend we need to track in state:\n\n  const [touristResponse, setTouristResponse] = useState({\n    tourist_mode_result: []\n  }); // The Effect Hook used to perform side effects in this component.\n  // https://reactjs.org/docs/hooks-effect.html.\n\n  React.useEffect(() => {\n    const CancelToken = axios.CancelToken;\n    const source = CancelToken.source();\n\n    const loadData = () => {\n      if (0 === 0) {\n        console.log(\"TouristApi - undefined - got rendered\"); // initial render should be nothing.\n\n        return undefined;\n      } else try {\n        console.log(\"TouristApi - got rendered!\");\n        axios.get(`/api/tourist_mode_result`).then(res => {\n          setTouristResponse(res.data);\n        });\n      } catch (error) {\n        if (axios.isCancel(error)) {\n          console.log(\"cancelled\");\n        } else {\n          throw error;\n        }\n      }\n    };\n\n    loadData();\n    return () => {\n      source.cancel();\n    };\n  }, // Listening for changes in input values in order to\n  // trigger a call to the API  to re-render the component.\n  [props.touristModeFlag]); //   const points = crimes.map((crime) => ({\n  //     type: \"Feature\",\n  //     properties: { cluster: false, crimeId: crime.id, category: crime.category },\n  //     geometry: {\n  //       type: \"Point\",\n  //       coordinates: [\n  //         parseFloat(crime.location.longitude),\n  //         parseFloat(crime.location.latitude),\n  //       ],\n  //     },\n  //   }));\n\n  return touristResponse.tourist_mode_result;\n}","map":{"version":3,"sources":["/Users/evanbyrnes/Pycharm-python-workspace/T13_SP/client/src/components/TouristApi.js"],"names":["React","useState","axios","require","TouristApi","props","placeholder","results","business_status","formatted_address","geometry","location","lat","lng","viewport","northeast","southwest","icon","name","touristResponse","setTouristResponse","tourist_mode_result","useEffect","CancelToken","source","loadData","console","log","undefined","get","then","res","data","error","isCancel","cancel","touristModeFlag"],"mappings":"AAAA;AACA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC,C,CACA;;AACA,MAAMC,KAAK,GAAGC,OAAO,CAAC,OAAD,CAArB,C,CAEA;AACA;;;AACA,eAAe,SAASC,UAAT,CAAoBC,KAApB,EAA2B;AACxC;AACA,QAAMC,WAAW,GAAG;AAClBC,IAAAA,OAAO,EAAE,CACP;AACEC,MAAAA,eAAe,EAAE,EADnB;AAEEC,MAAAA,iBAAiB,EAAE,EAFrB;AAGEC,MAAAA,QAAQ,EAAE;AACRC,QAAAA,QAAQ,EAAE;AAAEC,UAAAA,GAAG,EAAE,UAAP;AAAmBC,UAAAA,GAAG,EAAE,CAAC;AAAzB,SADF;AAERC,QAAAA,QAAQ,EAAE;AACRC,UAAAA,SAAS,EAAE;AAAEH,YAAAA,GAAG,EAAE,iBAAP;AAA0BC,YAAAA,GAAG,EAAE,CAAC;AAAhC,WADH;AAERG,UAAAA,SAAS,EAAE;AAAEJ,YAAAA,GAAG,EAAE,UAAP;AAAmBC,YAAAA,GAAG,EAAE,CAAC;AAAzB;AAFH;AAFF,OAHZ;AAUEI,MAAAA,IAAI,EACF,2EAXJ;AAYEC,MAAAA,IAAI,EAAE;AAZR,KADO;AADS,GAApB,CAFwC,CAoBxC;;AACA,QAAM,CAACC,eAAD,EAAkBC,kBAAlB,IAAwCnB,QAAQ,CAAC;AACrDoB,IAAAA,mBAAmB,EAAE;AADgC,GAAD,CAAtD,CArBwC,CAyBxC;AACA;;AACArB,EAAAA,KAAK,CAACsB,SAAN,CACE,MAAM;AACJ,UAAMC,WAAW,GAAGrB,KAAK,CAACqB,WAA1B;AACA,UAAMC,MAAM,GAAGD,WAAW,CAACC,MAAZ,EAAf;;AACA,UAAMC,QAAQ,GAAG,MAAM;AACrB,UAAI,MAAM,CAAV,EAAa;AACXC,QAAAA,OAAO,CAACC,GAAR,CAAY,uCAAZ,EADW,CAEX;;AACA,eAAOC,SAAP;AACD,OAJD,MAKE,IAAI;AACFF,QAAAA,OAAO,CAACC,GAAR,CAAY,4BAAZ;AAEAzB,QAAAA,KAAK,CAAC2B,GAAN,CAAW,0BAAX,EAAsCC,IAAtC,CAA4CC,GAAD,IAAS;AAClDX,UAAAA,kBAAkB,CAACW,GAAG,CAACC,IAAL,CAAlB;AACD,SAFD;AAGD,OAND,CAME,OAAOC,KAAP,EAAc;AACd,YAAI/B,KAAK,CAACgC,QAAN,CAAeD,KAAf,CAAJ,EAA2B;AACzBP,UAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ;AACD,SAFD,MAEO;AACL,gBAAMM,KAAN;AACD;AACF;AACJ,KAnBD;;AAoBAR,IAAAA,QAAQ;AACR,WAAO,MAAM;AACXD,MAAAA,MAAM,CAACW,MAAP;AACD,KAFD;AAGD,GA5BH,EA6BE;AACA;AACA,GAAC9B,KAAK,CAAC+B,eAAP,CA/BF,EA3BwC,CA6DxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,SAAOjB,eAAe,CAACE,mBAAvB;AACD","sourcesContent":["// Importing outside developed components.\nimport React, { useState } from \"react\";\n// Promise based HTTP client - https://github.com/axios/axios.\nconst axios = require(\"axios\");\n\n// A function to request a list of stops from a user selected route going\n// in specified direction - each of these are received as input.\nexport default function TouristApi(props) {\n  // A placeholder variable used while waiting for RTPI response.\n  const placeholder = {\n    results: [\n      {\n        business_status: \"\",\n        formatted_address: \"\",\n        geometry: {\n          location: { lat: 53.3561935, lng: -6.305289800000001 },\n          viewport: {\n            northeast: { lat: 53.35833059999999, lng: -6.30249385 },\n            southwest: { lat: 53.3497822, lng: -6.309030449999998 },\n          },\n        },\n        icon:\n          \"https://maps.gstatic.com/mapfiles/place_api/icons/generic_business-71.png\",\n        name: \"Dublin Zoo\",\n      },\n    ],\n  };\n  // The response from the backend we need to track in state:\n  const [touristResponse, setTouristResponse] = useState({\n    tourist_mode_result: [],\n  });\n\n  // The Effect Hook used to perform side effects in this component.\n  // https://reactjs.org/docs/hooks-effect.html.\n  React.useEffect(\n    () => {\n      const CancelToken = axios.CancelToken;\n      const source = CancelToken.source();\n      const loadData = () => {\n        if (0 === 0) {\n          console.log(\"TouristApi - undefined - got rendered\");\n          // initial render should be nothing.\n          return undefined;\n        } else\n          try {\n            console.log(\"TouristApi - got rendered!\");\n\n            axios.get(`/api/tourist_mode_result`).then((res) => {\n              setTouristResponse(res.data);\n            });\n          } catch (error) {\n            if (axios.isCancel(error)) {\n              console.log(\"cancelled\");\n            } else {\n              throw error;\n            }\n          }\n      };\n      loadData();\n      return () => {\n        source.cancel();\n      };\n    },\n    // Listening for changes in input values in order to\n    // trigger a call to the API  to re-render the component.\n    [props.touristModeFlag]\n  );\n\n  //   const points = crimes.map((crime) => ({\n  //     type: \"Feature\",\n  //     properties: { cluster: false, crimeId: crime.id, category: crime.category },\n  //     geometry: {\n  //       type: \"Point\",\n  //       coordinates: [\n  //         parseFloat(crime.location.longitude),\n  //         parseFloat(crime.location.latitude),\n  //       ],\n  //     },\n  //   }));\n\n  return touristResponse.tourist_mode_result;\n}\n"]},"metadata":{},"sourceType":"module"}