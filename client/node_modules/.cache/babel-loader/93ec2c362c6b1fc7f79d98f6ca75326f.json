{"ast":null,"code":"var _jsxFileName = \"/Users/evanbyrnes/Pycharm-python-workspace/T13_SP/client/src/App.js\";\n// Importing outside developed components.\nimport React, { useState } from \"react\";\nimport { useLoadScript, GoogleMap, Marker, InfoWindow, MarkerClusterer, DirectionsRenderer, DirectionsService } from \"@react-google-maps/api\";\nimport Container from \"react-bootstrap/Container\";\nimport Form from \"react-bootstrap/Form\";\nimport Button from \"react-bootstrap/Button\";\nimport styled from \"styled-components\"; // Importing self-developed components.\n\nimport CustomNavBar from \"./components/CustomNavBar\";\nimport FilterRoute from \"./components/FilterRoute\";\nimport StopSearch from \"./components/StopSearch\";\nimport Locate from \"./components/Locate\";\nimport JourneySearch from \"./components/JourneySearch\"; // import Api from \"./components/Api\";\n\nimport RtpiApi from \"./components/RtpiApi\";\nimport DateTimeSelector from \"./components/DateTimeSelector\"; // Importing outside developed css.\n\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"@reach/combobox/styles.css\"; // Importing Google Maps Api Key.\n\nimport googleMapApiKey from \"./config\"; // Defining libraries for Google Places\n\nconst libraries = [\"places\"]; // Defined styling for separation of page displayed.\n\nconst Wrapper = styled.main`\n  width: 100%;\n  height: 100%;\n`; // Importing the Dublin Bus API stops data\n\nconst data = require(\"./data/DublinBusStops.json\"); // // consts: [53.349804, -6.260310] - Dublin\n\n\nconst dublinCenter = require(\"./data/DublinCenter.json\"); // Importing custom styles to customize the style of Google Map...\n// important for including and excluding certain place markers etc.\n\n\nconst styles = require(\"./data/GoogleMapStyles.json\"); // Defined custom styles and location for Google Map.\n\n\nconst mapOptions = {\n  styles: styles,\n  disableDefaultUI: true,\n  zoomControl: true,\n  maxZoom: 17,\n  minZoom: 11\n};\nconst mapContainerStyle = {\n  height: \"93vh\"\n}; // Icon used to represent a bus stop on the map.\n\nconst icon = {\n  url: \"/bus_icon.svg\",\n  scaledSize: {\n    width: 18,\n    height: 18\n  }\n}; // Icons used when Markers are clustered.\n\nconst options = {\n  imagePath: \"https://developers.google.com/maps/documentation/javascript/examples/markerclusterer/m\"\n}; // Parsing the Stops data into various object shapes.\n\nconst rawData = data.results;\nconst myStops = rawData.map(stop => ({\n  description: \"Stop \" + stop.stopid + \", \" + stop.fullname,\n  type: \"Feature\",\n  properties: {\n    id: stop.stopid,\n    fullname: stop.fullname,\n    routes: stop.operators[0].routes\n  },\n  geometry: {\n    type: \"Point\",\n    pos: {\n      lat: parseFloat(stop.latitude),\n      lng: parseFloat(stop.longitude)\n    }\n  }\n}));\nconst parsedStops = myStops.map(parsed => ({\n  id: parsed.properties.id,\n  description: parsed.description,\n  geometry: parsed.geometry.pos\n}));\nconst stopDescriptions = [];\n\nfor (var i = 0; i < parsedStops.length; i++) {\n  stopDescriptions.push(parsedStops[i].description);\n}\n\nconst routesArray = [];\nconst duplicateRoutes = [];\n\nfor (var i = 0; i < myStops.length; i++) {\n  routesArray.push(myStops[i].properties.routes);\n}\n\nfor (var i = 0; i < routesArray.length; i++) {\n  for (var j = 0; j < routesArray[i].length; j++) {\n    duplicateRoutes.push(routesArray[i][j]);\n  }\n}\n\nconst allRoutes = duplicateRoutes.filter((a, b) => duplicateRoutes.indexOf(a) === b); // Main function for the SPA, generating the Map/Page.\n\nexport default function App() {\n  const {\n    isLoaded,\n    loadError\n  } = useLoadScript({\n    googleMapsApiKey: googleMapApiKey,\n    libraries\n  });\n  const [center, setCenter] = useState(dublinCenter);\n  const [zoom, setZoom] = useState(11); // The things we need to track in state:\n\n  const [selectedPlace, setSelectedPlace] = useState(null);\n  const [markerMap, setMarkerMap] = useState({});\n  const [infoOpen, setInfoOpen] = useState(false);\n  const [markers, setMarkers] = React.useState([]);\n  const [selected, setSelected] = React.useState(null);\n  const [stopNumber, setStopNumber] = React.useState(0);\n  const [routeString, setRouteString] = React.useState(\"\"); // The things for Directions we need to track in state.\n\n  const [response, setResponse] = useState(null);\n  const [origin, setOrigin] = useState(\"\");\n  const [destination, setDestination] = useState(\"\");\n  const mapRef = React.useRef();\n  const onMapLoad = React.useCallback(map => {\n    mapRef.current = map;\n  }, []);\n  const panTo = React.useCallback(({\n    lat,\n    lng\n  }) => {\n    mapRef.current.panTo({\n      lat,\n      lng\n    });\n    mapRef.current.setZoom(16); // Allowing only one marker on the map at a time.\n\n    setMarkers(current => []);\n    setMarkers(current => [...current, {\n      lat: lat,\n      lng: lng\n    }]);\n  }, []); // Changing stop realtime info based on user choice.\n\n  const stopChoice = number => {\n    setStopNumber(() => parseInt(number.id));\n  }; // Changing origin info based on user choice.\n\n\n  const originChoice = address => {\n    setOrigin(() => address.results[0].formatted_address);\n  }; // Changing destination info based on user choice.\n\n\n  const destinationChoice = address => {\n    setDestination(() => address.results[0].formatted_address);\n  }; // Changing stops of route displayed on based on user choice.\n\n\n  const routeChoice = route => {\n    setRouteString(() => route.routeString);\n  };\n\n  const directionsCallback = response => {\n    if (response !== null) {\n      if (response.status === \"OK\") {\n        setResponse(() => ({\n          response\n        }));\n      } else {}\n    }\n  }; // We have to create a mapping of our places to actual Marker objects\n\n\n  const markerLoadHandler = (marker, stop) => {\n    return setMarkerMap(prevState => {\n      return { ...prevState,\n        [stop.properties.id]: marker\n      };\n    });\n  };\n\n  const markerClickHandler = (event, place) => {\n    // Remember which stop was clicked\n    setSelectedPlace(place); // Required so clicking a 2nd marker works as expected\n\n    if (infoOpen) {\n      setInfoOpen(false);\n    }\n\n    setInfoOpen(true);\n  }; // These (below) are being used for marker display for the time being.\n\n\n  const [checker, setChecker] = useState(\"True\");\n\n  const checkerChoice = () => {\n    setChecker(() => \"False\");\n  }; // These (above) are being used for marker display for the time being.\n\n\n  if (loadError) return \"Error\";\n  if (!isLoaded) return \"Loading...\";\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 200,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Container, {\n    fluid: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 201,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(CustomNavBar, {\n    FilterRoute: FilterRoute,\n    StopSearch: StopSearch,\n    panTo: panTo,\n    stopChoice: stopChoice,\n    routeChoice: routeChoice,\n    parsedStops: parsedStops,\n    stopDescriptions: stopDescriptions,\n    allRoutes: allRoutes,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 202,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(Wrapper, {\n    style: {\n      width: \"75%\",\n      float: \"left\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 213,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(GoogleMap, {\n    mapContainerStyle: mapContainerStyle,\n    center: center,\n    zoom: zoom,\n    options: mapOptions,\n    onLoad: onMapLoad,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 215,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(Locate, {\n    panTo: panTo,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 222,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(RouteInfo, {\n    route: routeString,\n    markerLoadHandler: markerLoadHandler,\n    markerClickHandler: markerClickHandler,\n    checkerChoice: checkerChoice,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 224,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(ClusteredMarkers, {\n    myStops: myStops,\n    markerLoadHandler: markerLoadHandler,\n    markerClickHandler: markerClickHandler,\n    checker: checker,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 231,\n      columnNumber: 13\n    }\n  }), infoOpen && selectedPlace && /*#__PURE__*/React.createElement(InfoWindow, {\n    anchor: markerMap[selectedPlace.properties.id],\n    onCloseClick: () => setInfoOpen(false),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 239,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 243,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"h5\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 244,\n      columnNumber: 19\n    }\n  }, selectedPlace.properties.fullname + \", stop \" + selectedPlace.properties.id), /*#__PURE__*/React.createElement(RtpiApi, {\n    number: selectedPlace.properties.id,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 249,\n      columnNumber: 19\n    }\n  }))), markers.map(marker => /*#__PURE__*/React.createElement(Marker, {\n    key: `${marker.lat}-${marker.lng}`,\n    position: {\n      lat: marker.lat,\n      lng: marker.lng\n    },\n    onClick: () => {\n      setSelected(marker);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 255,\n      columnNumber: 15\n    }\n  })), destination !== \"\" && origin !== \"\" && /*#__PURE__*/React.createElement(DirectionsService // required\n  , {\n    options: {\n      destination: destination,\n      origin: origin,\n      travelMode: \"TRANSIT\"\n    } // required\n    ,\n    callback: directionsCallback,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 264,\n      columnNumber: 15\n    }\n  }), response !== null && /*#__PURE__*/React.createElement(DirectionsRenderer // required\n  , {\n    options: {\n      directions: response.response\n    },\n    panel: document.getElementById(\"panel\") // removing all displayed stops upon loading\n    ,\n    onLoad: () => {\n      setRouteString(\"\");\n      setChecker(\"False\");\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 276,\n      columnNumber: 15\n    }\n  }))), /*#__PURE__*/React.createElement(Wrapper, {\n    style: {\n      width: \"25%\",\n      float: \"right\",\n      maxHeight: \"93vh\",\n      overflowY: \"scroll\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 292,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Container, {\n    style: {\n      paddingTop: \"2vh\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 300,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(DateTimeSelector, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 301,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(Form, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 302,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Form.Group, {\n    controlId: \"formDeparture\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 303,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(JourneySearch, {\n    panTo: panTo,\n    originChoice: originChoice,\n    placeholder: \"Departure\",\n    stopDescriptions: stopDescriptions,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 304,\n      columnNumber: 17\n    }\n  }))), /*#__PURE__*/React.createElement(Form, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 312,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Form.Group, {\n    controlId: \"formArrival\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 313,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(JourneySearch, {\n    panTo: panTo,\n    destinationChoice: destinationChoice,\n    placeholder: \"Arrival\",\n    stopDescriptions: stopDescriptions,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 314,\n      columnNumber: 17\n    }\n  }))), /*#__PURE__*/React.createElement(\"div\", {\n    id: \"panel\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 322,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(Button, {\n    variant: \"secondary\",\n    size: \"lg\",\n    block: true,\n    onClick: () => window.location.reload(false),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 323,\n      columnNumber: 13\n    }\n  }, \"Reload\")))));\n} // Function that filters the markers on the map\n// according to a user selected route.\n\nfunction RouteInfo(props) {\n  const filteredMarkers = [];\n\n  for (var i = 0; i < myStops.length; i++) {\n    for (var j = 0; j < myStops[i].properties.routes.length; j++) {\n      if (myStops[i].properties.routes[j] == props.route) {\n        filteredMarkers.push(myStops[i]); // } else if (props.route == \"\") {\n        //   filteredMarkers.push(myStops[i]);\n      }\n    }\n  }\n\n  const uniqueMarkers = filteredMarkers.filter((a, b) => filteredMarkers.indexOf(a) === b);\n  return uniqueMarkers.map(stop => /*#__PURE__*/React.createElement(Marker, {\n    icon: icon,\n    key: stop.properties.id,\n    position: stop.geometry.pos,\n    onLoad: marker => {\n      // Will do for now - removing cluster upon selection of route.\n      props.checkerChoice(\"False\");\n      props.markerLoadHandler(marker, stop);\n    },\n    onClick: event => {\n      props.markerClickHandler(event, stop);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 357,\n      columnNumber: 5\n    }\n  }));\n} // Function that renders all of the Dublin Bus stops in clustered form.\n// props.checker being set to True means that they will all be displayed on\n// the first load. When a route is chosen from the RouteInfo function above,\n// props.cheker gets set to False and all of the markers are removed. This solution\n// is intended only to be temporary until something better comes up.\n\n\nfunction ClusteredMarkers(props) {\n  if (props.checker === \"True\") {\n    return /*#__PURE__*/React.createElement(MarkerClusterer, {\n      options: options,\n      maxZoom: 15,\n      minimumClusterSize: 4,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 381,\n        columnNumber: 7\n      }\n    }, clusterer => props.myStops.map(stop => /*#__PURE__*/React.createElement(Marker, {\n      icon: icon,\n      key: stop.properties.id,\n      position: stop.geometry.pos,\n      clusterer: clusterer,\n      onLoad: marker => props.markerLoadHandler(marker, stop),\n      onClick: event => props.markerClickHandler(event, stop),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 384,\n        columnNumber: 13\n      }\n    })));\n  } else {\n    return null;\n  }\n}","map":{"version":3,"sources":["/Users/evanbyrnes/Pycharm-python-workspace/T13_SP/client/src/App.js"],"names":["React","useState","useLoadScript","GoogleMap","Marker","InfoWindow","MarkerClusterer","DirectionsRenderer","DirectionsService","Container","Form","Button","styled","CustomNavBar","FilterRoute","StopSearch","Locate","JourneySearch","RtpiApi","DateTimeSelector","googleMapApiKey","libraries","Wrapper","main","data","require","dublinCenter","styles","mapOptions","disableDefaultUI","zoomControl","maxZoom","minZoom","mapContainerStyle","height","icon","url","scaledSize","width","options","imagePath","rawData","results","myStops","map","stop","description","stopid","fullname","type","properties","id","routes","operators","geometry","pos","lat","parseFloat","latitude","lng","longitude","parsedStops","parsed","stopDescriptions","i","length","push","routesArray","duplicateRoutes","j","allRoutes","filter","a","b","indexOf","App","isLoaded","loadError","googleMapsApiKey","center","setCenter","zoom","setZoom","selectedPlace","setSelectedPlace","markerMap","setMarkerMap","infoOpen","setInfoOpen","markers","setMarkers","selected","setSelected","stopNumber","setStopNumber","routeString","setRouteString","response","setResponse","origin","setOrigin","destination","setDestination","mapRef","useRef","onMapLoad","useCallback","current","panTo","stopChoice","number","parseInt","originChoice","address","formatted_address","destinationChoice","routeChoice","route","directionsCallback","status","markerLoadHandler","marker","prevState","markerClickHandler","event","place","checker","setChecker","checkerChoice","float","travelMode","directions","document","getElementById","maxHeight","overflowY","paddingTop","window","location","reload","RouteInfo","props","filteredMarkers","uniqueMarkers","ClusteredMarkers","clusterer"],"mappings":"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","sourcesContent":["// Importing outside developed components.\nimport React, { useState } from \"react\";\nimport {\n  useLoadScript,\n  GoogleMap,\n  Marker,\n  InfoWindow,\n  MarkerClusterer,\n  DirectionsRenderer,\n  DirectionsService,\n} from \"@react-google-maps/api\";\nimport Container from \"react-bootstrap/Container\";\nimport Form from \"react-bootstrap/Form\";\nimport Button from \"react-bootstrap/Button\";\nimport styled from \"styled-components\";\n// Importing self-developed components.\nimport CustomNavBar from \"./components/CustomNavBar\";\nimport FilterRoute from \"./components/FilterRoute\";\nimport StopSearch from \"./components/StopSearch\";\nimport Locate from \"./components/Locate\";\nimport JourneySearch from \"./components/JourneySearch\";\n// import Api from \"./components/Api\";\nimport RtpiApi from \"./components/RtpiApi\";\nimport DateTimeSelector from \"./components/DateTimeSelector\";\n// Importing outside developed css.\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"@reach/combobox/styles.css\";\n// Importing Google Maps Api Key.\nimport googleMapApiKey from \"./config\";\n// Defining libraries for Google Places\nconst libraries = [\"places\"];\n// Defined styling for separation of page displayed.\nconst Wrapper = styled.main`\n  width: 100%;\n  height: 100%;\n`;\n// Importing the Dublin Bus API stops data\nconst data = require(\"./data/DublinBusStops.json\");\n// // consts: [53.349804, -6.260310] - Dublin\nconst dublinCenter = require(\"./data/DublinCenter.json\");\n// Importing custom styles to customize the style of Google Map...\n// important for including and excluding certain place markers etc.\nconst styles = require(\"./data/GoogleMapStyles.json\");\n// Defined custom styles and location for Google Map.\nconst mapOptions = {\n  styles: styles,\n  disableDefaultUI: true,\n  zoomControl: true,\n  maxZoom: 17,\n  minZoom: 11,\n};\nconst mapContainerStyle = {\n  height: \"93vh\",\n};\n// Icon used to represent a bus stop on the map.\nconst icon = {\n  url: \"/bus_icon.svg\",\n  scaledSize: { width: 18, height: 18 },\n};\n// Icons used when Markers are clustered.\nconst options = {\n  imagePath:\n    \"https://developers.google.com/maps/documentation/javascript/examples/markerclusterer/m\",\n};\n// Parsing the Stops data into various object shapes.\nconst rawData = data.results;\n\nconst myStops = rawData.map((stop) => ({\n  description: \"Stop \" + stop.stopid + \", \" + stop.fullname,\n  type: \"Feature\",\n  properties: {\n    id: stop.stopid,\n    fullname: stop.fullname,\n    routes: stop.operators[0].routes,\n  },\n  geometry: {\n    type: \"Point\",\n    pos: {\n      lat: parseFloat(stop.latitude),\n      lng: parseFloat(stop.longitude),\n    },\n  },\n}));\n\nconst parsedStops = myStops.map((parsed) => ({\n  id: parsed.properties.id,\n  description: parsed.description,\n  geometry: parsed.geometry.pos,\n}));\n\nconst stopDescriptions = [];\nfor (var i = 0; i < parsedStops.length; i++) {\n  stopDescriptions.push(parsedStops[i].description);\n}\n\nconst routesArray = [];\nconst duplicateRoutes = [];\nfor (var i = 0; i < myStops.length; i++) {\n  routesArray.push(myStops[i].properties.routes);\n}\nfor (var i = 0; i < routesArray.length; i++) {\n  for (var j = 0; j < routesArray[i].length; j++) {\n    duplicateRoutes.push(routesArray[i][j]);\n  }\n}\nconst allRoutes = duplicateRoutes.filter(\n  (a, b) => duplicateRoutes.indexOf(a) === b\n);\n\n// Main function for the SPA, generating the Map/Page.\nexport default function App() {\n  const { isLoaded, loadError } = useLoadScript({\n    googleMapsApiKey: googleMapApiKey,\n    libraries,\n  });\n  const [center, setCenter] = useState(dublinCenter);\n  const [zoom, setZoom] = useState(11);\n  // The things we need to track in state:\n  const [selectedPlace, setSelectedPlace] = useState(null);\n  const [markerMap, setMarkerMap] = useState({});\n  const [infoOpen, setInfoOpen] = useState(false);\n  const [markers, setMarkers] = React.useState([]);\n  const [selected, setSelected] = React.useState(null);\n  const [stopNumber, setStopNumber] = React.useState(0);\n  const [routeString, setRouteString] = React.useState(\"\");\n  // The things for Directions we need to track in state.\n  const [response, setResponse] = useState(null);\n  const [origin, setOrigin] = useState(\"\");\n  const [destination, setDestination] = useState(\"\");\n\n  const mapRef = React.useRef();\n  const onMapLoad = React.useCallback((map) => {\n    mapRef.current = map;\n  }, []);\n\n  const panTo = React.useCallback(({ lat, lng }) => {\n    mapRef.current.panTo({ lat, lng });\n    mapRef.current.setZoom(16);\n    // Allowing only one marker on the map at a time.\n    setMarkers((current) => []);\n    setMarkers((current) => [...current, { lat: lat, lng: lng }]);\n  }, []);\n  // Changing stop realtime info based on user choice.\n  const stopChoice = (number) => {\n    setStopNumber(() => parseInt(number.id));\n  };\n  // Changing origin info based on user choice.\n  const originChoice = (address) => {\n    setOrigin(() => address.results[0].formatted_address);\n  };\n  // Changing destination info based on user choice.\n  const destinationChoice = (address) => {\n    setDestination(() => address.results[0].formatted_address);\n  };\n  // Changing stops of route displayed on based on user choice.\n  const routeChoice = (route) => {\n    setRouteString(() => route.routeString);\n  };\n\n  const directionsCallback = (response) => {\n    if (response !== null) {\n      if (response.status === \"OK\") {\n        setResponse(() => ({\n          response,\n        }));\n      } else {\n      }\n    }\n  };\n\n  // We have to create a mapping of our places to actual Marker objects\n  const markerLoadHandler = (marker, stop) => {\n    return setMarkerMap((prevState) => {\n      return { ...prevState, [stop.properties.id]: marker };\n    });\n  };\n\n  const markerClickHandler = (event, place) => {\n    // Remember which stop was clicked\n    setSelectedPlace(place);\n    // Required so clicking a 2nd marker works as expected\n    if (infoOpen) {\n      setInfoOpen(false);\n    }\n    setInfoOpen(true);\n  };\n\n  // These (below) are being used for marker display for the time being.\n  const [checker, setChecker] = useState(\"True\");\n\n  const checkerChoice = () => {\n    setChecker(() => \"False\");\n  };\n  // These (above) are being used for marker display for the time being.\n\n  if (loadError) return \"Error\";\n  if (!isLoaded) return \"Loading...\";\n\n  return (\n    <div>\n      <Container fluid>\n        <CustomNavBar\n          FilterRoute={FilterRoute}\n          StopSearch={StopSearch}\n          panTo={panTo}\n          stopChoice={stopChoice}\n          routeChoice={routeChoice}\n          parsedStops={parsedStops}\n          stopDescriptions={stopDescriptions}\n          allRoutes={allRoutes}\n        />\n\n        <Wrapper style={{ width: \"75%\", float: \"left\" }}>\n          {/* Render the Google Map */}\n          <GoogleMap\n            mapContainerStyle={mapContainerStyle}\n            center={center}\n            zoom={zoom}\n            options={mapOptions}\n            onLoad={onMapLoad}\n          >\n            <Locate panTo={panTo} />\n\n            <RouteInfo\n              route={routeString}\n              markerLoadHandler={markerLoadHandler}\n              markerClickHandler={markerClickHandler}\n              checkerChoice={checkerChoice}\n            ></RouteInfo>\n\n            <ClusteredMarkers\n              myStops={myStops}\n              markerLoadHandler={markerLoadHandler}\n              markerClickHandler={markerClickHandler}\n              checker={checker}\n            ></ClusteredMarkers>\n\n            {infoOpen && selectedPlace && (\n              <InfoWindow\n                anchor={markerMap[selectedPlace.properties.id]}\n                onCloseClick={() => setInfoOpen(false)}\n              >\n                <div>\n                  <h5>\n                    {selectedPlace.properties.fullname +\n                      \", stop \" +\n                      selectedPlace.properties.id}\n                  </h5>\n                  <RtpiApi number={selectedPlace.properties.id}></RtpiApi>\n                </div>\n              </InfoWindow>\n            )}\n            {/* Markers dropped when stop has been chosen or geolocation activated. */}\n            {markers.map((marker) => (\n              <Marker\n                key={`${marker.lat}-${marker.lng}`}\n                position={{ lat: marker.lat, lng: marker.lng }}\n                onClick={() => {\n                  setSelected(marker);\n                }}\n              />\n            ))}\n            {destination !== \"\" && origin !== \"\" && (\n              <DirectionsService\n                // required\n                options={{\n                  destination: destination,\n                  origin: origin,\n                  travelMode: \"TRANSIT\",\n                }}\n                // required\n                callback={directionsCallback}\n              />\n            )}\n            {response !== null && (\n              <DirectionsRenderer\n                // required\n                options={{\n                  directions: response.response,\n                }}\n                panel={document.getElementById(\"panel\")}\n                // removing all displayed stops upon loading\n                onLoad={() => {\n                  setRouteString(\"\");\n                  setChecker(\"False\");\n                }}\n              />\n            )}\n          </GoogleMap>\n        </Wrapper>\n\n        <Wrapper\n          style={{\n            width: \"25%\",\n            float: \"right\",\n            maxHeight: \"93vh\",\n            overflowY: \"scroll\",\n          }}\n        >\n          <Container style={{ paddingTop: \"2vh\" }}>\n            <DateTimeSelector></DateTimeSelector>\n            <Form>\n              <Form.Group controlId=\"formDeparture\">\n                <JourneySearch\n                  panTo={panTo}\n                  originChoice={originChoice}\n                  placeholder={\"Departure\"}\n                  stopDescriptions={stopDescriptions}\n                />\n              </Form.Group>\n            </Form>\n            <Form>\n              <Form.Group controlId=\"formArrival\">\n                <JourneySearch\n                  panTo={panTo}\n                  destinationChoice={destinationChoice}\n                  placeholder={\"Arrival\"}\n                  stopDescriptions={stopDescriptions}\n                />\n              </Form.Group>\n            </Form>\n            <div id=\"panel\"></div>\n            <Button\n              variant=\"secondary\"\n              size=\"lg\"\n              block\n              onClick={() => window.location.reload(false)}\n            >\n              Reload\n            </Button>\n          </Container>\n        </Wrapper>\n      </Container>\n    </div>\n  );\n}\n\n// Function that filters the markers on the map\n// according to a user selected route.\nfunction RouteInfo(props) {\n  const filteredMarkers = [];\n\n  for (var i = 0; i < myStops.length; i++) {\n    for (var j = 0; j < myStops[i].properties.routes.length; j++) {\n      if (myStops[i].properties.routes[j] == props.route) {\n        filteredMarkers.push(myStops[i]);\n        // } else if (props.route == \"\") {\n        //   filteredMarkers.push(myStops[i]);\n      }\n    }\n  }\n\n  const uniqueMarkers = filteredMarkers.filter(\n    (a, b) => filteredMarkers.indexOf(a) === b\n  );\n  return uniqueMarkers.map((stop) => (\n    <Marker\n      icon={icon}\n      key={stop.properties.id}\n      position={stop.geometry.pos}\n      onLoad={(marker) => {\n        // Will do for now - removing cluster upon selection of route.\n        props.checkerChoice(\"False\");\n        props.markerLoadHandler(marker, stop);\n      }}\n      onClick={(event) => {\n        props.markerClickHandler(event, stop);\n      }}\n    />\n  ));\n}\n\n// Function that renders all of the Dublin Bus stops in clustered form.\n// props.checker being set to True means that they will all be displayed on\n// the first load. When a route is chosen from the RouteInfo function above,\n// props.cheker gets set to False and all of the markers are removed. This solution\n// is intended only to be temporary until something better comes up.\nfunction ClusteredMarkers(props) {\n  if (props.checker === \"True\") {\n    return (\n      <MarkerClusterer options={options} maxZoom={15} minimumClusterSize={4}>\n        {(clusterer) =>\n          props.myStops.map((stop) => (\n            <Marker\n              icon={icon}\n              key={stop.properties.id}\n              position={stop.geometry.pos}\n              clusterer={clusterer}\n              onLoad={(marker) => props.markerLoadHandler(marker, stop)}\n              onClick={(event) => props.markerClickHandler(event, stop)}\n            />\n          ))\n        }\n      </MarkerClusterer>\n    );\n  } else {\n    return null;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}