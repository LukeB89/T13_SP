{"ast":null,"code":"var _jsxFileName = \"/Users/evanbyrnes/Pycharm-python-workspace/T13_SP/client/src/components/T13GoogleMap.js\";\nimport React, { useState } from \"react\";\nimport { useLoadScript, GoogleMap, Marker, InfoWindow, MarkerClusterer } from \"@react-google-maps/api\";\nimport googleMapApiKey from \".././config\";\nimport * as data from \".././data/db-stops.json\"; // Import custom styles to customize the style of Google Map\n\nconst styles = require(\"../data/GoogleMapStyles.json\");\n\nconst options = {\n  imagePath: \"https://developers.google.com/maps/documentation/javascript/examples/markerclusterer/m\"\n};\nconst mapOptions = {\n  styles: styles,\n  disableDefaultUI: true,\n  zoomControl: true\n};\nconst rawData = data.results;\nconst myStops = rawData.map(stop => ({\n  type: \"Feature\",\n  properties: {\n    id: stop.stopid,\n    fullname: stop.fullname,\n    routes: stop.operators[0].routes\n  },\n  geometry: {\n    type: \"Point\",\n    pos: {\n      lat: parseFloat(stop.latitude),\n      lng: parseFloat(stop.longitude)\n    }\n  }\n}));\nexport default function T13GoogleMap() {\n  const {\n    isLoaded,\n    loadError\n  } = useLoadScript({\n    // googleMapsApiKey: process.env.REACT_APP_GOOGLE_MAPS_API_KEY,\n    // libraries,\n    googleMapsApiKey: \"AIzaSyDmDEDnZrcDTrRnaCt-fDtCM-xRnML5jyM\",\n    libraries\n  }); // The things we need to track in state\n\n  const [mapRef, setMapRef] = useState(null);\n  const [selectedPlace, setSelectedPlace] = useState(null);\n  const [markerMap, setMarkerMap] = useState({}); // consts: [53.349804, -6.260310] - Dublin\n\n  const [center, setCenter] = useState({\n    lat: 53.349804,\n    lng: -6.26031\n  });\n  const [zoom, setZoom] = useState(11);\n  const [infoOpen, setInfoOpen] = useState(false); // // Load the Google maps scripts\n  // const { isLoaded } = useLoadScript({\n  //   // Enter your own Google Maps API key in config.js\n  //   googleMapsApiKey: googleMapApiKey,\n  // });\n  // Iterate myStops to size, center, and zoom map to contain all markers\n\n  const fitBounds = map => {\n    const bounds = new window.google.maps.LatLngBounds();\n    myStops.map(stop => {\n      bounds.extend(stop.geometry.pos);\n      return stop.properties.id;\n    });\n    map.fitBounds(bounds);\n  };\n\n  const loadHandler = map => {\n    // Store a reference to the google map instance in state\n    setMapRef(map); // Fit map bounds to contain all markers\n\n    fitBounds(map);\n  }; // We have to create a mapping of our places to actual Marker objects\n\n\n  const markerLoadHandler = (marker, stop) => {\n    return setMarkerMap(prevState => {\n      return { ...prevState,\n        [stop.properties.id]: marker\n      };\n    });\n  };\n\n  const markerClickHandler = (event, place) => {\n    // Remember which stop was clicked\n    setSelectedPlace(place); // Required so clicking a 2nd marker works as expected\n\n    if (infoOpen) {\n      setInfoOpen(false);\n    }\n\n    setInfoOpen(true); // If you want to zoom in a little on marker click\n\n    if (zoom < 11) {\n      setZoom(11);\n    } // if you want to center the selected Marker\n    //setCenter(place.pos)\n\n  };\n\n  const refoM = React.useRef();\n  const panTo = React.useCallback(({\n    lat,\n    lng\n  }) => {\n    refoM.current.panTo({\n      lat,\n      lng\n    });\n    refoM.current.setZoom(14);\n  }, []);\n  if (loadError) return \"Error\";\n  if (!isLoaded) return \"Loading...\";\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Locate, {\n    panTo: panTo,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(GoogleMap, {\n    onLoad: loadHandler,\n    onCenterChanged: () => setCenter(mapRef.getCenter().toJSON()),\n    center: center,\n    zoom: zoom,\n    maxZoom: 13,\n    options: mapOptions // options={{ styles: styles }}\n    ,\n    mapContainerStyle: {\n      height: \"94vh\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(MarkerClusterer, {\n    options: options,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 9\n    }\n  }, clusterer => myStops.map(stop => /*#__PURE__*/React.createElement(Marker, {\n    key: stop.properties.id,\n    position: stop.geometry.pos,\n    clusterer: clusterer,\n    onLoad: marker => markerLoadHandler(marker, stop),\n    onClick: event => markerClickHandler(event, stop),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 15\n    }\n  }))), infoOpen && selectedPlace && /*#__PURE__*/React.createElement(InfoWindow, {\n    anchor: markerMap[selectedPlace.properties.id],\n    onCloseClick: () => setInfoOpen(false),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 150,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 154,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"h3\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 155,\n      columnNumber: 15\n    }\n  }, \"Stop Number: \", selectedPlace.properties.id), /*#__PURE__*/React.createElement(\"h5\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 156,\n      columnNumber: 15\n    }\n  }, \"Routes: \", selectedPlace.properties.routes.join(\", \"))))));\n} // const renderPage = () => {\n//   return (\n//     <div>\n//       <Locate panTo={panTo} />\n//       <GoogleMap\n//         onLoad={loadHandler}\n//         onCenterChanged={() => setCenter(mapRef.getCenter().toJSON())}\n//         center={center}\n//         zoom={zoom}\n//         maxZoom={13}\n//         options={mapOptions}\n//         // options={{ styles: styles }}\n//         mapContainerStyle={{\n//           height: \"94vh\",\n//         }}\n//       >\n//         <MarkerClusterer options={options}>\n//           {(clusterer) =>\n//             myStops.map((stop) => (\n//               <Marker\n//                 key={stop.properties.id}\n//                 position={stop.geometry.pos}\n//                 clusterer={clusterer}\n//                 onLoad={(marker) => markerLoadHandler(marker, stop)}\n//                 onClick={(event) => markerClickHandler(event, stop)}\n//               />\n//             ))\n//           }\n//         </MarkerClusterer>\n//         {infoOpen && selectedPlace && (\n//           <InfoWindow\n//             anchor={markerMap[selectedPlace.properties.id]}\n//             onCloseClick={() => setInfoOpen(false)}\n//           >\n//             <div>\n//               <h3>Stop Number: {selectedPlace.properties.id}</h3>\n//               <h5>Routes: {selectedPlace.properties.routes.join(\", \")}</h5>\n//             </div>\n//           </InfoWindow>\n//         )}\n//       </GoogleMap>\n//     </div>\n//   );\n// };\n// return isLoaded ? renderPage() : null;\n// }\n\nfunction Locate({\n  panTo\n}) {\n  return /*#__PURE__*/React.createElement(\"button\", {\n    className: \"locate\",\n    onClick: () => {\n      navigator.geolocation.getCurrentPosition(position => {\n        panTo({\n          lat: position.coords.latitude,\n          lng: position.coords.longitude\n        });\n      }, () => null);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 215,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"img\", {\n    src: \"/compass.svg\",\n    alt: \"compass\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 229,\n      columnNumber: 7\n    }\n  }));\n}","map":{"version":3,"sources":["/Users/evanbyrnes/Pycharm-python-workspace/T13_SP/client/src/components/T13GoogleMap.js"],"names":["React","useState","useLoadScript","GoogleMap","Marker","InfoWindow","MarkerClusterer","googleMapApiKey","data","styles","require","options","imagePath","mapOptions","disableDefaultUI","zoomControl","rawData","results","myStops","map","stop","type","properties","id","stopid","fullname","routes","operators","geometry","pos","lat","parseFloat","latitude","lng","longitude","T13GoogleMap","isLoaded","loadError","googleMapsApiKey","libraries","mapRef","setMapRef","selectedPlace","setSelectedPlace","markerMap","setMarkerMap","center","setCenter","zoom","setZoom","infoOpen","setInfoOpen","fitBounds","bounds","window","google","maps","LatLngBounds","extend","loadHandler","markerLoadHandler","marker","prevState","markerClickHandler","event","place","refoM","useRef","panTo","useCallback","current","getCenter","toJSON","height","clusterer","join","Locate","navigator","geolocation","getCurrentPosition","position","coords"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport {\n  useLoadScript,\n  GoogleMap,\n  Marker,\n  InfoWindow,\n  MarkerClusterer,\n} from \"@react-google-maps/api\";\n\nimport googleMapApiKey from \".././config\";\nimport * as data from \".././data/db-stops.json\";\n\n// Import custom styles to customize the style of Google Map\nconst styles = require(\"../data/GoogleMapStyles.json\");\n\nconst options = {\n  imagePath:\n    \"https://developers.google.com/maps/documentation/javascript/examples/markerclusterer/m\",\n};\n\nconst mapOptions = {\n  styles: styles,\n  disableDefaultUI: true,\n  zoomControl: true,\n};\n\nconst rawData = data.results;\nconst myStops = rawData.map((stop) => ({\n  type: \"Feature\",\n  properties: {\n    id: stop.stopid,\n    fullname: stop.fullname,\n    routes: stop.operators[0].routes,\n  },\n  geometry: {\n    type: \"Point\",\n    pos: {\n      lat: parseFloat(stop.latitude),\n      lng: parseFloat(stop.longitude),\n    },\n  },\n}));\n\nexport default function T13GoogleMap() {\n  const { isLoaded, loadError } = useLoadScript({\n    // googleMapsApiKey: process.env.REACT_APP_GOOGLE_MAPS_API_KEY,\n    // libraries,\n    googleMapsApiKey: \"AIzaSyDmDEDnZrcDTrRnaCt-fDtCM-xRnML5jyM\",\n    libraries,\n  });\n  // The things we need to track in state\n  const [mapRef, setMapRef] = useState(null);\n  const [selectedPlace, setSelectedPlace] = useState(null);\n  const [markerMap, setMarkerMap] = useState({});\n  // consts: [53.349804, -6.260310] - Dublin\n  const [center, setCenter] = useState({ lat: 53.349804, lng: -6.26031 });\n  const [zoom, setZoom] = useState(11);\n  const [infoOpen, setInfoOpen] = useState(false);\n\n  // // Load the Google maps scripts\n  // const { isLoaded } = useLoadScript({\n  //   // Enter your own Google Maps API key in config.js\n  //   googleMapsApiKey: googleMapApiKey,\n  // });\n\n  // Iterate myStops to size, center, and zoom map to contain all markers\n  const fitBounds = (map) => {\n    const bounds = new window.google.maps.LatLngBounds();\n    myStops.map((stop) => {\n      bounds.extend(stop.geometry.pos);\n      return stop.properties.id;\n    });\n    map.fitBounds(bounds);\n  };\n\n  const loadHandler = (map) => {\n    // Store a reference to the google map instance in state\n    setMapRef(map);\n    // Fit map bounds to contain all markers\n    fitBounds(map);\n  };\n\n  // We have to create a mapping of our places to actual Marker objects\n  const markerLoadHandler = (marker, stop) => {\n    return setMarkerMap((prevState) => {\n      return { ...prevState, [stop.properties.id]: marker };\n    });\n  };\n\n  const markerClickHandler = (event, place) => {\n    // Remember which stop was clicked\n    setSelectedPlace(place);\n\n    // Required so clicking a 2nd marker works as expected\n    if (infoOpen) {\n      setInfoOpen(false);\n    }\n\n    setInfoOpen(true);\n\n    // If you want to zoom in a little on marker click\n    if (zoom < 11) {\n      setZoom(11);\n    }\n\n    // if you want to center the selected Marker\n    //setCenter(place.pos)\n  };\n\n  const refoM = React.useRef();\n\n  const panTo = React.useCallback(({ lat, lng }) => {\n    refoM.current.panTo({ lat, lng });\n    refoM.current.setZoom(14);\n  }, []);\n\n  if (loadError) return \"Error\";\n  if (!isLoaded) return \"Loading...\";\n\n  return (\n    <div>\n      <Locate panTo={panTo} />\n      <GoogleMap\n        onLoad={loadHandler}\n        onCenterChanged={() => setCenter(mapRef.getCenter().toJSON())}\n        center={center}\n        zoom={zoom}\n        maxZoom={13}\n        options={mapOptions}\n        // options={{ styles: styles }}\n        mapContainerStyle={{\n          height: \"94vh\",\n        }}\n      >\n        <MarkerClusterer options={options}>\n          {(clusterer) =>\n            myStops.map((stop) => (\n              <Marker\n                key={stop.properties.id}\n                position={stop.geometry.pos}\n                clusterer={clusterer}\n                onLoad={(marker) => markerLoadHandler(marker, stop)}\n                onClick={(event) => markerClickHandler(event, stop)}\n              />\n            ))\n          }\n        </MarkerClusterer>\n\n        {infoOpen && selectedPlace && (\n          <InfoWindow\n            anchor={markerMap[selectedPlace.properties.id]}\n            onCloseClick={() => setInfoOpen(false)}\n          >\n            <div>\n              <h3>Stop Number: {selectedPlace.properties.id}</h3>\n              <h5>Routes: {selectedPlace.properties.routes.join(\", \")}</h5>\n            </div>\n          </InfoWindow>\n        )}\n      </GoogleMap>\n    </div>\n  );\n}\n\n// const renderPage = () => {\n//   return (\n//     <div>\n//       <Locate panTo={panTo} />\n//       <GoogleMap\n//         onLoad={loadHandler}\n//         onCenterChanged={() => setCenter(mapRef.getCenter().toJSON())}\n//         center={center}\n//         zoom={zoom}\n//         maxZoom={13}\n//         options={mapOptions}\n//         // options={{ styles: styles }}\n//         mapContainerStyle={{\n//           height: \"94vh\",\n//         }}\n//       >\n//         <MarkerClusterer options={options}>\n//           {(clusterer) =>\n//             myStops.map((stop) => (\n//               <Marker\n//                 key={stop.properties.id}\n//                 position={stop.geometry.pos}\n//                 clusterer={clusterer}\n//                 onLoad={(marker) => markerLoadHandler(marker, stop)}\n//                 onClick={(event) => markerClickHandler(event, stop)}\n//               />\n//             ))\n//           }\n//         </MarkerClusterer>\n\n//         {infoOpen && selectedPlace && (\n//           <InfoWindow\n//             anchor={markerMap[selectedPlace.properties.id]}\n//             onCloseClick={() => setInfoOpen(false)}\n//           >\n//             <div>\n//               <h3>Stop Number: {selectedPlace.properties.id}</h3>\n//               <h5>Routes: {selectedPlace.properties.routes.join(\", \")}</h5>\n//             </div>\n//           </InfoWindow>\n//         )}\n//       </GoogleMap>\n//     </div>\n//   );\n// };\n// return isLoaded ? renderPage() : null;\n// }\n\nfunction Locate({ panTo }) {\n  return (\n    <button\n      className=\"locate\"\n      onClick={() => {\n        navigator.geolocation.getCurrentPosition(\n          (position) => {\n            panTo({\n              lat: position.coords.latitude,\n              lng: position.coords.longitude,\n            });\n          },\n          () => null\n        );\n      }}\n    >\n      <img src=\"/compass.svg\" alt=\"compass\" />\n    </button>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}