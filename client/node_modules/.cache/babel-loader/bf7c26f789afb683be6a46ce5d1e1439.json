{"ast":null,"code":"var _jsxFileName = \"/Users/evanbyrnes/Pycharm-python-workspace/T13_SP/client/src/components/Directions.js\";\nimport React from \"react\";\nimport PlacesAutocomplete, { geocodeByAddress, getLatLng } from \"react-places-autocomplete\";\n\nconst {\n  Component\n} = require(\"react\");\n\nconst {\n  DirectionsRenderer,\n  DirectionsService,\n  Autocomplete\n} = require(\"@react-google-maps/api\");\n\nclass Directions extends Component {\n  constructor(props) {\n    super(props);\n\n    this.handleChangeOrigin = originAddress => {\n      this.setState({\n        originAddress\n      });\n    };\n\n    this.handleSelectOrigin = originAddress => {\n      geocodeByAddress(originAddress).then(results => getLatLng(results[0])).then(latLng => console.log(\"Success\", latLng)).catch(error => console.error(\"Error\", error));\n      this.setState({\n        originAddress\n      });\n    };\n\n    this.handleChangeDestination = destinationAddress => {\n      this.setState({\n        destinationAddress\n      });\n    };\n\n    this.handleSelectDestination = destinationAddress => {\n      geocodeByAddress(destinationAddress).then(results => getLatLng(results[0])).then(latLng => console.log(\"Success\", latLng)).catch(error => console.error(\"Error\", error));\n      this.setState({\n        destinationAddress\n      });\n    };\n\n    this.state = {\n      response: null,\n      travelMode: \"TRANSIT\",\n      origin: \"\",\n      destination: \"\",\n      originAddress: \"\",\n      destinationAddress: \"\"\n    };\n    this.directionsCallback = this.directionsCallback.bind(this);\n    this.getOrigin = this.getOrigin.bind(this);\n    this.getDestination = this.getDestination.bind(this);\n    this.onClick = this.onClick.bind(this);\n    this.onMapClick = this.onMapClick.bind(this);\n  }\n\n  directionsCallback(response) {\n    console.log(\"hi, \", response);\n\n    if (response !== null) {\n      if (response.status === \"OK\") {\n        this.setState(() => ({\n          response\n        }));\n      } else {\n        console.log(\"response: \", response);\n      }\n    }\n  }\n\n  getOrigin(ref) {\n    this.origin = ref;\n  }\n\n  getDestination(ref) {\n    this.destination = ref;\n  }\n\n  onClick() {\n    if (this.origin.value !== \"\" && this.destination.value !== \"\") {\n      this.setState(() => ({\n        origin: this.origin.value,\n        destination: this.destination.value\n      }));\n    }\n  }\n\n  onMapClick(...args) {\n    console.log(\"onClick args: \", args);\n  }\n\n  render() {\n    const defaultStyles = {\n      root: {\n        position: \"relative\",\n        paddingBottom: \"0px\"\n      },\n      input: {\n        display: \"inline-block\",\n        width: \"100%\",\n        padding: \"10px\"\n      },\n      autocompleteContainer: {\n        position: \"absolute\",\n        top: \"100%\",\n        backgroundColor: \"white\",\n        border: \"1px solid #555555\",\n        width: \"100%\"\n      },\n      autocompleteItem: {\n        backgroundColor: \"#ffffff\",\n        padding: \"10px\",\n        color: \"#555555\",\n        cursor: \"pointer\"\n      },\n      autocompleteItemActive: {\n        backgroundColor: \"#fafafa\"\n      }\n    };\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"boxes\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"row\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"col-md-6 col-lg-4\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(PlacesAutocomplete, {\n      value: this.state.originAddress,\n      onChange: this.handleChangeOrigin,\n      onSelect: this.handleSelectOrigin,\n      searchOptions: {\n        location: new window.google.maps.LatLng(53, -6),\n        radius: 1000 * 35,\n        types: [\"address\"]\n      },\n      styles: defaultStyles,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 15\n      }\n    }, ({\n      getInputProps,\n      suggestions,\n      getSuggestionItemProps,\n      loading\n    }) => /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 142,\n        columnNumber: 19\n      }\n    }, /*#__PURE__*/React.createElement(\"input\", Object.assign({\n      ref: this.getOrigin\n    }, getInputProps({\n      placeholder: \"   Origin\",\n      className: \"location-search-input\"\n    }), {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 143,\n        columnNumber: 21\n      }\n    })), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"autocomplete-dropdown-container\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 150,\n        columnNumber: 21\n      }\n    }, loading && /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 151,\n        columnNumber: 35\n      }\n    }, \"Loading...\"), suggestions.map(suggestion => {\n      // inline style for demonstration purpose\n      const style = suggestion.active ? {\n        backgroundColor: \"#42a5f5\",\n        cursor: \"pointer\"\n      } : {\n        backgroundColor: \"#ffffff\",\n        cursor: \"pointer\"\n      };\n      return /*#__PURE__*/React.createElement(\"div\", Object.assign({\n        className: \"input-suggestion\"\n      }, getSuggestionItemProps(suggestion, {\n        style\n      }), {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 158,\n          columnNumber: 27\n        }\n      }), /*#__PURE__*/React.createElement(\"span\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 164,\n          columnNumber: 29\n        }\n      }, suggestion.description));\n    }))))), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"col-md-6 col-lg-4\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 173,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(PlacesAutocomplete, {\n      value: this.state.destinationAddress,\n      onChange: this.handleChangeDestination,\n      onSelect: this.handleSelectDestination,\n      searchOptions: {\n        location: new window.google.maps.LatLng(53, -6),\n        radius: 1000 * 35,\n        types: [\"address\"]\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 174,\n        columnNumber: 15\n      }\n    }, ({\n      getInputProps,\n      suggestions,\n      getSuggestionItemProps,\n      loading\n    }) => /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 190,\n        columnNumber: 19\n      }\n    }, /*#__PURE__*/React.createElement(\"input\", Object.assign({\n      ref: this.getDestination\n    }, getInputProps({\n      placeholder: \"   Destination\",\n      className: \"location-search-input\"\n    }), {\n      onSelectCapture: this.onClick,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 191,\n        columnNumber: 21\n      }\n    })), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"autocomplete-dropdown-container\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 199,\n        columnNumber: 21\n      }\n    }, loading && /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 200,\n        columnNumber: 35\n      }\n    }, \"Loading...\"), suggestions.map(suggestion => {\n      // inline style for demonstration purpose\n      const style = suggestion.active ? {\n        backgroundColor: \"#42a5f5\",\n        cursor: \"pointer\"\n      } : {\n        backgroundColor: \"#ffffff\",\n        cursor: \"pointer\"\n      };\n      return /*#__PURE__*/React.createElement(\"div\", Object.assign({\n        className: \"input-suggestion\"\n      }, getSuggestionItemProps(suggestion, {\n        style\n      }), {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 207,\n          columnNumber: 27\n        }\n      }), /*#__PURE__*/React.createElement(\"span\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 213,\n          columnNumber: 29\n        }\n      }, suggestion.description));\n    }))))), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"col-md-6 col-lg-4\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 222,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Autocomplete, {\n      onLoad: this.onLoad,\n      onPlaceChanged: this.onPlaceChanged,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 223,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(\"input\", {\n      type: \"text\",\n      placeholder: \"Customized your placeholder\",\n      style: {\n        boxSizing: `border-box`,\n        border: `1px solid transparent`,\n        width: `240px`,\n        height: `32px`,\n        padding: `0 12px`,\n        borderRadius: `3px`,\n        boxShadow: `0 2px 6px rgba(0, 0, 0, 0.3)`,\n        fontSize: `14px`,\n        outline: `none`,\n        textOverflow: `ellipses`,\n        position: \"absolute\",\n        left: \"50%\",\n        marginLeft: \"-120px\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 227,\n        columnNumber: 17\n      }\n    }))))), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"map-container\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 251,\n        columnNumber: 9\n      }\n    }, this.state.destination !== \"\" && this.state.origin !== \"\" && /*#__PURE__*/React.createElement(DirectionsService // required\n    , {\n      options: {\n        destination: this.state.destination,\n        origin: this.state.origin,\n        travelMode: this.state.travelMode\n      } // required\n      ,\n      callback: this.directionsCallback,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 253,\n        columnNumber: 13\n      }\n    }), this.state.response !== null && /*#__PURE__*/React.createElement(DirectionsRenderer // required\n    , {\n      options: {\n        directions: this.state.response\n      },\n      panel: document.getElementById(\"panel\"),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 266,\n        columnNumber: 13\n      }\n    })));\n  }\n\n}\n\nexport default Directions;","map":{"version":3,"sources":["/Users/evanbyrnes/Pycharm-python-workspace/T13_SP/client/src/components/Directions.js"],"names":["React","PlacesAutocomplete","geocodeByAddress","getLatLng","Component","require","DirectionsRenderer","DirectionsService","Autocomplete","Directions","constructor","props","handleChangeOrigin","originAddress","setState","handleSelectOrigin","then","results","latLng","console","log","catch","error","handleChangeDestination","destinationAddress","handleSelectDestination","state","response","travelMode","origin","destination","directionsCallback","bind","getOrigin","getDestination","onClick","onMapClick","status","ref","value","args","render","defaultStyles","root","position","paddingBottom","input","display","width","padding","autocompleteContainer","top","backgroundColor","border","autocompleteItem","color","cursor","autocompleteItemActive","location","window","google","maps","LatLng","radius","types","getInputProps","suggestions","getSuggestionItemProps","loading","placeholder","className","map","suggestion","style","active","description","onLoad","onPlaceChanged","boxSizing","height","borderRadius","boxShadow","fontSize","outline","textOverflow","left","marginLeft","directions","document","getElementById"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport PlacesAutocomplete, {\n  geocodeByAddress,\n  getLatLng,\n} from \"react-places-autocomplete\";\nconst { Component } = require(\"react\");\nconst {\n  DirectionsRenderer,\n  DirectionsService,\n  Autocomplete,\n} = require(\"@react-google-maps/api\");\n\nclass Directions extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      response: null,\n      travelMode: \"TRANSIT\",\n      origin: \"\",\n      destination: \"\",\n      originAddress: \"\",\n      destinationAddress: \"\",\n    };\n\n    this.directionsCallback = this.directionsCallback.bind(this);\n    this.getOrigin = this.getOrigin.bind(this);\n    this.getDestination = this.getDestination.bind(this);\n    this.onClick = this.onClick.bind(this);\n    this.onMapClick = this.onMapClick.bind(this);\n  }\n\n  directionsCallback(response) {\n    console.log(\"hi, \", response);\n\n    if (response !== null) {\n      if (response.status === \"OK\") {\n        this.setState(() => ({\n          response,\n        }));\n      } else {\n        console.log(\"response: \", response);\n      }\n    }\n  }\n\n  getOrigin(ref) {\n    this.origin = ref;\n  }\n\n  getDestination(ref) {\n    this.destination = ref;\n  }\n\n  onClick() {\n    if (this.origin.value !== \"\" && this.destination.value !== \"\") {\n      this.setState(() => ({\n        origin: this.origin.value,\n        destination: this.destination.value,\n      }));\n    }\n  }\n\n  onMapClick(...args) {\n    console.log(\"onClick args: \", args);\n  }\n\n  handleChangeOrigin = (originAddress) => {\n    this.setState({ originAddress });\n  };\n\n  handleSelectOrigin = (originAddress) => {\n    geocodeByAddress(originAddress)\n      .then((results) => getLatLng(results[0]))\n      .then((latLng) => console.log(\"Success\", latLng))\n      .catch((error) => console.error(\"Error\", error));\n    this.setState({ originAddress });\n  };\n\n  handleChangeDestination = (destinationAddress) => {\n    this.setState({ destinationAddress });\n  };\n\n  handleSelectDestination = (destinationAddress) => {\n    geocodeByAddress(destinationAddress)\n      .then((results) => getLatLng(results[0]))\n      .then((latLng) => console.log(\"Success\", latLng))\n      .catch((error) => console.error(\"Error\", error));\n    this.setState({ destinationAddress });\n  };\n\n  render() {\n    const defaultStyles = {\n      root: {\n        position: \"relative\",\n        paddingBottom: \"0px\",\n      },\n      input: {\n        display: \"inline-block\",\n        width: \"100%\",\n        padding: \"10px\",\n      },\n      autocompleteContainer: {\n        position: \"absolute\",\n        top: \"100%\",\n        backgroundColor: \"white\",\n        border: \"1px solid #555555\",\n        width: \"100%\",\n      },\n      autocompleteItem: {\n        backgroundColor: \"#ffffff\",\n        padding: \"10px\",\n        color: \"#555555\",\n        cursor: \"pointer\",\n      },\n      autocompleteItemActive: {\n        backgroundColor: \"#fafafa\",\n      },\n    };\n    return (\n      <div className=\"\">\n        <div className=\"boxes\">\n          <div className=\"row\">\n            <div className=\"col-md-6 col-lg-4\">\n              <PlacesAutocomplete\n                value={this.state.originAddress}\n                onChange={this.handleChangeOrigin}\n                onSelect={this.handleSelectOrigin}\n                searchOptions={{\n                  location: new window.google.maps.LatLng(53, -6),\n                  radius: 1000 * 35,\n                  types: [\"address\"],\n                }}\n                styles={defaultStyles}\n              >\n                {({\n                  getInputProps,\n                  suggestions,\n                  getSuggestionItemProps,\n                  loading,\n                }) => (\n                  <div>\n                    <input\n                      ref={this.getOrigin}\n                      {...getInputProps({\n                        placeholder: \"   Origin\",\n                        className: \"location-search-input\",\n                      })}\n                    />\n                    <div className=\"autocomplete-dropdown-container\">\n                      {loading && <div>Loading...</div>}\n                      {suggestions.map((suggestion) => {\n                        // inline style for demonstration purpose\n                        const style = suggestion.active\n                          ? { backgroundColor: \"#42a5f5\", cursor: \"pointer\" }\n                          : { backgroundColor: \"#ffffff\", cursor: \"pointer\" };\n                        return (\n                          <div\n                            className=\"input-suggestion\"\n                            {...getSuggestionItemProps(suggestion, {\n                              style,\n                            })}\n                          >\n                            <span>{suggestion.description}</span>\n                          </div>\n                        );\n                      })}\n                    </div>\n                  </div>\n                )}\n              </PlacesAutocomplete>\n            </div>\n            <div className=\"col-md-6 col-lg-4\">\n              <PlacesAutocomplete\n                value={this.state.destinationAddress}\n                onChange={this.handleChangeDestination}\n                onSelect={this.handleSelectDestination}\n                searchOptions={{\n                  location: new window.google.maps.LatLng(53, -6),\n                  radius: 1000 * 35,\n                  types: [\"address\"],\n                }}\n              >\n                {({\n                  getInputProps,\n                  suggestions,\n                  getSuggestionItemProps,\n                  loading,\n                }) => (\n                  <div>\n                    <input\n                      ref={this.getDestination}\n                      {...getInputProps({\n                        placeholder: \"   Destination\",\n                        className: \"location-search-input\",\n                      })}\n                      onSelectCapture={this.onClick}\n                    />\n                    <div className=\"autocomplete-dropdown-container\">\n                      {loading && <div>Loading...</div>}\n                      {suggestions.map((suggestion) => {\n                        // inline style for demonstration purpose\n                        const style = suggestion.active\n                          ? { backgroundColor: \"#42a5f5\", cursor: \"pointer\" }\n                          : { backgroundColor: \"#ffffff\", cursor: \"pointer\" };\n                        return (\n                          <div\n                            className=\"input-suggestion\"\n                            {...getSuggestionItemProps(suggestion, {\n                              style,\n                            })}\n                          >\n                            <span>{suggestion.description}</span>\n                          </div>\n                        );\n                      })}\n                    </div>\n                  </div>\n                )}\n              </PlacesAutocomplete>\n            </div>\n            <div className=\"col-md-6 col-lg-4\">\n              <Autocomplete\n                onLoad={this.onLoad}\n                onPlaceChanged={this.onPlaceChanged}\n              >\n                <input\n                  type=\"text\"\n                  placeholder=\"Customized your placeholder\"\n                  style={{\n                    boxSizing: `border-box`,\n                    border: `1px solid transparent`,\n                    width: `240px`,\n                    height: `32px`,\n                    padding: `0 12px`,\n                    borderRadius: `3px`,\n                    boxShadow: `0 2px 6px rgba(0, 0, 0, 0.3)`,\n                    fontSize: `14px`,\n                    outline: `none`,\n                    textOverflow: `ellipses`,\n                    position: \"absolute\",\n                    left: \"50%\",\n                    marginLeft: \"-120px\",\n                  }}\n                />\n              </Autocomplete>\n            </div>\n          </div>\n        </div>\n\n        <div className=\"map-container\">\n          {this.state.destination !== \"\" && this.state.origin !== \"\" && (\n            <DirectionsService\n              // required\n              options={{\n                destination: this.state.destination,\n                origin: this.state.origin,\n                travelMode: this.state.travelMode,\n              }}\n              // required\n              callback={this.directionsCallback}\n            />\n          )}\n\n          {this.state.response !== null && (\n            <DirectionsRenderer\n              // required\n              options={{\n                directions: this.state.response,\n              }}\n              panel={document.getElementById(\"panel\")}\n            />\n          )}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Directions;\n"]},"metadata":{},"sourceType":"module"}