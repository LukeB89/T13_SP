{"ast":null,"code":"var _jsxFileName = \"/Users/evanbyrnes/Pycharm-python-workspace/T13_SP/client/src/components/T13GoogleMap.js\";\nimport React, { useState } from \"react\";\nimport { useLoadScript, GoogleMap, Marker, InfoWindow, MarkerClusterer } from \"@react-google-maps/api\";\nimport useSwr from \"swr\";\nimport googleMapApiKey from \".././config\";\nimport * as datal from \".././data/db-stops.json\"; // Import custom styles to customize the style of Google Map\n\nconst styles = require(\"../data/GoogleMapStyles.json\");\n\nconst options = {\n  imagePath: \"https://developers.google.com/maps/documentation/javascript/examples/markerclusterer/m\"\n};\n\nconst fetcher = (...args) => fetch(...args).then(response => response.json());\n\nexport default function T13GoogleMap() {\n  // The things we need to track in state\n  const [mapRef, setMapRef] = useState(null);\n  const [selectedPlace, setSelectedPlace] = useState(null);\n  const [markerMap, setMarkerMap] = useState({}); // consts: [53.349804, -6.260310] - Dublin\n\n  const [center, setCenter] = useState({\n    lat: 53.349804,\n    lng: -6.26031\n  });\n  const [zoom, setZoom] = useState(11);\n  const [infoOpen, setInfoOpen] = useState(false); // Load the Google maps scripts\n\n  const {\n    isLoaded\n  } = useLoadScript({\n    // Enter your own Google Maps API key in config.js\n    googleMapsApiKey: googleMapApiKey\n  });\n  const url = \"https://data.smartdublin.ie/cgi-bin/rtpi/busstopinformation?operator=bac\";\n  const {\n    data,\n    error\n  } = useSwr(url, {\n    fetcher\n  });\n  const stopData = data && !error ? data : [];\n\n  try {\n    const myStops = stopData.results.map(stop => ({\n      type: \"Feature\",\n      properties: {\n        id: stop.stopid,\n        fullname: stop.fullname,\n        routes: stop.operators[0].routes\n      },\n      geometry: {\n        type: \"Point\",\n        pos: {\n          lat: parseFloat(stop.latitude),\n          lng: parseFloat(stop.longitude)\n        }\n      }\n    })); // Iterate myStops to size, center, and zoom map to contain all markers\n\n    const fitBounds = map => {\n      const bounds = new window.google.maps.LatLngBounds();\n      myStops.map(stop => {\n        bounds.extend(stop.geometry.pos);\n        return stop.properties.id;\n      });\n      map.fitBounds(bounds);\n    };\n\n    const loadHandler = map => {\n      // Store a reference to the google map instance in state\n      setMapRef(map); // Fit map bounds to contain all markers\n\n      fitBounds(map);\n    }; // We have to create a mapping of our places to actual Marker objects\n\n\n    const markerLoadHandler = (marker, stop) => {\n      return setMarkerMap(prevState => {\n        return { ...prevState,\n          [stop.properties.id]: marker\n        };\n      });\n    };\n\n    const markerClickHandler = (event, place) => {\n      // Remember which stop was clicked\n      setSelectedPlace(place); // Required so clicking a 2nd marker works as expected\n\n      if (infoOpen) {\n        setInfoOpen(false);\n      }\n\n      setInfoOpen(true); // If you want to zoom in a little on marker click\n\n      if (zoom < 11) {\n        setZoom(11);\n      } // if you want to center the selected Marker\n      //setCenter(place.pos)\n\n    };\n\n    const renderPage = () => {\n      return /*#__PURE__*/React.createElement(GoogleMap, {\n        onLoad: loadHandler,\n        onCenterChanged: () => setCenter(mapRef.getCenter().toJSON()),\n        center: center,\n        zoom: zoom,\n        options: {\n          styles: styles\n        },\n        mapContainerStyle: {\n          height: \"94vh\"\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 107,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(MarkerClusterer, {\n        options: options,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 117,\n          columnNumber: 11\n        }\n      }, clusterer => myStops.map(stop => /*#__PURE__*/React.createElement(Marker, {\n        key: stop.properties.id,\n        position: stop.geometry.pos,\n        clusterer: clusterer,\n        onLoad: marker => markerLoadHandler(marker, stop),\n        onClick: event => markerClickHandler(event, stop),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 120,\n          columnNumber: 17\n        }\n      }))), infoOpen && selectedPlace && /*#__PURE__*/React.createElement(InfoWindow, {\n        anchor: markerMap[selectedPlace.properties.id],\n        onCloseClick: () => setInfoOpen(false),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 132,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 136,\n          columnNumber: 15\n        }\n      }, /*#__PURE__*/React.createElement(\"h3\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 137,\n          columnNumber: 17\n        }\n      }, \"STOPID: \", selectedPlace.properties.id), /*#__PURE__*/React.createElement(\"h5\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 138,\n          columnNumber: 17\n        }\n      }, \"ROUTES: \", selectedPlace.properties.routes.join(\", \")))));\n    };\n\n    return isLoaded ? renderPage() : null;\n  } catch {\n    const oneStop = stopData.results === undefined;\n    console.log(oneStop);\n  }\n} // const points = stop.map((stop) => ({\n//   type: \"Feature\",\n//   properties: {\n//     id: stop.stopid,\n//     fullname: stop.fullname,\n//     routes: stop.operators[0].routes,\n//   },\n//   geometry: {\n//     type: \"Point\",\n//     pos: {\n//       lat: parseFloat(stop.latitude),\n//       lng: parseFloat(stop.longitude),\n//     },\n//   },\n// }));\n// console.log(stopData.results);\n// const uncleanData = stopData.results;\n// const url =\n//   \"https://data.police.uk/api/crimes-street/all-crime?lat=52.629729&lng=-1.131592&date=2019-10\";\n// const { data, error } = useSwr(url, { fetcher });\n// const crimes = data && !error ? data : [];\n// console.log(\"Crime data here\", crimes);\n// const points = crimes.map((crime) => ({\n//   type: \"Feature\",\n//   properties: { cluster: false, crimeId: crime.id, category: crime.category },\n//   geometry: {\n//     type: \"Point\",\n//     coordinates: [\n//       parseFloat(crime.location.longitude),\n//       parseFloat(crime.location.latitude),\n//     ],\n//   },\n// }));\n\nconst uncleanData = datal.results; // A GeoJSON Feature object, with the geometry/pos of each object being a GeoJSON Point\n// ref: https://tools.ietf.org/html/rfc7946#section-3.2\n\nconst myStops = uncleanData.map(stop => ({\n  type: \"Feature\",\n  properties: {\n    id: stop.stopid,\n    fullname: stop.fullname,\n    routes: stop.operators[0].routes\n  },\n  geometry: {\n    type: \"Point\",\n    pos: {\n      lat: parseFloat(stop.latitude),\n      lng: parseFloat(stop.longitude)\n    }\n  }\n})); //   // Iterate myStops to size, center, and zoom map to contain all markers\n//   const fitBounds = (map) => {\n//     const bounds = new window.google.maps.LatLngBounds();\n//     myStops.map((stop) => {\n//       bounds.extend(stop.geometry.pos);\n//       return stop.properties.id;\n//     });\n//     map.fitBounds(bounds);\n//   };\n//   const loadHandler = (map) => {\n//     // Store a reference to the google map instance in state\n//     setMapRef(map);\n//     // Fit map bounds to contain all markers\n//     fitBounds(map);\n//   };\n//   // We have to create a mapping of our places to actual Marker objects\n//   const markerLoadHandler = (marker, stop) => {\n//     return setMarkerMap((prevState) => {\n//       return { ...prevState, [stop.properties.id]: marker };\n//     });\n//   };\n//   const markerClickHandler = (event, place) => {\n//     // Remember which stop was clicked\n//     setSelectedPlace(place);\n//     // Required so clicking a 2nd marker works as expected\n//     if (infoOpen) {\n//       setInfoOpen(false);\n//     }\n//     setInfoOpen(true);\n//     // If you want to zoom in a little on marker click\n//     if (zoom < 11) {\n//       setZoom(11);\n//     }\n//     // if you want to center the selected Marker\n//     //setCenter(place.pos)\n//   };\n//   const renderPage = () => {\n//     return (\n//       <GoogleMap\n//         onLoad={loadHandler}\n//         onCenterChanged={() => setCenter(mapRef.getCenter().toJSON())}\n//         center={center}\n//         zoom={zoom}\n//         options={{ styles: styles }}\n//         mapContainerStyle={{\n//           height: \"94vh\",\n//         }}\n//       >\n//         <MarkerClusterer options={options}>\n//           {(clusterer) =>\n//             myStops.map((stop) => (\n//               <Marker\n//                 key={stop.properties.id}\n//                 position={stop.geometry.pos}\n//                 clusterer={clusterer}\n//                 onLoad={(marker) => markerLoadHandler(marker, stop)}\n//                 onClick={(event) => markerClickHandler(event, stop)}\n//               />\n//             ))\n//           }\n//         </MarkerClusterer>\n//         {infoOpen && selectedPlace && (\n//           <InfoWindow\n//             anchor={markerMap[selectedPlace.properties.id]}\n//             onCloseClick={() => setInfoOpen(false)}\n//           >\n//             <div>\n//               <h3>STOPID: {selectedPlace.properties.id}</h3>\n//               <h5>ROUTES: {selectedPlace.properties.routes.join(\", \")}</h5>\n//             </div>\n//           </InfoWindow>\n//         )}\n//       </GoogleMap>\n//     );\n//   };\n//   return isLoaded ? renderPage() : null;\n// }","map":{"version":3,"sources":["/Users/evanbyrnes/Pycharm-python-workspace/T13_SP/client/src/components/T13GoogleMap.js"],"names":["React","useState","useLoadScript","GoogleMap","Marker","InfoWindow","MarkerClusterer","useSwr","googleMapApiKey","datal","styles","require","options","imagePath","fetcher","args","fetch","then","response","json","T13GoogleMap","mapRef","setMapRef","selectedPlace","setSelectedPlace","markerMap","setMarkerMap","center","setCenter","lat","lng","zoom","setZoom","infoOpen","setInfoOpen","isLoaded","googleMapsApiKey","url","data","error","stopData","myStops","results","map","stop","type","properties","id","stopid","fullname","routes","operators","geometry","pos","parseFloat","latitude","longitude","fitBounds","bounds","window","google","maps","LatLngBounds","extend","loadHandler","markerLoadHandler","marker","prevState","markerClickHandler","event","place","renderPage","getCenter","toJSON","height","clusterer","join","oneStop","undefined","console","log","uncleanData"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport {\n  useLoadScript,\n  GoogleMap,\n  Marker,\n  InfoWindow,\n  MarkerClusterer,\n} from \"@react-google-maps/api\";\nimport useSwr from \"swr\";\n\nimport googleMapApiKey from \".././config\";\nimport * as datal from \".././data/db-stops.json\";\n\n// Import custom styles to customize the style of Google Map\nconst styles = require(\"../data/GoogleMapStyles.json\");\n\nconst options = {\n  imagePath:\n    \"https://developers.google.com/maps/documentation/javascript/examples/markerclusterer/m\",\n};\n\nconst fetcher = (...args) => fetch(...args).then((response) => response.json());\n\nexport default function T13GoogleMap() {\n  // The things we need to track in state\n  const [mapRef, setMapRef] = useState(null);\n  const [selectedPlace, setSelectedPlace] = useState(null);\n  const [markerMap, setMarkerMap] = useState({});\n  // consts: [53.349804, -6.260310] - Dublin\n  const [center, setCenter] = useState({ lat: 53.349804, lng: -6.26031 });\n  const [zoom, setZoom] = useState(11);\n  const [infoOpen, setInfoOpen] = useState(false);\n\n  // Load the Google maps scripts\n  const { isLoaded } = useLoadScript({\n    // Enter your own Google Maps API key in config.js\n    googleMapsApiKey: googleMapApiKey,\n  });\n\n  const url =\n    \"https://data.smartdublin.ie/cgi-bin/rtpi/busstopinformation?operator=bac\";\n  const { data, error } = useSwr(url, { fetcher });\n  const stopData = data && !error ? data : [];\n  try {\n    const myStops = stopData.results.map((stop) => ({\n      type: \"Feature\",\n      properties: {\n        id: stop.stopid,\n        fullname: stop.fullname,\n        routes: stop.operators[0].routes,\n      },\n      geometry: {\n        type: \"Point\",\n        pos: {\n          lat: parseFloat(stop.latitude),\n          lng: parseFloat(stop.longitude),\n        },\n      },\n    }));\n\n    // Iterate myStops to size, center, and zoom map to contain all markers\n    const fitBounds = (map) => {\n      const bounds = new window.google.maps.LatLngBounds();\n      myStops.map((stop) => {\n        bounds.extend(stop.geometry.pos);\n        return stop.properties.id;\n      });\n      map.fitBounds(bounds);\n    };\n\n    const loadHandler = (map) => {\n      // Store a reference to the google map instance in state\n      setMapRef(map);\n      // Fit map bounds to contain all markers\n      fitBounds(map);\n    };\n\n    // We have to create a mapping of our places to actual Marker objects\n    const markerLoadHandler = (marker, stop) => {\n      return setMarkerMap((prevState) => {\n        return { ...prevState, [stop.properties.id]: marker };\n      });\n    };\n\n    const markerClickHandler = (event, place) => {\n      // Remember which stop was clicked\n      setSelectedPlace(place);\n\n      // Required so clicking a 2nd marker works as expected\n      if (infoOpen) {\n        setInfoOpen(false);\n      }\n\n      setInfoOpen(true);\n\n      // If you want to zoom in a little on marker click\n      if (zoom < 11) {\n        setZoom(11);\n      }\n\n      // if you want to center the selected Marker\n      //setCenter(place.pos)\n    };\n\n    const renderPage = () => {\n      return (\n        <GoogleMap\n          onLoad={loadHandler}\n          onCenterChanged={() => setCenter(mapRef.getCenter().toJSON())}\n          center={center}\n          zoom={zoom}\n          options={{ styles: styles }}\n          mapContainerStyle={{\n            height: \"94vh\",\n          }}\n        >\n          <MarkerClusterer options={options}>\n            {(clusterer) =>\n              myStops.map((stop) => (\n                <Marker\n                  key={stop.properties.id}\n                  position={stop.geometry.pos}\n                  clusterer={clusterer}\n                  onLoad={(marker) => markerLoadHandler(marker, stop)}\n                  onClick={(event) => markerClickHandler(event, stop)}\n                />\n              ))\n            }\n          </MarkerClusterer>\n\n          {infoOpen && selectedPlace && (\n            <InfoWindow\n              anchor={markerMap[selectedPlace.properties.id]}\n              onCloseClick={() => setInfoOpen(false)}\n            >\n              <div>\n                <h3>STOPID: {selectedPlace.properties.id}</h3>\n                <h5>ROUTES: {selectedPlace.properties.routes.join(\", \")}</h5>\n              </div>\n            </InfoWindow>\n          )}\n        </GoogleMap>\n      );\n    };\n    return isLoaded ? renderPage() : null;\n  } catch {\n    const oneStop = stopData.results === undefined;\n    console.log(oneStop);\n  }\n}\n\n// const points = stop.map((stop) => ({\n//   type: \"Feature\",\n//   properties: {\n//     id: stop.stopid,\n//     fullname: stop.fullname,\n//     routes: stop.operators[0].routes,\n//   },\n//   geometry: {\n//     type: \"Point\",\n//     pos: {\n//       lat: parseFloat(stop.latitude),\n//       lng: parseFloat(stop.longitude),\n//     },\n//   },\n// }));\n// console.log(stopData.results);\n\n// const uncleanData = stopData.results;\n\n// const url =\n//   \"https://data.police.uk/api/crimes-street/all-crime?lat=52.629729&lng=-1.131592&date=2019-10\";\n// const { data, error } = useSwr(url, { fetcher });\n// const crimes = data && !error ? data : [];\n// console.log(\"Crime data here\", crimes);\n// const points = crimes.map((crime) => ({\n//   type: \"Feature\",\n//   properties: { cluster: false, crimeId: crime.id, category: crime.category },\n//   geometry: {\n//     type: \"Point\",\n//     coordinates: [\n//       parseFloat(crime.location.longitude),\n//       parseFloat(crime.location.latitude),\n//     ],\n//   },\n// }));\n\nconst uncleanData = datal.results;\n// A GeoJSON Feature object, with the geometry/pos of each object being a GeoJSON Point\n// ref: https://tools.ietf.org/html/rfc7946#section-3.2\nconst myStops = uncleanData.map((stop) => ({\n  type: \"Feature\",\n  properties: {\n    id: stop.stopid,\n    fullname: stop.fullname,\n    routes: stop.operators[0].routes,\n  },\n  geometry: {\n    type: \"Point\",\n    pos: {\n      lat: parseFloat(stop.latitude),\n      lng: parseFloat(stop.longitude),\n    },\n  },\n}));\n\n//   // Iterate myStops to size, center, and zoom map to contain all markers\n//   const fitBounds = (map) => {\n//     const bounds = new window.google.maps.LatLngBounds();\n//     myStops.map((stop) => {\n//       bounds.extend(stop.geometry.pos);\n//       return stop.properties.id;\n//     });\n//     map.fitBounds(bounds);\n//   };\n\n//   const loadHandler = (map) => {\n//     // Store a reference to the google map instance in state\n//     setMapRef(map);\n//     // Fit map bounds to contain all markers\n//     fitBounds(map);\n//   };\n\n//   // We have to create a mapping of our places to actual Marker objects\n//   const markerLoadHandler = (marker, stop) => {\n//     return setMarkerMap((prevState) => {\n//       return { ...prevState, [stop.properties.id]: marker };\n//     });\n//   };\n\n//   const markerClickHandler = (event, place) => {\n//     // Remember which stop was clicked\n//     setSelectedPlace(place);\n\n//     // Required so clicking a 2nd marker works as expected\n//     if (infoOpen) {\n//       setInfoOpen(false);\n//     }\n\n//     setInfoOpen(true);\n\n//     // If you want to zoom in a little on marker click\n//     if (zoom < 11) {\n//       setZoom(11);\n//     }\n\n//     // if you want to center the selected Marker\n//     //setCenter(place.pos)\n//   };\n\n//   const renderPage = () => {\n//     return (\n//       <GoogleMap\n//         onLoad={loadHandler}\n//         onCenterChanged={() => setCenter(mapRef.getCenter().toJSON())}\n//         center={center}\n//         zoom={zoom}\n//         options={{ styles: styles }}\n//         mapContainerStyle={{\n//           height: \"94vh\",\n//         }}\n//       >\n//         <MarkerClusterer options={options}>\n//           {(clusterer) =>\n//             myStops.map((stop) => (\n//               <Marker\n//                 key={stop.properties.id}\n//                 position={stop.geometry.pos}\n//                 clusterer={clusterer}\n//                 onLoad={(marker) => markerLoadHandler(marker, stop)}\n//                 onClick={(event) => markerClickHandler(event, stop)}\n//               />\n//             ))\n//           }\n//         </MarkerClusterer>\n\n//         {infoOpen && selectedPlace && (\n//           <InfoWindow\n//             anchor={markerMap[selectedPlace.properties.id]}\n//             onCloseClick={() => setInfoOpen(false)}\n//           >\n//             <div>\n//               <h3>STOPID: {selectedPlace.properties.id}</h3>\n//               <h5>ROUTES: {selectedPlace.properties.routes.join(\", \")}</h5>\n//             </div>\n//           </InfoWindow>\n//         )}\n//       </GoogleMap>\n//     );\n//   };\n//   return isLoaded ? renderPage() : null;\n// }\n"]},"metadata":{},"sourceType":"module"}