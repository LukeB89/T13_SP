{"ast":null,"code":"var _jsxFileName = \"/Users/evanbyrnes/Pycharm-python-workspace/T13_SP/client/src/App.js\";\nimport React, { useState } from \"react\";\nimport useSwr from \"swr\";\nimport styled from 'styled-components';\nimport { Navbar, Nav, NavDropdown, Form, FormControl, Button } from 'react-bootstrap';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport { useLoadScript, GoogleMap, Marker, InfoWindow, MarkerClusterer } from \"@react-google-maps/api\";\nimport googleMapApiKey from './config';\nimport Api from './components/Api';\nimport DateTimeSelector from './components/DateTimeSelector';\nimport * as data from \"./data/db-stops.json\";\nconst Wrapper = styled.main`\n  width: 100%;\n  height: 100%;\n`;\nconst options = {\n  imagePath: \"https://developers.google.com/maps/documentation/javascript/examples/markerclusterer/m\"\n};\nexport default function App() {\n  // The things we need to track in state\n  const [mapRef, setMapRef] = useState(null);\n  const [selectedPlace, setSelectedPlace] = useState(null);\n  const [markerMap, setMarkerMap] = useState({}); // consts: [53.349804, -6.260310] - Dublin\n\n  const [center, setCenter] = useState({\n    lat: 53.349804,\n    lng: -6.260310\n  });\n  const [zoom, setZoom] = useState(10); // const [clickedLatLng, setClickedLatLng] = useState(null);\n\n  const [infoOpen, setInfoOpen] = useState(false); // Load the Google maps scripts\n\n  const {\n    isLoaded\n  } = useLoadScript({\n    // Enter your own Google Maps API key in config.js\n    googleMapsApiKey: googleMapApiKey\n  }); // Currently reading in data variable from db-stops.json file, will use API in future, see three lines below\n  //   const url = \"https://data.smartdublin.ie/cgi-bin/rtpi/busstopinformation?operator=bac\";\n  //   const { data, error } = useSwr(url, { fetcher });\n  //   const stopData = data && !error ? data.slice(0, 4200) : [];\n  // Currently reading in data variable from db-stops.json file, will use API in future, see three commented lines above.\n\n  const uncleanData = data.results; // A GeoJSON Feature object, with the geometry/pos of each object being a GeoJSON Point\n  // ref: https://tools.ietf.org/html/rfc7946#section-3.2\n\n  const myStops = uncleanData.map(stop => ({\n    type: \"Feature\",\n    properties: {\n      id: stop.stopid,\n      fullname: stop.fullname,\n      routes: stop.operators[0].routes\n    },\n    geometry: {\n      type: \"Point\",\n      pos: {\n        lat: parseFloat(stop.latitude),\n        lng: parseFloat(stop.longitude)\n      }\n    }\n  })); // Iterate myStops to size, center, and zoom map to contain all markers\n\n  const fitBounds = map => {\n    const bounds = new window.google.maps.LatLngBounds();\n    myStops.map(stop => {\n      bounds.extend(stop.geometry.pos);\n      return stop.properties.id;\n    });\n    map.fitBounds(bounds);\n  };\n\n  const loadHandler = map => {\n    // Store a reference to the google map instance in state\n    setMapRef(map); // Fit map bounds to contain all markers\n\n    fitBounds(map);\n  }; // We have to create a mapping of our places to actual Marker objects\n\n\n  const markerLoadHandler = (marker, stop) => {\n    return setMarkerMap(prevState => {\n      return { ...prevState,\n        [stop.properties.id]: marker\n      };\n    });\n  };\n\n  const markerClickHandler = (event, place) => {\n    // Remember which stop was clicked\n    setSelectedPlace(place); // Required so clicking a 2nd marker works as expected\n\n    if (infoOpen) {\n      setInfoOpen(false);\n    }\n\n    setInfoOpen(true); // If you want to zoom in a little on marker click\n\n    if (zoom < 11) {\n      setZoom(11);\n    } // if you want to center the selected Marker\n    //setCenter(place.pos)\n\n  };\n\n  const renderPage = () => {\n    return /*#__PURE__*/React.createElement(Wrapper, {\n      style: {\n        height: \"100%\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(Navbar, {\n      bg: \"light\",\n      expand: \"lg\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 1\n      }\n    }, /*#__PURE__*/React.createElement(Navbar.Brand, {\n      href: \"#home\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 3\n      }\n    }, \"React-Bootstrap\"), /*#__PURE__*/React.createElement(Navbar.Toggle, {\n      \"aria-controls\": \"basic-navbar-nav\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 3\n      }\n    }), /*#__PURE__*/React.createElement(Navbar.Collapse, {\n      id: \"basic-navbar-nav\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 3\n      }\n    }, /*#__PURE__*/React.createElement(Nav, {\n      className: \"mr-auto\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 5\n      }\n    }, /*#__PURE__*/React.createElement(Nav.Link, {\n      href: \"#home\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 7\n      }\n    }, \"Home\"), /*#__PURE__*/React.createElement(Nav.Link, {\n      href: \"#link\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 7\n      }\n    }, \"Link\"), /*#__PURE__*/React.createElement(NavDropdown, {\n      title: \"Dropdown\",\n      id: \"basic-nav-dropdown\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 132,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(NavDropdown.Item, {\n      href: \"#action/3.1\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 133,\n        columnNumber: 9\n      }\n    }, \"Action\"), /*#__PURE__*/React.createElement(NavDropdown.Item, {\n      href: \"#action/3.2\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 134,\n        columnNumber: 9\n      }\n    }, \"Another action\"), /*#__PURE__*/React.createElement(NavDropdown.Item, {\n      href: \"#action/3.3\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 135,\n        columnNumber: 9\n      }\n    }, \"Something\"), /*#__PURE__*/React.createElement(NavDropdown.Divider, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 136,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(NavDropdown.Item, {\n      href: \"#action/3.4\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 137,\n        columnNumber: 9\n      }\n    }, \"Separated link\"))), /*#__PURE__*/React.createElement(Form, {\n      inline: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 140,\n        columnNumber: 5\n      }\n    }, /*#__PURE__*/React.createElement(FormControl, {\n      type: \"text\",\n      placeholder: \"Search\",\n      className: \"mr-sm-2\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 141,\n        columnNumber: 7\n      }\n    }), /*#__PURE__*/React.createElement(Button, {\n      variant: \"outline-success\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 142,\n        columnNumber: 7\n      }\n    }, \"Search\")))), /*#__PURE__*/React.createElement(Wrapper, {\n      style: {\n        width: \"75%\",\n        float: \"left\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 148,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(GoogleMap // Do stuff on map initial laod\n    , {\n      onLoad: loadHandler // Save the current center position in state\n      ,\n      onCenterChanged: () => setCenter(mapRef.getCenter().toJSON()) // Save the user's map click position\n      // onClick={e => setClickedLatLng(e.latLng.toJSON())}\n      ,\n      center: center,\n      zoom: zoom,\n      mapContainerStyle: {\n        height: \"99vh\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 149,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(MarkerClusterer, {\n      options: options,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 162,\n        columnNumber: 15\n      }\n    }, clusterer => myStops.map(stop => /*#__PURE__*/React.createElement(Marker, {\n      key: stop.properties.id,\n      position: stop.geometry.pos,\n      clusterer: clusterer,\n      onLoad: marker => markerLoadHandler(marker, stop),\n      onClick: event => markerClickHandler(event, stop),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 165,\n        columnNumber: 21\n      }\n    }))), infoOpen && selectedPlace && /*#__PURE__*/React.createElement(InfoWindow, {\n      anchor: markerMap[selectedPlace.properties.id],\n      onCloseClick: () => setInfoOpen(false),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 177,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 181,\n        columnNumber: 19\n      }\n    }, /*#__PURE__*/React.createElement(\"h3\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 182,\n        columnNumber: 21\n      }\n    }, \"STOPID: \", selectedPlace.properties.id), /*#__PURE__*/React.createElement(\"h5\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 183,\n        columnNumber: 21\n      }\n    }, \"ROUTES: \", selectedPlace.properties.routes.join(', ')))))), /*#__PURE__*/React.createElement(Wrapper, {\n      style: {\n        width: \"25%\",\n        float: \"right\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 192,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(DateTimeSelector, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 194,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(Api, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 196,\n        columnNumber: 13\n      }\n    })));\n  };\n\n  return isLoaded ? renderPage() : null;\n}","map":{"version":3,"sources":["/Users/evanbyrnes/Pycharm-python-workspace/T13_SP/client/src/App.js"],"names":["React","useState","useSwr","styled","Navbar","Nav","NavDropdown","Form","FormControl","Button","useLoadScript","GoogleMap","Marker","InfoWindow","MarkerClusterer","googleMapApiKey","Api","DateTimeSelector","data","Wrapper","main","options","imagePath","App","mapRef","setMapRef","selectedPlace","setSelectedPlace","markerMap","setMarkerMap","center","setCenter","lat","lng","zoom","setZoom","infoOpen","setInfoOpen","isLoaded","googleMapsApiKey","uncleanData","results","myStops","map","stop","type","properties","id","stopid","fullname","routes","operators","geometry","pos","parseFloat","latitude","longitude","fitBounds","bounds","window","google","maps","LatLngBounds","extend","loadHandler","markerLoadHandler","marker","prevState","markerClickHandler","event","place","renderPage","height","width","float","getCenter","toJSON","clusterer","join"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport useSwr from \"swr\";\nimport styled from 'styled-components';\nimport {\n    Navbar,\n    Nav,\n    NavDropdown,\n    Form,\n    FormControl,\n    Button\n} from 'react-bootstrap';\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nimport {\n  useLoadScript,\n  GoogleMap,\n  Marker,\n  InfoWindow,\n  MarkerClusterer\n} from \"@react-google-maps/api\";\n\nimport googleMapApiKey from './config';\nimport Api from './components/Api';\nimport DateTimeSelector from './components/DateTimeSelector';\n\nimport * as data from \"./data/db-stops.json\";\n\nconst Wrapper = styled.main`\n  width: 100%;\n  height: 100%;\n`;\n\nconst options = {\n  imagePath: \"https://developers.google.com/maps/documentation/javascript/examples/markerclusterer/m\"\n};\n\nexport default function App() {\n  // The things we need to track in state\n  const [mapRef, setMapRef] = useState(null);\n  const [selectedPlace, setSelectedPlace] = useState(null);\n  const [markerMap, setMarkerMap] = useState({});\n  // consts: [53.349804, -6.260310] - Dublin\n  const [center, setCenter] = useState({ lat: 53.349804, lng: -6.260310 });\n  const [zoom, setZoom] = useState(10);\n  // const [clickedLatLng, setClickedLatLng] = useState(null);\n  const [infoOpen, setInfoOpen] = useState(false);\n\n  // Load the Google maps scripts\n  const { isLoaded } = useLoadScript({\n    // Enter your own Google Maps API key in config.js\n    googleMapsApiKey: googleMapApiKey\n\n  });\n\n  // Currently reading in data variable from db-stops.json file, will use API in future, see three lines below\n//   const url = \"https://data.smartdublin.ie/cgi-bin/rtpi/busstopinformation?operator=bac\";\n//   const { data, error } = useSwr(url, { fetcher });\n//   const stopData = data && !error ? data.slice(0, 4200) : [];\n  // Currently reading in data variable from db-stops.json file, will use API in future, see three commented lines above.\n  const uncleanData = data.results;\n  // A GeoJSON Feature object, with the geometry/pos of each object being a GeoJSON Point\n  // ref: https://tools.ietf.org/html/rfc7946#section-3.2\n  const myStops = uncleanData.map(stop => ({\n    type: \"Feature\",\n    properties: { id: stop.stopid, fullname: stop.fullname, routes: stop.operators[0].routes },\n    geometry: {\n      type: \"Point\",\n      pos: {\n        lat: parseFloat(stop.latitude),\n        lng: parseFloat(stop.longitude)  \n      }\n    }\n  }));\n\n  // Iterate myStops to size, center, and zoom map to contain all markers\n  const fitBounds = map => {\n    const bounds = new window.google.maps.LatLngBounds();\n    myStops.map(stop => {\n      bounds.extend(stop.geometry.pos);\n      return stop.properties.id;\n    });\n    map.fitBounds(bounds);\n  };\n\n  const loadHandler = map => {\n    // Store a reference to the google map instance in state\n    setMapRef(map);\n    // Fit map bounds to contain all markers\n    fitBounds(map);\n  };\n\n  // We have to create a mapping of our places to actual Marker objects\n  const markerLoadHandler = (marker, stop) => {\n    return setMarkerMap(prevState => {\n      return { ...prevState, [stop.properties.id]: marker };\n    });\n  };\n\n  const markerClickHandler = (event, place) => {\n    // Remember which stop was clicked\n    setSelectedPlace(place);\n\n    // Required so clicking a 2nd marker works as expected\n    if (infoOpen) {\n      setInfoOpen(false);\n    }\n\n    setInfoOpen(true);\n\n    // If you want to zoom in a little on marker click\n    if (zoom < 11) {\n      setZoom(11);\n    }\n\n    // if you want to center the selected Marker\n    //setCenter(place.pos)\n  };\n\n\n  const renderPage = () => {\n    return (\n        <Wrapper style={{ height: \"100%\"}}>\n\n<Navbar bg=\"light\" expand=\"lg\">\n  <Navbar.Brand href=\"#home\">React-Bootstrap</Navbar.Brand>\n  <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\n  <Navbar.Collapse id=\"basic-navbar-nav\">\n    <Nav className=\"mr-auto\">\n      <Nav.Link href=\"#home\">Home</Nav.Link>\n      <Nav.Link href=\"#link\">Link</Nav.Link>\n      <NavDropdown title=\"Dropdown\" id=\"basic-nav-dropdown\">\n        <NavDropdown.Item href=\"#action/3.1\">Action</NavDropdown.Item>\n        <NavDropdown.Item href=\"#action/3.2\">Another action</NavDropdown.Item>\n        <NavDropdown.Item href=\"#action/3.3\">Something</NavDropdown.Item>\n        <NavDropdown.Divider />\n        <NavDropdown.Item href=\"#action/3.4\">Separated link</NavDropdown.Item>\n      </NavDropdown>\n    </Nav>\n    <Form inline>\n      <FormControl type=\"text\" placeholder=\"Search\" className=\"mr-sm-2\" />\n      <Button variant=\"outline-success\">Search</Button>\n    </Form>\n  </Navbar.Collapse>\n</Navbar>\n\n\n          <Wrapper style={{ width: \"75%\", float: \"left\"}}>\n            <GoogleMap\n              // Do stuff on map initial laod\n              onLoad={loadHandler}\n              // Save the current center position in state\n              onCenterChanged={() => setCenter(mapRef.getCenter().toJSON())}\n              // Save the user's map click position\n              // onClick={e => setClickedLatLng(e.latLng.toJSON())}\n              center={center}\n              zoom={zoom}\n              mapContainerStyle={{\n                height: \"99vh\"\n              }}\n            >\n              <MarkerClusterer options={options}>\n                {clusterer =>\n                  myStops.map(stop => (\n                    <Marker \n                      key={stop.properties.id} \n                      position={stop.geometry.pos} \n                      clusterer={clusterer} \n                      onLoad={marker => markerLoadHandler(marker, stop)}\n                      onClick={event => markerClickHandler(event, stop)}\n                      />\n                  ))\n                }\n              </MarkerClusterer>\n\n              {infoOpen && selectedPlace && (\n                <InfoWindow\n                  anchor={markerMap[selectedPlace.properties.id]}\n                  onCloseClick={() => setInfoOpen(false)}\n                >\n                  <div>\n                    <h3>STOPID: {selectedPlace.properties.id}</h3>\n                    <h5>ROUTES: {selectedPlace.properties.routes.join(', ')}</h5>\n                    {/* <div>This is your info window content</div> */}\n                  </div>\n                </InfoWindow>\n              )}\n\n            </GoogleMap>\n          </Wrapper>\n          \n          <Wrapper style= {{ width: \"25%\", float: \"right\" }}>\n\n            <DateTimeSelector></DateTimeSelector>\n            {/* Rendering the database information from here. */}\n            <Api />\n\n          </Wrapper>\n\n        </Wrapper>\n    );\n  };\n\n  return isLoaded ? renderPage() : null;\n}\n"]},"metadata":{},"sourceType":"module"}