{"ast":null,"code":"var _jsxFileName = \"/Users/evanbyrnes/Pycharm-python-workspace/T13_SP/client/src/components/ModelApi.js\";\nimport React, { useState } from \"react\";\n\nconst axios = require(\"axios\");\n\nexport default function ModelApi(props) {\n  const [message, setMessage] = useState({\n    message: \"\"\n  });\n  const [modelResponse, setModelResponse] = useState();\n  const [percentileResponse, setPercentileResponse] = useState();\n  React.useEffect(() => {\n    if (parseInt(props.timeDayMonth) === 0) {\n      // initial render should be nothing.\n      return undefined;\n    } else axios.get(`/api/model_result`, {\n      params: {\n        chosenTime: props.timeDayMonth[0],\n        chosenDay: props.timeDayMonth[1],\n        // chosenMonth: props.timeDayMonth[2],\n        origin: props.originNumber,\n        destination: props.destinationNumber\n      }\n    }).then(res => {\n      const modelResponse = res.data;\n      setModelResponse(modelResponse);\n      setMessage({\n        message: \"This journey is estimated to take \" + modelResponse.model_response + \" minutes\"\n      });\n      console.log(\"setModelResponse has been triggered with the following values: \", props.timeDayMonth[0], props.timeDayMonth[1], props.timeDayMonth[2]);\n    });\n  }, // Listening for changes to props in order to\n  // trigger a call to the API  to re-render the component.\n  [props]);\n  React.useEffect(() => {\n    if (parseInt(props.timeDayMonth) === 0) {\n      // initial render should be nothing.\n      return undefined;\n    } else axios.get(`/api/percentile_result`, {\n      params: {\n        chosenTime: props.timeDayMonth[0],\n        chosenDay: props.timeDayMonth[1],\n        chosenMonth: props.timeDayMonth[2]\n      }\n    }).then(res => {\n      const modelResponse = res.data;\n      setModelResponse(modelResponse);\n      setMessage({\n        message: \"This journey is estimated to take \" + modelResponse.model_response + \" minutes\"\n      });\n      console.log(\"setModelResponse has been triggered with the following values: \", props.timeDayMonth[0], props.timeDayMonth[1], props.timeDayMonth[2]);\n    });\n  }, // Listening for changes to props in order to\n  // trigger a call to the API  to re-render the component.\n  [props]);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 7\n    }\n  }, message.message));\n}","map":{"version":3,"sources":["/Users/evanbyrnes/Pycharm-python-workspace/T13_SP/client/src/components/ModelApi.js"],"names":["React","useState","axios","require","ModelApi","props","message","setMessage","modelResponse","setModelResponse","percentileResponse","setPercentileResponse","useEffect","parseInt","timeDayMonth","undefined","get","params","chosenTime","chosenDay","origin","originNumber","destination","destinationNumber","then","res","data","model_response","console","log","chosenMonth"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\n\nconst axios = require(\"axios\");\n\nexport default function ModelApi(props) {\n  const [message, setMessage] = useState({ message: \"\" });\n  const [modelResponse, setModelResponse] = useState();\n  const [percentileResponse, setPercentileResponse] = useState();\n\n  React.useEffect(\n    () => {\n      if (parseInt(props.timeDayMonth) === 0) {\n        // initial render should be nothing.\n        return undefined;\n      } else\n        axios\n          .get(`/api/model_result`, {\n            params: {\n              chosenTime: props.timeDayMonth[0],\n              chosenDay: props.timeDayMonth[1],\n              // chosenMonth: props.timeDayMonth[2],\n              origin: props.originNumber,\n              destination: props.destinationNumber,\n            },\n          })\n          .then((res) => {\n            const modelResponse = res.data;\n            setModelResponse(modelResponse);\n            setMessage({\n              message:\n                \"This journey is estimated to take \" +\n                modelResponse.model_response +\n                \" minutes\",\n            });\n\n            console.log(\n              \"setModelResponse has been triggered with the following values: \",\n              props.timeDayMonth[0],\n              props.timeDayMonth[1],\n              props.timeDayMonth[2]\n            );\n          });\n    },\n    // Listening for changes to props in order to\n    // trigger a call to the API  to re-render the component.\n    [props]\n  );\n\n  React.useEffect(\n    () => {\n      if (parseInt(props.timeDayMonth) === 0) {\n        // initial render should be nothing.\n        return undefined;\n      } else\n        axios\n          .get(`/api/percentile_result`, {\n            params: {\n              chosenTime: props.timeDayMonth[0],\n              chosenDay: props.timeDayMonth[1],\n              chosenMonth: props.timeDayMonth[2],\n            },\n          })\n          .then((res) => {\n            const modelResponse = res.data;\n            setModelResponse(modelResponse);\n            setMessage({\n              message:\n                \"This journey is estimated to take \" +\n                modelResponse.model_response +\n                \" minutes\",\n            });\n\n            console.log(\n              \"setModelResponse has been triggered with the following values: \",\n              props.timeDayMonth[0],\n              props.timeDayMonth[1],\n              props.timeDayMonth[2]\n            );\n          });\n    },\n    // Listening for changes to props in order to\n    // trigger a call to the API  to re-render the component.\n    [props]\n  );\n\n  return (\n    <div>\n      <p>{message.message}</p>\n    </div>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}