{"ast":null,"code":"var _jsxFileName = \"/Users/evanbyrnes/Pycharm-python-workspace/T13_SP/client/src/AppCopy.js\";\n// Importing outside developed components.\nimport React, { useState, Component } from \"react\";\nimport { useLoadScript, GoogleMap, Marker, InfoWindow, MarkerClusterer } from \"@react-google-maps/api\";\nimport Container from \"react-bootstrap/Container\";\nimport Form from \"react-bootstrap/Form\";\nimport { Typeahead } from \"react-bootstrap-typeahead\";\nimport styled from \"styled-components\";\nimport useSwr from \"swr\"; // Importing self-developed components.\n\nimport Api from \"./components/Api\";\nimport DateTimeSelector from \"./components/DateTimeSelector\";\nimport BrandBar from \"./components/BrandBar\";\nimport PlanDirections from \"./components/PlanDirections\"; // import Table from \"./components/Table\";\n// Importing outside developed css.\n\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"@reach/combobox/styles.css\"; // Importing the Dublin Bus API stops data\n\nimport * as data from \"./data/db-stops.json\"; // Temporarily import the stop data.\n\nimport * as rawStopData from \"./data/stop-2-data.json\"; // Importing Google Maps Api Key.\n\nimport googleMapApiKey from \"./config\"; // Defining libraries for Google Places\n\nconst libraries = [\"places\"]; // Defined styling for separation of page displayed.\n\nconst Wrapper = styled.main`\n  width: 100%;\n  height: 100%;\n`; // Importing custom styles to customize the style of Google Map.\n// Important for including and excluding markers etc.\n\nconst styles = require(\"./data/GoogleMapStyles.json\"); // Defined custom styles and location for Google Map.\n\n\nconst mapOptions = {\n  styles: styles,\n  disableDefaultUI: true,\n  zoomControl: true\n};\nconst mapContainerStyle = {\n  height: \"94vh\"\n}; // consts: [53.349804, -6.260310] - Dublin\n\nconst dublinCenter = {\n  lat: 53.349804,\n  lng: -6.30131\n}; // Icon used to represent a bus stop on the map.\n\nconst icon = {\n  url: \"/bus_icon.svg\",\n  scaledSize: {\n    width: 18,\n    height: 18\n  }\n}; // Icons used when Markers are clustered.\n\nconst options = {\n  imagePath: \"https://developers.google.com/maps/documentation/javascript/examples/markerclusterer/m\"\n}; // Parsing the Stops data into various object shapes.\n\nconst rawData = data.results;\nconst myStops = rawData.map(stop => ({\n  description: \"Stop \" + stop.stopid + \", \" + stop.fullname,\n  type: \"Feature\",\n  properties: {\n    id: stop.stopid,\n    fullname: stop.fullname,\n    routes: stop.operators[0].routes\n  },\n  geometry: {\n    type: \"Point\",\n    pos: {\n      lat: parseFloat(stop.latitude),\n      lng: parseFloat(stop.longitude)\n    }\n  }\n}));\nconst parsedStops = myStops.map(parsed => ({\n  id: parsed.properties.id,\n  description: parsed.description,\n  geometry: parsed.geometry.pos\n})); // An array that contains only the names of all the stops.\n\nconst stopDescriptions = [];\n\nfor (var i = 0; i < parsedStops.length; i++) {\n  stopDescriptions.push(parsedStops[i].description);\n} //\n\n\nconst url = \"https://data.smartdublin.ie/cgi-bin/rtpi/realtimebusinformation?stopid=2&operator=bac\"; // const { data, error } = useSwr(url, { fetcher });\n// Parsing the Stops data into various object shapes.\n\nconst stopData = rawStopData.results;\nconst stopInfo = stopData.map(info => ({\n  id: info.arrivaldatetime,\n  route: info.route,\n  destination: info.destination,\n  arrivaltime: info.duetime\n})); // Main function to draw the Map/Page.\n\nexport default function App() {\n  const {\n    isLoaded,\n    loadError\n  } = useLoadScript({\n    googleMapsApiKey: googleMapApiKey,\n    libraries\n  });\n  const [center, setCenter] = useState(dublinCenter);\n  const [zoom, setZoom] = useState(11); // The things we need to track in state\n\n  const [selectedPlace, setSelectedPlace] = useState(null);\n  const [markerMap, setMarkerMap] = useState({});\n  const [infoOpen, setInfoOpen] = useState(false);\n  const [markers, setMarkers] = React.useState([]);\n  const [selected, setSelected] = React.useState(null);\n  const mapRef = React.useRef();\n  const onMapLoad = React.useCallback(map => {\n    mapRef.current = map;\n  }, []);\n  const panTo = React.useCallback(({\n    lat,\n    lng\n  }) => {\n    mapRef.current.panTo({\n      lat,\n      lng\n    });\n    mapRef.current.setZoom(16); //\n\n    setMarkers(current => [...current, {\n      lat: lat,\n      lng: lng\n    }]);\n  }, []); // We have to create a mapping of our places to actual Marker objects\n\n  const markerLoadHandler = (marker, stop) => {\n    return setMarkerMap(prevState => {\n      return { ...prevState,\n        [stop.properties.id]: marker\n      };\n    });\n  };\n\n  const markerClickHandler = (event, place) => {\n    // Remember which stop was clicked\n    setSelectedPlace(place); // Required so clicking a 2nd marker works as expected\n\n    if (infoOpen) {\n      setInfoOpen(false);\n    }\n\n    setInfoOpen(true);\n  };\n\n  if (loadError) return \"Error\";\n  if (!isLoaded) return \"Loading...\";\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 154,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Container, {\n    fluid: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 155,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(BrandBar, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 156,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(Wrapper, {\n    style: {\n      width: \"75%\",\n      float: \"left\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 157,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(GoogleMap, {\n    mapContainerStyle: mapContainerStyle,\n    center: center,\n    zoom: zoom,\n    maxZoom: 13,\n    options: mapOptions,\n    onLoad: onMapLoad,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 159,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(Locate, {\n    panTo: panTo,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 167,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(MarkerClusterer, {\n    options: options,\n    maxZoom: 16,\n    minimumClusterSize: 4,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 169,\n      columnNumber: 13\n    }\n  }, clusterer => myStops.map(stop => /*#__PURE__*/React.createElement(Marker, {\n    icon: icon,\n    key: stop.properties.id,\n    position: stop.geometry.pos,\n    clusterer: clusterer,\n    onLoad: marker => markerLoadHandler(marker, stop),\n    onClick: event => markerClickHandler(event, stop),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 176,\n      columnNumber: 19\n    }\n  }))), infoOpen && selectedPlace && /*#__PURE__*/React.createElement(InfoWindow, {\n    anchor: markerMap[selectedPlace.properties.id],\n    onCloseClick: () => setInfoOpen(false),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 189,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 193,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"h3\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 194,\n      columnNumber: 19\n    }\n  }, \"Stop Number: \", selectedPlace.properties.id), /*#__PURE__*/React.createElement(\"h5\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 195,\n      columnNumber: 19\n    }\n  }, \"Routes: \", selectedPlace.properties.routes.join(\", \")))), markers.map(marker => /*#__PURE__*/React.createElement(Marker, {\n    key: `${marker.lat}-${marker.lng}`,\n    position: {\n      lat: marker.lat,\n      lng: marker.lng\n    },\n    onClick: () => {\n      setSelected(marker);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 201,\n      columnNumber: 15\n    }\n  })), /*#__PURE__*/React.createElement(PlanDirections, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 209,\n      columnNumber: 13\n    }\n  }))), /*#__PURE__*/React.createElement(Wrapper, {\n    style: {\n      width: \"25%\",\n      float: \"right\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 213,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Container, {\n    style: {\n      paddingTop: \"5vh\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 214,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(DateTimeSelector, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 215,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(Page, {\n    number: \"3\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 222,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    id: \"panel\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 229,\n      columnNumber: 13\n    }\n  })))));\n} // Function to adjust the map to user location.\n\nfunction Locate({\n  panTo\n}) {\n  return /*#__PURE__*/React.createElement(\"button\", {\n    className: \"locate\",\n    onClick: () => {\n      navigator.geolocation.getCurrentPosition( // Hard coding Dublin for the time being.\n      position => {\n        panTo({\n          // lat: position.coords.latitude,\n          // lng: position.coords.longitude,\n          lat: dublinCenter.lat,\n          lng: dublinCenter.lng\n        });\n      }, () => null);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 240,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"img\", {\n    alt: \"compass\",\n    src: \"/compass.svg\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 257,\n      columnNumber: 7\n    }\n  }));\n} // Function to adjust the map to user selected stop(s).\n\n\nfunction Search({\n  panTo\n}) {\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 265,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Typeahead, {\n    id: \"basic-example\",\n    options: stopDescriptions,\n    maxVisible: 2,\n    placeholder: \"Choose a stop...\",\n    onOptionSelected: address => {\n      try {\n        for (var i = 0; i < parsedStops.length; i++) {\n          if (address == parsedStops[i].description) {\n            const lat = parsedStops[i].geometry.lat,\n                  lng = parsedStops[i].geometry.lng;\n            panTo({\n              lat,\n              lng\n            }); //include a call to the api here\n          }\n        }\n      } catch (error) {\n        console.log(\"error\");\n      }\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 266,\n      columnNumber: 7\n    }\n  }));\n} // Function that calls the real time api depending on the stop number passed to it.\n\n\nfunction CallStopInfo(props) {\n  const fetcher = (...args) => fetch(...args).then(response => response.json());\n\n  const url = \"https://data.smartdublin.ie/cgi-bin/rtpi/realtimebusinformation?stopid=\" + props.number + \"&operator=bac\";\n  const {\n    data,\n    error\n  } = useSwr(url, {\n    fetcher\n  });\n  const rawStopData = data && !error ? data : // creating a placeholder object while awaiting api response\n  {\n    results: [{\n      arrivaldatetime: \"08/07/2020 00:00:00\",\n      route: \"\",\n      destination: \"\",\n      duetime: \"\"\n    }]\n  };\n  console.log(rawStopData); // Parsing the Stops data into various object shapes.\n\n  const stopData = rawStopData.results;\n  console.log(stopData);\n  const stopInfo = stopData.map(info => ({\n    id: info.arrivaldatetime,\n    route: info.route,\n    destination: info.destination,\n    arrivaltime: info.duetime\n  }));\n  console.log(stopInfo[0].id);\n  return stopInfo;\n} // function getMoviesFromApiAsync() {\n//   return fetch(\n//     \"https://data.smartdublin.ie/cgi-bin/rtpi/realtimebusinformation?stopid=2&operator=bac\"\n//   )\n//     .then((response) => response.json())\n//     .then((responseJson) => {\n//       return responseJson.movies;\n//     })\n//     .catch((error) => {\n//       console.error(error);\n//     });\n// }\n// getMoviesFromApiAsync();\n// Function to create a table to display real time information.\n\n\nfunction ArrivalEstimate() {\n  const realInfo = CallStopInfo();\n  return /*#__PURE__*/React.createElement(\"table\", {\n    singleLine: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 346,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"tr\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 347,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"th\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 348,\n      columnNumber: 9\n    }\n  }, \"Route\"), /*#__PURE__*/React.createElement(\"th\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 349,\n      columnNumber: 9\n    }\n  }, \"Destination\"), /*#__PURE__*/React.createElement(\"th\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 350,\n      columnNumber: 9\n    }\n  }, \"Arrival\")), realInfo.map(info => {\n    return /*#__PURE__*/React.createElement(\"tr\", {\n      key: info.id,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 355,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 356,\n        columnNumber: 13\n      }\n    }, info.route), /*#__PURE__*/React.createElement(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 357,\n        columnNumber: 13\n      }\n    }, info.destination), /*#__PURE__*/React.createElement(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 358,\n        columnNumber: 13\n      }\n    }, info.arrivaltime, \" mins\"));\n  }));\n} // Conditional function displaying depending on input.\n\n\nfunction DisplayEstimate(props) {\n  if (!props.estimate) {\n    return null;\n  }\n\n  return /*#__PURE__*/React.createElement(ArrivalEstimate, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 371,\n      columnNumber: 10\n    }\n  });\n} // Class to handle the input for displaying the table.\n\n\nclass Page extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      showEstimate: false\n    };\n    this.handleToggleClick = this.handleToggleClick.bind(this);\n  }\n\n  handleToggleClick() {\n    this.setState(prevState => ({\n      showEstimate: !prevState.showWarning\n    }));\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 390,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(Typeahead, {\n      id: \"basic-example\",\n      options: stopDescriptions,\n      maxVisible: 2,\n      placeholder: \"Choose a stop...\",\n      onChange: this.handleToggleClick,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 391,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(DisplayEstimate, {\n      estimate: this.state.showEstimate,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 398,\n        columnNumber: 9\n      }\n    }));\n  }\n\n}","map":{"version":3,"sources":["/Users/evanbyrnes/Pycharm-python-workspace/T13_SP/client/src/AppCopy.js"],"names":["React","useState","Component","useLoadScript","GoogleMap","Marker","InfoWindow","MarkerClusterer","Container","Form","Typeahead","styled","useSwr","Api","DateTimeSelector","BrandBar","PlanDirections","data","rawStopData","googleMapApiKey","libraries","Wrapper","main","styles","require","mapOptions","disableDefaultUI","zoomControl","mapContainerStyle","height","dublinCenter","lat","lng","icon","url","scaledSize","width","options","imagePath","rawData","results","myStops","map","stop","description","stopid","fullname","type","properties","id","routes","operators","geometry","pos","parseFloat","latitude","longitude","parsedStops","parsed","stopDescriptions","i","length","push","stopData","stopInfo","info","arrivaldatetime","route","destination","arrivaltime","duetime","App","isLoaded","loadError","googleMapsApiKey","center","setCenter","zoom","setZoom","selectedPlace","setSelectedPlace","markerMap","setMarkerMap","infoOpen","setInfoOpen","markers","setMarkers","selected","setSelected","mapRef","useRef","onMapLoad","useCallback","current","panTo","markerLoadHandler","marker","prevState","markerClickHandler","event","place","float","clusterer","join","paddingTop","Locate","navigator","geolocation","getCurrentPosition","position","Search","address","error","console","log","CallStopInfo","props","fetcher","args","fetch","then","response","json","number","ArrivalEstimate","realInfo","DisplayEstimate","estimate","Page","constructor","state","showEstimate","handleToggleClick","bind","setState","showWarning","render"],"mappings":"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","sourcesContent":["// Importing outside developed components.\nimport React, { useState, Component } from \"react\";\nimport {\n  useLoadScript,\n  GoogleMap,\n  Marker,\n  InfoWindow,\n  MarkerClusterer,\n} from \"@react-google-maps/api\";\nimport Container from \"react-bootstrap/Container\";\nimport Form from \"react-bootstrap/Form\";\nimport { Typeahead } from \"react-bootstrap-typeahead\";\nimport styled from \"styled-components\";\nimport useSwr from \"swr\";\n// Importing self-developed components.\nimport Api from \"./components/Api\";\nimport DateTimeSelector from \"./components/DateTimeSelector\";\nimport BrandBar from \"./components/BrandBar\";\nimport PlanDirections from \"./components/PlanDirections\";\n// import Table from \"./components/Table\";\n// Importing outside developed css.\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"@reach/combobox/styles.css\";\n// Importing the Dublin Bus API stops data\nimport * as data from \"./data/db-stops.json\";\n// Temporarily import the stop data.\nimport * as rawStopData from \"./data/stop-2-data.json\";\n// Importing Google Maps Api Key.\nimport googleMapApiKey from \"./config\";\n// Defining libraries for Google Places\nconst libraries = [\"places\"];\n// Defined styling for separation of page displayed.\nconst Wrapper = styled.main`\n  width: 100%;\n  height: 100%;\n`;\n// Importing custom styles to customize the style of Google Map.\n// Important for including and excluding markers etc.\nconst styles = require(\"./data/GoogleMapStyles.json\");\n// Defined custom styles and location for Google Map.\nconst mapOptions = {\n  styles: styles,\n  disableDefaultUI: true,\n  zoomControl: true,\n};\nconst mapContainerStyle = {\n  height: \"94vh\",\n};\n// consts: [53.349804, -6.260310] - Dublin\nconst dublinCenter = {\n  lat: 53.349804,\n  lng: -6.30131,\n};\n// Icon used to represent a bus stop on the map.\nconst icon = {\n  url: \"/bus_icon.svg\",\n  scaledSize: { width: 18, height: 18 },\n};\n// Icons used when Markers are clustered.\nconst options = {\n  imagePath:\n    \"https://developers.google.com/maps/documentation/javascript/examples/markerclusterer/m\",\n};\n// Parsing the Stops data into various object shapes.\nconst rawData = data.results;\nconst myStops = rawData.map((stop) => ({\n  description: \"Stop \" + stop.stopid + \", \" + stop.fullname,\n  type: \"Feature\",\n  properties: {\n    id: stop.stopid,\n    fullname: stop.fullname,\n    routes: stop.operators[0].routes,\n  },\n  geometry: {\n    type: \"Point\",\n    pos: {\n      lat: parseFloat(stop.latitude),\n      lng: parseFloat(stop.longitude),\n    },\n  },\n}));\nconst parsedStops = myStops.map((parsed) => ({\n  id: parsed.properties.id,\n  description: parsed.description,\n  geometry: parsed.geometry.pos,\n}));\n// An array that contains only the names of all the stops.\nconst stopDescriptions = [];\nfor (var i = 0; i < parsedStops.length; i++) {\n  stopDescriptions.push(parsedStops[i].description);\n}\n//\nconst url =\n  \"https://data.smartdublin.ie/cgi-bin/rtpi/realtimebusinformation?stopid=2&operator=bac\";\n// const { data, error } = useSwr(url, { fetcher });\n// Parsing the Stops data into various object shapes.\nconst stopData = rawStopData.results;\nconst stopInfo = stopData.map((info) => ({\n  id: info.arrivaldatetime,\n  route: info.route,\n  destination: info.destination,\n  arrivaltime: info.duetime,\n}));\n\n// Main function to draw the Map/Page.\nexport default function App() {\n  const { isLoaded, loadError } = useLoadScript({\n    googleMapsApiKey: googleMapApiKey,\n    libraries,\n  });\n  const [center, setCenter] = useState(dublinCenter);\n  const [zoom, setZoom] = useState(11);\n  // The things we need to track in state\n  const [selectedPlace, setSelectedPlace] = useState(null);\n  const [markerMap, setMarkerMap] = useState({});\n  const [infoOpen, setInfoOpen] = useState(false);\n\n  const [markers, setMarkers] = React.useState([]);\n  const [selected, setSelected] = React.useState(null);\n\n  const mapRef = React.useRef();\n  const onMapLoad = React.useCallback((map) => {\n    mapRef.current = map;\n  }, []);\n\n  const panTo = React.useCallback(({ lat, lng }) => {\n    mapRef.current.panTo({ lat, lng });\n    mapRef.current.setZoom(16);\n    //\n    setMarkers((current) => [...current, { lat: lat, lng: lng }]);\n  }, []);\n\n  // We have to create a mapping of our places to actual Marker objects\n  const markerLoadHandler = (marker, stop) => {\n    return setMarkerMap((prevState) => {\n      return { ...prevState, [stop.properties.id]: marker };\n    });\n  };\n\n  const markerClickHandler = (event, place) => {\n    // Remember which stop was clicked\n    setSelectedPlace(place);\n    // Required so clicking a 2nd marker works as expected\n    if (infoOpen) {\n      setInfoOpen(false);\n    }\n    setInfoOpen(true);\n  };\n\n  if (loadError) return \"Error\";\n  if (!isLoaded) return \"Loading...\";\n\n  return (\n    <div>\n      <Container fluid>\n        <BrandBar></BrandBar>\n        <Wrapper style={{ width: \"75%\", float: \"left\" }}>\n          {/* Render the Google Map */}\n          <GoogleMap\n            mapContainerStyle={mapContainerStyle}\n            center={center}\n            zoom={zoom}\n            maxZoom={13}\n            options={mapOptions}\n            onLoad={onMapLoad}\n          >\n            <Locate panTo={panTo} />\n\n            <MarkerClusterer\n              options={options}\n              maxZoom={16}\n              minimumClusterSize={4}\n            >\n              {(clusterer) =>\n                myStops.map((stop) => (\n                  <Marker\n                    icon={icon}\n                    key={stop.properties.id}\n                    position={stop.geometry.pos}\n                    clusterer={clusterer}\n                    onLoad={(marker) => markerLoadHandler(marker, stop)}\n                    onClick={(event) => markerClickHandler(event, stop)}\n                  />\n                ))\n              }\n            </MarkerClusterer>\n\n            {infoOpen && selectedPlace && (\n              <InfoWindow\n                anchor={markerMap[selectedPlace.properties.id]}\n                onCloseClick={() => setInfoOpen(false)}\n              >\n                <div>\n                  <h3>Stop Number: {selectedPlace.properties.id}</h3>\n                  <h5>Routes: {selectedPlace.properties.routes.join(\", \")}</h5>\n                </div>\n              </InfoWindow>\n            )}\n            {/* Markers dropped on selection box choice. */}\n            {markers.map((marker) => (\n              <Marker\n                key={`${marker.lat}-${marker.lng}`}\n                position={{ lat: marker.lat, lng: marker.lng }}\n                onClick={() => {\n                  setSelected(marker);\n                }}\n              />\n            ))}\n            <PlanDirections></PlanDirections>\n          </GoogleMap>\n        </Wrapper>\n\n        <Wrapper style={{ width: \"25%\", float: \"right\" }}>\n          <Container style={{ paddingTop: \"5vh\" }}>\n            <DateTimeSelector></DateTimeSelector>\n            {/* <Form>\n              <Form.Group controlId=\"formDeparture\">\n                <Form.Label>Stop Information</Form.Label>\n                <Search panTo={panTo} />\n              </Form.Group>\n            </Form> */}\n            <Page number=\"3\" />\n            {/* <CallStopInfo number=\"3\" /> */}\n            {/* need to add an onclick event that relates to the database here. */}\n            {/* <Button variant=\"primary\" type=\"submit\" onClick>\n              Submit\n            </Button>\n            <Api></Api>*/}\n            <div id=\"panel\"></div>\n          </Container>\n        </Wrapper>\n      </Container>\n    </div>\n  );\n}\n\n// Function to adjust the map to user location.\nfunction Locate({ panTo }) {\n  return (\n    <button\n      className=\"locate\"\n      onClick={() => {\n        navigator.geolocation.getCurrentPosition(\n          // Hard coding Dublin for the time being.\n          (position) => {\n            panTo({\n              // lat: position.coords.latitude,\n              // lng: position.coords.longitude,\n              lat: dublinCenter.lat,\n              lng: dublinCenter.lng,\n            });\n          },\n          () => null\n        );\n      }}\n    >\n      <img alt=\"compass\" src=\"/compass.svg\" />\n    </button>\n  );\n}\n\n// Function to adjust the map to user selected stop(s).\nfunction Search({ panTo }) {\n  return (\n    <div>\n      <Typeahead\n        id=\"basic-example\"\n        options={stopDescriptions}\n        maxVisible={2}\n        placeholder=\"Choose a stop...\"\n        onOptionSelected={(address) => {\n          try {\n            for (var i = 0; i < parsedStops.length; i++) {\n              if (address == parsedStops[i].description) {\n                const lat = parsedStops[i].geometry.lat,\n                  lng = parsedStops[i].geometry.lng;\n                panTo({ lat, lng });\n                //include a call to the api here\n              }\n            }\n          } catch (error) {\n            console.log(\"error\");\n          }\n        }}\n      />\n    </div>\n  );\n}\n\n// Function that calls the real time api depending on the stop number passed to it.\nfunction CallStopInfo(props) {\n  const fetcher = (...args) =>\n    fetch(...args).then((response) => response.json());\n  const url =\n    \"https://data.smartdublin.ie/cgi-bin/rtpi/realtimebusinformation?stopid=\" +\n    props.number +\n    \"&operator=bac\";\n  const { data, error } = useSwr(url, { fetcher });\n  const rawStopData =\n    data && !error\n      ? data\n      : // creating a placeholder object while awaiting api response\n        {\n          results: [\n            {\n              arrivaldatetime: \"08/07/2020 00:00:00\",\n              route: \"\",\n              destination: \"\",\n              duetime: \"\",\n            },\n          ],\n        };\n  console.log(rawStopData);\n  // Parsing the Stops data into various object shapes.\n  const stopData = rawStopData.results;\n  console.log(stopData);\n  const stopInfo = stopData.map((info) => ({\n    id: info.arrivaldatetime,\n    route: info.route,\n    destination: info.destination,\n    arrivaltime: info.duetime,\n  }));\n  console.log(stopInfo[0].id);\n  return stopInfo;\n}\n\n// function getMoviesFromApiAsync() {\n//   return fetch(\n//     \"https://data.smartdublin.ie/cgi-bin/rtpi/realtimebusinformation?stopid=2&operator=bac\"\n//   )\n//     .then((response) => response.json())\n//     .then((responseJson) => {\n//       return responseJson.movies;\n//     })\n//     .catch((error) => {\n//       console.error(error);\n//     });\n// }\n\n// getMoviesFromApiAsync();\n\n// Function to create a table to display real time information.\nfunction ArrivalEstimate() {\n  const realInfo = CallStopInfo();\n  return (\n    <table singleLine>\n      <tr>\n        <th>Route</th>\n        <th>Destination</th>\n        <th>Arrival</th>\n      </tr>\n\n      {realInfo.map((info) => {\n        return (\n          <tr key={info.id}>\n            <td>{info.route}</td>\n            <td>{info.destination}</td>\n            <td>{info.arrivaltime} mins</td>\n          </tr>\n        );\n      })}\n    </table>\n  );\n}\n\n// Conditional function displaying depending on input.\nfunction DisplayEstimate(props) {\n  if (!props.estimate) {\n    return null;\n  }\n  return <ArrivalEstimate />;\n}\n\n// Class to handle the input for displaying the table.\nclass Page extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { showEstimate: false };\n    this.handleToggleClick = this.handleToggleClick.bind(this);\n  }\n\n  handleToggleClick() {\n    this.setState((prevState) => ({\n      showEstimate: !prevState.showWarning,\n    }));\n  }\n\n  render() {\n    return (\n      <div>\n        <Typeahead\n          id=\"basic-example\"\n          options={stopDescriptions}\n          maxVisible={2}\n          placeholder=\"Choose a stop...\"\n          onChange={this.handleToggleClick}\n        />\n        <DisplayEstimate estimate={this.state.showEstimate} />\n      </div>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}