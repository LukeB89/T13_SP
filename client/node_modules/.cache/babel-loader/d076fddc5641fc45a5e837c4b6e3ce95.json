{"ast":null,"code":"var _jsxFileName = \"/Users/evanbyrnes/Pycharm-python-workspace/T13_SP/client/src/components/RtpiApi.js\";\nimport React from \"react\";\nimport Table from \"react-bootstrap/Table\";\n\nconst axios = require(\"axios\"); // Makes GET request to Django API with user selected stopid as parameter.\n// Django makes GET request to the RTPI API, which React returns as a Table.\n// Clicking a bus stop's marker will display this Table.\n\n\nconst RtpiApi = () => {\n  const placeholder = {\n    results: [{\n      arrivaldatetime: \"08/07/2020 00:00:00\",\n      route: \"\",\n      destination: \"\",\n      duetime: \"\"\n    }]\n  };\n  const [rawStopData, setRawStopData] = React.useState(placeholder);\n  React.useEffect(() => {\n    axios.get(`/api/rtpi_api`, {\n      params: {\n        stopid: props.number\n      }\n    }).then(res => {\n      const rawStopData = res.data;\n      setRawStopData(rawStopData);\n    });\n  }, []);\n  const stopData = rawStopData.results;\n  const realInfo = stopData.map(info => ({\n    id: info.arrivaldatetime,\n    route: info.route,\n    destination: info.destination,\n    arrivaltime: info.duetime\n  }));\n\n  if (realInfo === []) {// this is used should the response be empty - to avoid an error\n    // might be okay to remove this line though - look into this more.\n    // const realInfo = placeholder;\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      maxHeight: \"15vh\",\n      overflowY: \"scroll\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Table, {\n    striped: true,\n    bordered: true,\n    hover: true,\n    size: \"sm\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"thead\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"tr\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"th\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 13\n    }\n  }, \"Route\"), /*#__PURE__*/React.createElement(\"th\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 13\n    }\n  }, \"Destination\"), /*#__PURE__*/React.createElement(\"th\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 13\n    }\n  }, \"Due\"))), /*#__PURE__*/React.createElement(\"tbody\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 9\n    }\n  }, realInfo.map(info => {\n    if (info.arrivaltime === \"Due\") return /*#__PURE__*/React.createElement(\"tr\", {\n      key: info.id,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 19\n      }\n    }, info.route), /*#__PURE__*/React.createElement(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 19\n      }\n    }, info.destination), /*#__PURE__*/React.createElement(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 19\n      }\n    }, info.arrivaltime));else {\n      return /*#__PURE__*/React.createElement(\"tr\", {\n        key: info.id,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(\"td\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 19\n        }\n      }, info.route), /*#__PURE__*/React.createElement(\"td\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 19\n        }\n      }, info.destination), /*#__PURE__*/React.createElement(\"td\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 19\n        }\n      }, info.arrivaltime, \" mins\"));\n    }\n  }))));\n};\n\nexport default RtpiApi;","map":{"version":3,"sources":["/Users/evanbyrnes/Pycharm-python-workspace/T13_SP/client/src/components/RtpiApi.js"],"names":["React","Table","axios","require","RtpiApi","placeholder","results","arrivaldatetime","route","destination","duetime","rawStopData","setRawStopData","useState","useEffect","get","params","stopid","props","number","then","res","data","stopData","realInfo","map","info","id","arrivaltime","maxHeight","overflowY"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,KAAP,MAAkB,uBAAlB;;AAEA,MAAMC,KAAK,GAAGC,OAAO,CAAC,OAAD,CAArB,C,CAEA;AACA;AACA;;;AACA,MAAMC,OAAO,GAAG,MAAM;AACpB,QAAMC,WAAW,GAAG;AAClBC,IAAAA,OAAO,EAAE,CACP;AACEC,MAAAA,eAAe,EAAE,qBADnB;AAEEC,MAAAA,KAAK,EAAE,EAFT;AAGEC,MAAAA,WAAW,EAAE,EAHf;AAIEC,MAAAA,OAAO,EAAE;AAJX,KADO;AADS,GAApB;AAUA,QAAM,CAACC,WAAD,EAAcC,cAAd,IAAgCZ,KAAK,CAACa,QAAN,CAAeR,WAAf,CAAtC;AAEAL,EAAAA,KAAK,CAACc,SAAN,CAAgB,MAAM;AACpBZ,IAAAA,KAAK,CACFa,GADH,CACQ,eADR,EACwB;AACpBC,MAAAA,MAAM,EAAE;AACNC,QAAAA,MAAM,EAAEC,KAAK,CAACC;AADR;AADY,KADxB,EAMGC,IANH,CAMSC,GAAD,IAAS;AACb,YAAMV,WAAW,GAAGU,GAAG,CAACC,IAAxB;AACAV,MAAAA,cAAc,CAACD,WAAD,CAAd;AACD,KATH;AAUD,GAXD,EAWG,EAXH;AAaA,QAAMY,QAAQ,GAAGZ,WAAW,CAACL,OAA7B;AACA,QAAMkB,QAAQ,GAAGD,QAAQ,CAACE,GAAT,CAAcC,IAAD,KAAW;AACvCC,IAAAA,EAAE,EAAED,IAAI,CAACnB,eAD8B;AAEvCC,IAAAA,KAAK,EAAEkB,IAAI,CAAClB,KAF2B;AAGvCC,IAAAA,WAAW,EAAEiB,IAAI,CAACjB,WAHqB;AAIvCmB,IAAAA,WAAW,EAAEF,IAAI,CAAChB;AAJqB,GAAX,CAAb,CAAjB;;AAMA,MAAIc,QAAQ,KAAK,EAAjB,EAAqB,CACnB;AACA;AACA;AACD;;AAED,sBACE;AAAK,IAAA,KAAK,EAAE;AAAEK,MAAAA,SAAS,EAAE,MAAb;AAAqBC,MAAAA,SAAS,EAAE;AAAhC,KAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,KAAD;AAAO,IAAA,OAAO,MAAd;AAAe,IAAA,QAAQ,MAAvB;AAAwB,IAAA,KAAK,MAA7B;AAA8B,IAAA,IAAI,EAAC,IAAnC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aADF,eAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAFF,eAGE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAHF,CADF,CADF,eAQE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGN,QAAQ,CAACC,GAAT,CAAcC,IAAD,IAAU;AACtB,QAAIA,IAAI,CAACE,WAAL,KAAqB,KAAzB,EACE,oBACE;AAAI,MAAA,GAAG,EAAEF,IAAI,CAACC,EAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAKD,IAAI,CAAClB,KAAV,CADF,eAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAKkB,IAAI,CAACjB,WAAV,CAFF,eAGE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAKiB,IAAI,CAACE,WAAV,CAHF,CADF,CADF,KAQK;AACH,0BACE;AAAI,QAAA,GAAG,EAAEF,IAAI,CAACC,EAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAKD,IAAI,CAAClB,KAAV,CADF,eAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAKkB,IAAI,CAACjB,WAAV,CAFF,eAGE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAKiB,IAAI,CAACE,WAAV,UAHF,CADF;AAOD;AACF,GAlBA,CADH,CARF,CADF,CADF;AAkCD,CAzED;;AA2EA,eAAexB,OAAf","sourcesContent":["import React from \"react\";\nimport Table from \"react-bootstrap/Table\";\n\nconst axios = require(\"axios\");\n\n// Makes GET request to Django API with user selected stopid as parameter.\n// Django makes GET request to the RTPI API, which React returns as a Table.\n// Clicking a bus stop's marker will display this Table.\nconst RtpiApi = () => {\n  const placeholder = {\n    results: [\n      {\n        arrivaldatetime: \"08/07/2020 00:00:00\",\n        route: \"\",\n        destination: \"\",\n        duetime: \"\",\n      },\n    ],\n  };\n  const [rawStopData, setRawStopData] = React.useState(placeholder);\n\n  React.useEffect(() => {\n    axios\n      .get(`/api/rtpi_api`, {\n        params: {\n          stopid: props.number,\n        },\n      })\n      .then((res) => {\n        const rawStopData = res.data;\n        setRawStopData(rawStopData);\n      });\n  }, []);\n\n  const stopData = rawStopData.results;\n  const realInfo = stopData.map((info) => ({\n    id: info.arrivaldatetime,\n    route: info.route,\n    destination: info.destination,\n    arrivaltime: info.duetime,\n  }));\n  if (realInfo === []) {\n    // this is used should the response be empty - to avoid an error\n    // might be okay to remove this line though - look into this more.\n    // const realInfo = placeholder;\n  }\n\n  return (\n    <div style={{ maxHeight: \"15vh\", overflowY: \"scroll\" }}>\n      <Table striped bordered hover size=\"sm\">\n        <thead>\n          <tr>\n            <th>Route</th>\n            <th>Destination</th>\n            <th>Due</th>\n          </tr>\n        </thead>\n        <tbody>\n          {realInfo.map((info) => {\n            if (info.arrivaltime === \"Due\")\n              return (\n                <tr key={info.id}>\n                  <td>{info.route}</td>\n                  <td>{info.destination}</td>\n                  <td>{info.arrivaltime}</td>\n                </tr>\n              );\n            else {\n              return (\n                <tr key={info.id}>\n                  <td>{info.route}</td>\n                  <td>{info.destination}</td>\n                  <td>{info.arrivaltime} mins</td>\n                </tr>\n              );\n            }\n          })}\n        </tbody>\n      </Table>\n    </div>\n  );\n};\n\nexport default RtpiApi;\n"]},"metadata":{},"sourceType":"module"}