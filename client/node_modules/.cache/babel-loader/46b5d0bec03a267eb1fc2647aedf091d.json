{"ast":null,"code":"var _jsxFileName = \"/Users/evanbyrnes/Pycharm-python-workspace/T13_SP/client/src/App.js\";\n// Importing outside developed components.\nimport React, { useState } from \"react\";\nimport { useLoadScript, GoogleMap, Marker, InfoWindow, MarkerClusterer, DirectionsRenderer, DirectionsService } from \"@react-google-maps/api\";\nimport Container from \"react-bootstrap/Container\";\nimport Row from \"react-bootstrap/Row\";\nimport Col from \"react-bootstrap/Col\";\nimport styled from \"styled-components\"; // Importing self-developed components.\n\nimport CustomNavBar from \"./components/CustomNavBar\";\nimport FilterRoute from \"./components/FilterRoute\";\nimport StopSearch from \"./components/StopSearch\";\nimport Locate from \"./components/Locate\";\nimport PredictionInput from \"./components/PredictionInput\";\nimport RtpiApi from \"./components/RtpiApi\"; // Importing outside developed css.\n\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"@reach/combobox/styles.css\"; // Importing Google Maps Api Key.\n\nimport googleMapApiKey from \"./config\"; // Defining libraries for Google Places\n\nconst libraries = [\"places\"]; // Defined styling for separation of page displayed.\n\nconst Wrapper = styled.main`\n  width: 100%;\n  height: 100%;\n`; // Importing the Dublin Bus API stops data\n\nconst data = require(\"./data/DublinBusStops.json\"); // // consts: [53.349804, -6.260310] - Dublin\n\n\nconst dublinCenter = require(\"./data/DublinCenter.json\"); // Importing custom styles to customize the style of Google Map...\n// important for including and excluding certain place markers etc.\n\n\nconst styles = require(\"./data/GoogleMapStyles.json\"); // Defined custom styles and location for Google Map.\n\n\nconst mapOptions = {\n  styles: styles,\n  disableDefaultUI: true,\n  zoomControl: true,\n  maxZoom: 17,\n  minZoom: 11\n};\nconst mapContainerStyle = {\n  height: \"93vh\"\n}; // Icon used to represent a bus stop on the map.\n\nconst icon = {\n  url: \"/bus_icon.svg\",\n  scaledSize: {\n    width: 18,\n    height: 18\n  }\n}; // Icons used when Markers are clustered.\n\nconst options = {\n  imagePath: \"https://developers.google.com/maps/documentation/javascript/examples/markerclusterer/m\"\n}; // Parsing the Stops data into various object shapes.\n\nconst rawData = data.results;\nconst myStops = rawData.map(stop => ({\n  description: \"Stop \" + stop.stopid + \", \" + stop.fullname,\n  type: \"Feature\",\n  properties: {\n    id: stop.stopid,\n    fullname: stop.fullname,\n    routes: stop.operators[0].routes\n  },\n  geometry: {\n    type: \"Point\",\n    pos: {\n      lat: parseFloat(stop.latitude),\n      lng: parseFloat(stop.longitude)\n    }\n  }\n}));\nconst parsedStops = myStops.map(parsed => ({\n  id: parsed.properties.id,\n  description: parsed.description,\n  geometry: parsed.geometry.pos\n}));\nconst stopDescriptions = [];\n\nfor (var i = 0; i < parsedStops.length; i++) {\n  stopDescriptions.push(parsedStops[i].description);\n}\n\nconst routesArray = [];\nconst duplicateRoutes = [];\n\nfor (var j = 0; j < myStops.length; j++) {\n  routesArray.push(myStops[j].properties.routes);\n}\n\nfor (var k = 0; k < routesArray.length; k++) {\n  for (var l = 0; l < routesArray[k].length; l++) {\n    duplicateRoutes.push(routesArray[k][l]);\n  }\n}\n\nconst allRoutes = duplicateRoutes.filter((a, b) => duplicateRoutes.indexOf(a) === b); // Main function for the SPA, generating the Map/Page.\n\nexport default function App() {\n  const {\n    isLoaded,\n    loadError\n  } = useLoadScript({\n    googleMapsApiKey: googleMapApiKey,\n    libraries\n  });\n  const center = dublinCenter; // eslint-disable-next-line\n\n  const [zoom, setZoom] = useState(11); // removing unwanted warning.\n  // The general things we need to track in state:\n\n  const [selectedPlace, setSelectedPlace] = useState(null);\n  const [markerMap, setMarkerMap] = useState({});\n  const [infoOpen, setInfoOpen] = useState(false);\n  const [markers, setMarkers] = useState([]); // eslint-disable-next-line\n\n  const [selected, setSelected] = useState(null); // removing unwanted warning.\n  // eslint-disable-next-line\n\n  const [stopNumber, setStopNumber] = useState(0); // removing unwanted warning.\n  // These are being used to track selected stop numbers\n\n  const [originNumber, setOriginNumber] = useState(0);\n  const [destinationNumber, setDestinationNumber] = useState(0); // This is used to track the string value of selected routes.\n\n  const [routeString, setRouteString] = useState(\"\"); // The things for Directions (Service and Renderer) we need to track in state.\n\n  const [response, setResponse] = useState(null);\n  const [origin, setOrigin] = useState(\"\");\n  const [destination, setDestination] = useState(\"\"); // This is being used to track in state which set of markers is displayed. (Clusters or Route Markers)\n\n  const [markerSelection, setMarkerSelection] = useState(\"True\"); // The things for selected time (Hour, Day, Month) we need to track in state.\n\n  const [selectedTime, setSelectedTime] = useState(new Date()); // Setting the time, day and month values as the current time.\n  // This allows for user to make prediction for journey that occurs at\n  // this time without having to select the time.\n\n  const initialTime = selectedTime.toTimeString().substring(0, 2);\n  const [initialDay, initialMonth] = selectedTime.toDateString().split(\" \"); // An array containing time data for model input.\n\n  const [timeDayMonth, setTimeDayMonth] = useState([initialTime, initialDay, initialMonth]); // Track user selected routes and directions.\n\n  const [routeSelect, setRouteSelect] = React.useState(\"\");\n  const [directionSelect, setDirectionSelect] = React.useState();\n  const mapRef = React.useRef();\n  const onMapLoad = React.useCallback(map => {\n    mapRef.current = map;\n  }, []); // Orient the map to selected location.\n\n  const panTo = React.useCallback(({\n    lat,\n    lng\n  }) => {\n    mapRef.current.panTo({\n      lat,\n      lng\n    });\n    mapRef.current.setZoom(16); // Resetting the drawn route anytime this functions is called.\n\n    setDestination(\"\"); // Allowing only one marker on the map at a time.\n\n    setMarkers(current => []);\n    setMarkers(current => [...current, {\n      lat: lat,\n      lng: lng\n    }]);\n  }, []); // Orient the map to the selected route.\n\n  const panTwo = React.useCallback(({\n    lat,\n    lng\n  }) => {\n    mapRef.current.panTo({\n      lat,\n      lng\n    });\n    mapRef.current.setZoom(12);\n  }, []); // We have to create a mapping of our places to actual Marker objects\n\n  const markerLoadHandler = (marker, stop) => {\n    return setMarkerMap(prevState => {\n      return { ...prevState,\n        [stop.properties.id]: marker\n      };\n    });\n  };\n\n  const markerClickHandler = (event, place) => {\n    // Remember which stop was clicked\n    setSelectedPlace(place); // Required so clicking a 2nd marker works as expected\n\n    if (infoOpen) {\n      setInfoOpen(false);\n    }\n\n    setInfoOpen(true);\n  }; // Changing stop realtime info based on user choice.\n\n\n  const stopChoice = number => {\n    setStopNumber(() => parseInt(number.id));\n  }; // Changing origin info based on user choice.\n\n\n  const originChoice = address => {\n    console.log(\"originChoice triggered\", address);\n    setOrigin(() => address); // setOrigin(() => address.results[0].formatted_address);\n  }; // Changing destination info based on user choice.\n\n\n  const destinationChoice = address => {\n    console.log(\"destinationChoice triggered\", address);\n    setDestination(() => address); // setDestination(() => address.results[0].formatted_address);\n  }; // Changing stops of route displayed on based on user choice.\n\n\n  const routeChoice = route => {\n    setRouteString(() => route.routeString);\n  }; // For generating a directions route on the map.\n\n\n  const directionsCallback = response => {\n    if (response !== null) {\n      if (response.status === \"OK\") {\n        console.log(\"response here\", response); // console.log(\n        //   \"Here is the name of Google's favoured route, \",\n        //   response.routes[0].legs[0].steps[0].transit.line.short_name\n        // );\n\n        setResponse(() => ({\n          response\n        }));\n      } else {}\n    }\n  }; //  For which set of markers to display (Clusters or Route Markers).\n\n\n  const markerSelectionChoice = () => {\n    setMarkerSelection(() => \"False\");\n  }; // For setting the selected origin stop number in state.\n\n\n  const originNumberChoice = number => {\n    console.log(\"originNumberChoice\", number);\n    setOriginNumber(() => parseInt(number.id));\n  }; // For setting the selected destination stop number in state.\n\n\n  const destinationNumberChoice = number => {\n    console.log(\"destinationNumberChoice\", number);\n    setDestinationNumber(() => parseInt(number.id));\n  }; // For setting the time in state.\n\n\n  const timeChoice = selectedTime => {\n    const time = selectedTime.toTimeString().substring(0, 2);\n    const [day, month] = selectedTime.toDateString().split(\" \");\n    setSelectedTime(selectedTime);\n    setTimeDayMonth([time, day, month]);\n  };\n\n  console.log(\"These are the time values: date-day-month\", timeDayMonth);\n  if (loadError) return \"Error\";\n  if (!isLoaded) return \"Loading...\";\n  return /*#__PURE__*/React.createElement(Container, {\n    fluid: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 260,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Row, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 261,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Col, {\n    sm: 12,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 262,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(CustomNavBar // Passing in props - Custom built components.\n  , {\n    FilterRoute: FilterRoute,\n    StopSearch: StopSearch // Passing in props - Functions defined above.\n    ,\n    panTo: panTo,\n    stopChoice: stopChoice,\n    routeChoice: routeChoice,\n    panTwo: panTwo // Passing in props - Stop data defined above.\n    ,\n    parsedStops: parsedStops,\n    stopDescriptions: stopDescriptions,\n    allRoutes: allRoutes,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 263,\n      columnNumber: 11\n    }\n  }))), /*#__PURE__*/React.createElement(Row, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 279,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Col, {\n    sm: 8,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 284,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(GoogleMap // Inbuilt props: https://react-google-maps-api-docs.netlify.app/#googlemap.\n  , {\n    mapContainerStyle: mapContainerStyle,\n    center: center,\n    zoom: zoom,\n    options: mapOptions,\n    onLoad: onMapLoad,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 286,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(Locate // Passing in props - Functions defined above.\n  , {\n    panTo: panTo,\n    setResponse: setResponse // Passing in props - Variables defined above.\n    // ?? Is this required?\n    ,\n    response: response,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 294,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(RouteInfo // Passing in props - Functions defined above.\n  , {\n    markerLoadHandler: markerLoadHandler,\n    markerClickHandler: markerClickHandler,\n    markerSelectionChoice: markerSelectionChoice // Passing in props - Stop data defined above.\n    ,\n    route: routeString,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 303,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(ClusteredMarkers // Passing in props - Functions defined above.\n  , {\n    markerLoadHandler: markerLoadHandler,\n    markerClickHandler: markerClickHandler,\n    markerSelection: markerSelection // Passing in props - Stop data defined above.\n    ,\n    myStops: myStops,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 312,\n      columnNumber: 13\n    }\n  }), infoOpen && selectedPlace && /*#__PURE__*/React.createElement(InfoWindow // Inbuilt props: https://react-google-maps-api-docs.netlify.app/#infowindow.\n  , {\n    anchor: markerMap[selectedPlace.properties.id],\n    onCloseClick: () => setInfoOpen(false),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 322,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 327,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"h5\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 328,\n      columnNumber: 19\n    }\n  }, selectedPlace.properties.fullname + \", stop \" + selectedPlace.properties.id), /*#__PURE__*/React.createElement(RtpiApi // Passing in props - Stop data defined above.\n  , {\n    number: selectedPlace.properties.id,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 333,\n      columnNumber: 19\n    }\n  }))), markers.map(marker => /*#__PURE__*/React.createElement(Marker // Inbuilt props: https://react-google-maps-api-docs.netlify.app/#marker.\n  , {\n    key: `${marker.lat}-${marker.lng}`,\n    position: {\n      lat: marker.lat,\n      lng: marker.lng\n    },\n    onClick: () => {\n      setSelected(marker);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 342,\n      columnNumber: 15\n    }\n  })), destination !== \"\" && origin !== \"\" && /*#__PURE__*/React.createElement(DirectionsService // Inbuilt props: https://react-google-maps-api-docs.netlify.app/#directionsservice.\n  , {\n    options: {\n      destination: destination,\n      origin: origin,\n      travelMode: \"TRANSIT\",\n      provideRouteAlternatives: true,\n      transitOptions: {\n        modes: [\"BUS\"],\n        routingPreference: \"FEWER_TRANSFERS\",\n        departureTime: selectedTime\n      } // transitDetails: { trip_short_name: \"145\" },\n\n    } // required\n    ,\n    callback: directionsCallback,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 352,\n      columnNumber: 15\n    }\n  }), response !== null && /*#__PURE__*/React.createElement(DirectionsRenderer // Inbuilt props: https://react-google-maps-api-docs.netlify.app/#directionsrenderer.\n  // what you might try to do is iterate over\n  // the route list and find the one with short_name of\n  // selected route, then render that one using routeIndex : i.\n  // required\n  , {\n    options: {\n      directions: response.response,\n      // hideRouteList: true,\n      polylineOptions: {\n        strokeColor: \"red\",\n        strokeWeight: 5\n      },\n      suppressInfoWindows: true,\n      suppressMarkers: false\n    } // panel={document.getElementById(\"panel\")}\n    // removing all displayed stops upon loading\n    ,\n    onLoad: () => {\n      setRouteString(\"\");\n      setMarkerSelection(\"False\");\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 371,\n      columnNumber: 15\n    }\n  }))), /*#__PURE__*/React.createElement(Col, {\n    sm: 4,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 398,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Container, {\n    style: {\n      paddingTop: \"2vh\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 406,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(PredictionInput // Passing in props - Functions defined above.\n  , {\n    panTo: panTo,\n    originChoice: originChoice,\n    destinationChoice: destinationChoice,\n    originNumberChoice: originNumberChoice,\n    destinationNumberChoice: destinationNumberChoice,\n    timeChoice: timeChoice // Passing in props - Variables defined above.\n    ,\n    originNumber: originNumber,\n    destinationNumber: destinationNumber,\n    selectedTime: selectedTime,\n    setSelectedTime: setSelectedTime,\n    timeDayMonth: timeDayMonth,\n    setTimeDayMonth: setTimeDayMonth,\n    routeSelect: routeSelect,\n    setRouteSelect: setRouteSelect,\n    directionSelect: directionSelect,\n    setDirectionSelect: setDirectionSelect // Passing in props - Stop data defined above.\n    ,\n    parsedStops: parsedStops,\n    stopDescriptions: stopDescriptions,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 407,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    id: \"panel\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 430,\n      columnNumber: 13\n    }\n  })))));\n} // Function that filters the markers on the map\n// according to a user selected route.\n\nfunction RouteInfo(props) {\n  const filteredMarkers = [];\n\n  for (var i = 0; i < myStops.length; i++) {\n    for (var j = 0; j < myStops[i].properties.routes.length; j++) {\n      if (String(myStops[i].properties.routes[j]) === props.route) {\n        filteredMarkers.push(myStops[i]);\n      }\n    }\n  }\n\n  const uniqueMarkers = filteredMarkers.filter((a, b) => filteredMarkers.indexOf(a) === b);\n  return uniqueMarkers.map(stop => /*#__PURE__*/React.createElement(Marker, {\n    icon: icon,\n    key: stop.properties.id,\n    position: stop.geometry.pos,\n    onLoad: marker => {\n      // Will do for now - removing cluster upon selection of route.\n      props.markerSelectionChoice(\"False\");\n      props.markerLoadHandler(marker, stop);\n    },\n    onClick: event => {\n      props.markerClickHandler(event, stop);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 457,\n      columnNumber: 5\n    }\n  }));\n} // Function that renders all of the Dublin Bus stops in clustered form.\n// props.markerSelection being set to True means that they will all be displayed on\n// the first load. When a route is chosen from the RouteInfo function above,\n// props.cheker gets set to False and all of the markers are removed. This solution\n// is intended only to be temporary until something better comes up.\n\n\nfunction ClusteredMarkers(props) {\n  if (props.markerSelection === \"True\") {\n    return /*#__PURE__*/React.createElement(MarkerClusterer, {\n      options: options,\n      maxZoom: 15,\n      minimumClusterSize: 4,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 481,\n        columnNumber: 7\n      }\n    }, clusterer => props.myStops.map(stop => /*#__PURE__*/React.createElement(Marker, {\n      icon: icon,\n      key: stop.properties.id,\n      position: stop.geometry.pos,\n      clusterer: clusterer,\n      onLoad: marker => props.markerLoadHandler(marker, stop),\n      onClick: event => props.markerClickHandler(event, stop),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 484,\n        columnNumber: 13\n      }\n    })));\n  } else {\n    return null;\n  }\n}","map":{"version":3,"sources":["/Users/evanbyrnes/Pycharm-python-workspace/T13_SP/client/src/App.js"],"names":["React","useState","useLoadScript","GoogleMap","Marker","InfoWindow","MarkerClusterer","DirectionsRenderer","DirectionsService","Container","Row","Col","styled","CustomNavBar","FilterRoute","StopSearch","Locate","PredictionInput","RtpiApi","googleMapApiKey","libraries","Wrapper","main","data","require","dublinCenter","styles","mapOptions","disableDefaultUI","zoomControl","maxZoom","minZoom","mapContainerStyle","height","icon","url","scaledSize","width","options","imagePath","rawData","results","myStops","map","stop","description","stopid","fullname","type","properties","id","routes","operators","geometry","pos","lat","parseFloat","latitude","lng","longitude","parsedStops","parsed","stopDescriptions","i","length","push","routesArray","duplicateRoutes","j","k","l","allRoutes","filter","a","b","indexOf","App","isLoaded","loadError","googleMapsApiKey","center","zoom","setZoom","selectedPlace","setSelectedPlace","markerMap","setMarkerMap","infoOpen","setInfoOpen","markers","setMarkers","selected","setSelected","stopNumber","setStopNumber","originNumber","setOriginNumber","destinationNumber","setDestinationNumber","routeString","setRouteString","response","setResponse","origin","setOrigin","destination","setDestination","markerSelection","setMarkerSelection","selectedTime","setSelectedTime","Date","initialTime","toTimeString","substring","initialDay","initialMonth","toDateString","split","timeDayMonth","setTimeDayMonth","routeSelect","setRouteSelect","directionSelect","setDirectionSelect","mapRef","useRef","onMapLoad","useCallback","current","panTo","panTwo","markerLoadHandler","marker","prevState","markerClickHandler","event","place","stopChoice","number","parseInt","originChoice","address","console","log","destinationChoice","routeChoice","route","directionsCallback","status","markerSelectionChoice","originNumberChoice","destinationNumberChoice","timeChoice","time","day","month","travelMode","provideRouteAlternatives","transitOptions","modes","routingPreference","departureTime","directions","polylineOptions","strokeColor","strokeWeight","suppressInfoWindows","suppressMarkers","paddingTop","RouteInfo","props","filteredMarkers","String","uniqueMarkers","ClusteredMarkers","clusterer"],"mappings":"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","sourcesContent":["// Importing outside developed components.\nimport React, { useState } from \"react\";\nimport {\n  useLoadScript,\n  GoogleMap,\n  Marker,\n  InfoWindow,\n  MarkerClusterer,\n  DirectionsRenderer,\n  DirectionsService,\n} from \"@react-google-maps/api\";\nimport Container from \"react-bootstrap/Container\";\nimport Row from \"react-bootstrap/Row\";\nimport Col from \"react-bootstrap/Col\";\nimport styled from \"styled-components\";\n// Importing self-developed components.\nimport CustomNavBar from \"./components/CustomNavBar\";\nimport FilterRoute from \"./components/FilterRoute\";\nimport StopSearch from \"./components/StopSearch\";\nimport Locate from \"./components/Locate\";\nimport PredictionInput from \"./components/PredictionInput\";\nimport RtpiApi from \"./components/RtpiApi\";\n// Importing outside developed css.\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"@reach/combobox/styles.css\";\n// Importing Google Maps Api Key.\nimport googleMapApiKey from \"./config\";\n// Defining libraries for Google Places\nconst libraries = [\"places\"];\n// Defined styling for separation of page displayed.\nconst Wrapper = styled.main`\n  width: 100%;\n  height: 100%;\n`;\n// Importing the Dublin Bus API stops data\nconst data = require(\"./data/DublinBusStops.json\");\n// // consts: [53.349804, -6.260310] - Dublin\nconst dublinCenter = require(\"./data/DublinCenter.json\");\n// Importing custom styles to customize the style of Google Map...\n// important for including and excluding certain place markers etc.\nconst styles = require(\"./data/GoogleMapStyles.json\");\n// Defined custom styles and location for Google Map.\nconst mapOptions = {\n  styles: styles,\n  disableDefaultUI: true,\n  zoomControl: true,\n  maxZoom: 17,\n  minZoom: 11,\n};\nconst mapContainerStyle = {\n  height: \"93vh\",\n};\n// Icon used to represent a bus stop on the map.\nconst icon = {\n  url: \"/bus_icon.svg\",\n  scaledSize: { width: 18, height: 18 },\n};\n// Icons used when Markers are clustered.\nconst options = {\n  imagePath:\n    \"https://developers.google.com/maps/documentation/javascript/examples/markerclusterer/m\",\n};\n// Parsing the Stops data into various object shapes.\nconst rawData = data.results;\n\nconst myStops = rawData.map((stop) => ({\n  description: \"Stop \" + stop.stopid + \", \" + stop.fullname,\n  type: \"Feature\",\n  properties: {\n    id: stop.stopid,\n    fullname: stop.fullname,\n    routes: stop.operators[0].routes,\n  },\n  geometry: {\n    type: \"Point\",\n    pos: {\n      lat: parseFloat(stop.latitude),\n      lng: parseFloat(stop.longitude),\n    },\n  },\n}));\n\nconst parsedStops = myStops.map((parsed) => ({\n  id: parsed.properties.id,\n  description: parsed.description,\n  geometry: parsed.geometry.pos,\n}));\n\nconst stopDescriptions = [];\nfor (var i = 0; i < parsedStops.length; i++) {\n  stopDescriptions.push(parsedStops[i].description);\n}\n\nconst routesArray = [];\nconst duplicateRoutes = [];\nfor (var j = 0; j < myStops.length; j++) {\n  routesArray.push(myStops[j].properties.routes);\n}\nfor (var k = 0; k < routesArray.length; k++) {\n  for (var l = 0; l < routesArray[k].length; l++) {\n    duplicateRoutes.push(routesArray[k][l]);\n  }\n}\nconst allRoutes = duplicateRoutes.filter(\n  (a, b) => duplicateRoutes.indexOf(a) === b\n);\n\n// Main function for the SPA, generating the Map/Page.\nexport default function App() {\n  const { isLoaded, loadError } = useLoadScript({\n    googleMapsApiKey: googleMapApiKey,\n    libraries,\n  });\n  const center = dublinCenter;\n  // eslint-disable-next-line\n  const [zoom, setZoom] = useState(11); // removing unwanted warning.\n  // The general things we need to track in state:\n  const [selectedPlace, setSelectedPlace] = useState(null);\n  const [markerMap, setMarkerMap] = useState({});\n  const [infoOpen, setInfoOpen] = useState(false);\n  const [markers, setMarkers] = useState([]);\n  // eslint-disable-next-line\n  const [selected, setSelected] = useState(null); // removing unwanted warning.\n  // eslint-disable-next-line\n  const [stopNumber, setStopNumber] = useState(0); // removing unwanted warning.\n  // These are being used to track selected stop numbers\n  const [originNumber, setOriginNumber] = useState(0);\n  const [destinationNumber, setDestinationNumber] = useState(0);\n  // This is used to track the string value of selected routes.\n  const [routeString, setRouteString] = useState(\"\");\n  // The things for Directions (Service and Renderer) we need to track in state.\n  const [response, setResponse] = useState(null);\n  const [origin, setOrigin] = useState(\"\");\n  const [destination, setDestination] = useState(\"\");\n  // This is being used to track in state which set of markers is displayed. (Clusters or Route Markers)\n  const [markerSelection, setMarkerSelection] = useState(\"True\");\n  // The things for selected time (Hour, Day, Month) we need to track in state.\n  const [selectedTime, setSelectedTime] = useState(new Date());\n  // Setting the time, day and month values as the current time.\n  // This allows for user to make prediction for journey that occurs at\n  // this time without having to select the time.\n  const initialTime = selectedTime.toTimeString().substring(0, 2);\n  const [initialDay, initialMonth] = selectedTime.toDateString().split(\" \");\n  // An array containing time data for model input.\n  const [timeDayMonth, setTimeDayMonth] = useState([\n    initialTime,\n    initialDay,\n    initialMonth,\n  ]);\n  // Track user selected routes and directions.\n  const [routeSelect, setRouteSelect] = React.useState(\"\");\n  const [directionSelect, setDirectionSelect] = React.useState();\n\n  const mapRef = React.useRef();\n  const onMapLoad = React.useCallback((map) => {\n    mapRef.current = map;\n  }, []);\n\n  // Orient the map to selected location.\n  const panTo = React.useCallback(({ lat, lng }) => {\n    mapRef.current.panTo({ lat, lng });\n    mapRef.current.setZoom(16);\n    // Resetting the drawn route anytime this functions is called.\n    setDestination(\"\");\n    // Allowing only one marker on the map at a time.\n    setMarkers((current) => []);\n    setMarkers((current) => [...current, { lat: lat, lng: lng }]);\n  }, []);\n\n  // Orient the map to the selected route.\n  const panTwo = React.useCallback(({ lat, lng }) => {\n    mapRef.current.panTo({ lat, lng });\n    mapRef.current.setZoom(12);\n  }, []);\n\n  // We have to create a mapping of our places to actual Marker objects\n  const markerLoadHandler = (marker, stop) => {\n    return setMarkerMap((prevState) => {\n      return { ...prevState, [stop.properties.id]: marker };\n    });\n  };\n\n  const markerClickHandler = (event, place) => {\n    // Remember which stop was clicked\n    setSelectedPlace(place);\n    // Required so clicking a 2nd marker works as expected\n    if (infoOpen) {\n      setInfoOpen(false);\n    }\n    setInfoOpen(true);\n  };\n\n  // Changing stop realtime info based on user choice.\n  const stopChoice = (number) => {\n    setStopNumber(() => parseInt(number.id));\n  };\n  // Changing origin info based on user choice.\n  const originChoice = (address) => {\n    console.log(\"originChoice triggered\", address);\n    setOrigin(() => address);\n    // setOrigin(() => address.results[0].formatted_address);\n  };\n  // Changing destination info based on user choice.\n  const destinationChoice = (address) => {\n    console.log(\"destinationChoice triggered\", address);\n    setDestination(() => address);\n    // setDestination(() => address.results[0].formatted_address);\n  };\n  // Changing stops of route displayed on based on user choice.\n  const routeChoice = (route) => {\n    setRouteString(() => route.routeString);\n  };\n\n  // For generating a directions route on the map.\n  const directionsCallback = (response) => {\n    if (response !== null) {\n      if (response.status === \"OK\") {\n        console.log(\"response here\", response);\n        // console.log(\n        //   \"Here is the name of Google's favoured route, \",\n        //   response.routes[0].legs[0].steps[0].transit.line.short_name\n        // );\n        setResponse(() => ({\n          response,\n        }));\n      } else {\n      }\n    }\n  };\n\n  //  For which set of markers to display (Clusters or Route Markers).\n  const markerSelectionChoice = () => {\n    setMarkerSelection(() => \"False\");\n  };\n\n  // For setting the selected origin stop number in state.\n  const originNumberChoice = (number) => {\n    console.log(\"originNumberChoice\", number);\n    setOriginNumber(() => parseInt(number.id));\n  };\n  // For setting the selected destination stop number in state.\n  const destinationNumberChoice = (number) => {\n    console.log(\"destinationNumberChoice\", number);\n    setDestinationNumber(() => parseInt(number.id));\n  };\n\n  // For setting the time in state.\n  const timeChoice = (selectedTime) => {\n    const time = selectedTime.toTimeString().substring(0, 2);\n    const [day, month] = selectedTime.toDateString().split(\" \");\n    setSelectedTime(selectedTime);\n    setTimeDayMonth([time, day, month]);\n  };\n  console.log(\"These are the time values: date-day-month\", timeDayMonth);\n\n  if (loadError) return \"Error\";\n  if (!isLoaded) return \"Loading...\";\n\n  return (\n    <Container fluid>\n      <Row>\n        <Col sm={12}>\n          <CustomNavBar\n            // Passing in props - Custom built components.\n            FilterRoute={FilterRoute}\n            StopSearch={StopSearch}\n            // Passing in props - Functions defined above.\n            panTo={panTo}\n            stopChoice={stopChoice}\n            routeChoice={routeChoice}\n            panTwo={panTwo}\n            // Passing in props - Stop data defined above.\n            parsedStops={parsedStops}\n            stopDescriptions={stopDescriptions}\n            allRoutes={allRoutes}\n          />\n        </Col>\n      </Row>\n      <Row>\n        {/* <Wrapper\n              // CSS\n              style={{ width: \"75%\", float: \"left\" }}\n            > */}\n        <Col sm={8}>\n          {/* Render the Google Map */}\n          <GoogleMap\n            // Inbuilt props: https://react-google-maps-api-docs.netlify.app/#googlemap.\n            mapContainerStyle={mapContainerStyle}\n            center={center}\n            zoom={zoom}\n            options={mapOptions}\n            onLoad={onMapLoad}\n          >\n            <Locate\n              // Passing in props - Functions defined above.\n              panTo={panTo}\n              setResponse={setResponse}\n              // Passing in props - Variables defined above.\n              // ?? Is this required?\n              response={response}\n            />\n\n            <RouteInfo\n              // Passing in props - Functions defined above.\n              markerLoadHandler={markerLoadHandler}\n              markerClickHandler={markerClickHandler}\n              markerSelectionChoice={markerSelectionChoice}\n              // Passing in props - Stop data defined above.\n              route={routeString}\n            />\n\n            <ClusteredMarkers\n              // Passing in props - Functions defined above.\n              markerLoadHandler={markerLoadHandler}\n              markerClickHandler={markerClickHandler}\n              markerSelection={markerSelection}\n              // Passing in props - Stop data defined above.\n              myStops={myStops}\n            />\n\n            {infoOpen && selectedPlace && (\n              <InfoWindow\n                // Inbuilt props: https://react-google-maps-api-docs.netlify.app/#infowindow.\n                anchor={markerMap[selectedPlace.properties.id]}\n                onCloseClick={() => setInfoOpen(false)}\n              >\n                <div>\n                  <h5>\n                    {selectedPlace.properties.fullname +\n                      \", stop \" +\n                      selectedPlace.properties.id}\n                  </h5>\n                  <RtpiApi\n                    // Passing in props - Stop data defined above.\n                    number={selectedPlace.properties.id}\n                  />\n                </div>\n              </InfoWindow>\n            )}\n            {/* Markers dropped when stop has been chosen or geolocation activated. */}\n            {markers.map((marker) => (\n              <Marker\n                // Inbuilt props: https://react-google-maps-api-docs.netlify.app/#marker.\n                key={`${marker.lat}-${marker.lng}`}\n                position={{ lat: marker.lat, lng: marker.lng }}\n                onClick={() => {\n                  setSelected(marker);\n                }}\n              />\n            ))}\n            {destination !== \"\" && origin !== \"\" && (\n              <DirectionsService\n                // Inbuilt props: https://react-google-maps-api-docs.netlify.app/#directionsservice.\n                options={{\n                  destination: destination,\n                  origin: origin,\n                  travelMode: \"TRANSIT\",\n                  provideRouteAlternatives: true,\n                  transitOptions: {\n                    modes: [\"BUS\"],\n                    routingPreference: \"FEWER_TRANSFERS\",\n                    departureTime: selectedTime,\n                  },\n                  // transitDetails: { trip_short_name: \"145\" },\n                }}\n                // required\n                callback={directionsCallback}\n              />\n            )}\n            {response !== null && (\n              <DirectionsRenderer\n                // Inbuilt props: https://react-google-maps-api-docs.netlify.app/#directionsrenderer.\n                // what you might try to do is iterate over\n                // the route list and find the one with short_name of\n                // selected route, then render that one using routeIndex : i.\n                // required\n                options={{\n                  directions: response.response,\n                  // hideRouteList: true,\n                  polylineOptions: {\n                    strokeColor: \"red\",\n                    strokeWeight: 5,\n                  },\n                  suppressInfoWindows: true,\n                  suppressMarkers: false,\n                }}\n                // panel={document.getElementById(\"panel\")}\n                // removing all displayed stops upon loading\n                onLoad={() => {\n                  setRouteString(\"\");\n                  setMarkerSelection(\"False\");\n                }}\n              />\n            )}\n          </GoogleMap>\n          {/* </Wrapper> */}\n        </Col>\n        <Col sm={4}>\n          {/* <Wrapper\n              style={{\n                width: \"25%\",\n                float: \"right\",\n                maxHeight: \"93vh\",\n              }}\n            > */}\n          <Container style={{ paddingTop: \"2vh\" }}>\n            <PredictionInput\n              // Passing in props - Functions defined above.\n              panTo={panTo}\n              originChoice={originChoice}\n              destinationChoice={destinationChoice}\n              originNumberChoice={originNumberChoice}\n              destinationNumberChoice={destinationNumberChoice}\n              timeChoice={timeChoice}\n              // Passing in props - Variables defined above.\n              originNumber={originNumber}\n              destinationNumber={destinationNumber}\n              selectedTime={selectedTime}\n              setSelectedTime={setSelectedTime}\n              timeDayMonth={timeDayMonth}\n              setTimeDayMonth={setTimeDayMonth}\n              routeSelect={routeSelect}\n              setRouteSelect={setRouteSelect}\n              directionSelect={directionSelect}\n              setDirectionSelect={setDirectionSelect}\n              // Passing in props - Stop data defined above.\n              parsedStops={parsedStops}\n              stopDescriptions={stopDescriptions}\n            />\n            <div id=\"panel\"></div>\n          </Container>\n          {/* </Wrapper> */}\n        </Col>\n      </Row>\n    </Container>\n  );\n}\n\n// Function that filters the markers on the map\n// according to a user selected route.\nfunction RouteInfo(props) {\n  const filteredMarkers = [];\n\n  for (var i = 0; i < myStops.length; i++) {\n    for (var j = 0; j < myStops[i].properties.routes.length; j++) {\n      if (String(myStops[i].properties.routes[j]) === props.route) {\n        filteredMarkers.push(myStops[i]);\n      }\n    }\n  }\n\n  const uniqueMarkers = filteredMarkers.filter(\n    (a, b) => filteredMarkers.indexOf(a) === b\n  );\n\n  return uniqueMarkers.map((stop) => (\n    <Marker\n      icon={icon}\n      key={stop.properties.id}\n      position={stop.geometry.pos}\n      onLoad={(marker) => {\n        // Will do for now - removing cluster upon selection of route.\n        props.markerSelectionChoice(\"False\");\n        props.markerLoadHandler(marker, stop);\n      }}\n      onClick={(event) => {\n        props.markerClickHandler(event, stop);\n      }}\n    />\n  ));\n}\n\n// Function that renders all of the Dublin Bus stops in clustered form.\n// props.markerSelection being set to True means that they will all be displayed on\n// the first load. When a route is chosen from the RouteInfo function above,\n// props.cheker gets set to False and all of the markers are removed. This solution\n// is intended only to be temporary until something better comes up.\nfunction ClusteredMarkers(props) {\n  if (props.markerSelection === \"True\") {\n    return (\n      <MarkerClusterer options={options} maxZoom={15} minimumClusterSize={4}>\n        {(clusterer) =>\n          props.myStops.map((stop) => (\n            <Marker\n              icon={icon}\n              key={stop.properties.id}\n              position={stop.geometry.pos}\n              clusterer={clusterer}\n              onLoad={(marker) => props.markerLoadHandler(marker, stop)}\n              onClick={(event) => props.markerClickHandler(event, stop)}\n            />\n          ))\n        }\n      </MarkerClusterer>\n    );\n  } else {\n    return null;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}