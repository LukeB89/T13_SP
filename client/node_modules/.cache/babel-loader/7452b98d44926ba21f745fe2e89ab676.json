{"ast":null,"code":"var _jsxFileName = \"/Users/evanbyrnes/Pycharm-python-workspace/T13_SP/client/src/App.js\";\nimport React, { useState } from \"react\";\nimport useSwr from \"swr\";\nimport styled from \"styled-components\"; // import \"bootstrap/dist/css/bootstrap.min.css\";\n\nimport { useLoadScript, GoogleMap, Marker, InfoWindow, MarkerClusterer } from \"@react-google-maps/api\";\nimport googleMapApiKey from \"./config\";\nimport T13GoogleMap from \"./components/T13GoogleMap\";\nimport Api from \"./components/Api\";\nimport DateTimeSelector from \"./components/DateTimeSelector\";\nimport * as data from \"./data/db-stops.json\";\nimport BrandBar from \"./components/BrandBar\";\nconst Wrapper = styled.main`\n  width: 100%;\n  height: 100%;\n`;\nconst options = {\n  imagePath: \"https://developers.google.com/maps/documentation/javascript/examples/markerclusterer/m\"\n};\nexport default function App() {\n  // The things we need to track in state\n  const [mapRef, setMapRef] = useState(null);\n  const [selectedPlace, setSelectedPlace] = useState(null);\n  const [markerMap, setMarkerMap] = useState({}); // consts: [53.349804, -6.260310] - Dublin\n\n  const [center, setCenter] = useState({\n    lat: 53.349804,\n    lng: -6.26031\n  });\n  const [zoom, setZoom] = useState(10); // const [clickedLatLng, setClickedLatLng] = useState(null);\n\n  const [infoOpen, setInfoOpen] = useState(false); // Load the Google maps scripts\n\n  const {\n    isLoaded\n  } = useLoadScript({\n    // Enter your own Google Maps API key in config.js\n    googleMapsApiKey: googleMapApiKey\n  }); // Currently reading in data variable from db-stops.json file, will use API in future, see three lines below\n  //   const url = \"https://data.smartdublin.ie/cgi-bin/rtpi/busstopinformation?operator=bac\";\n  //   const { data, error } = useSwr(url, { fetcher });\n  //   const stopData = data && !error ? data.slice(0, 4200) : [];\n  // Currently reading in data variable from db-stops.json file, will use API in future, see three commented lines above.\n\n  const uncleanData = data.results; // A GeoJSON Feature object, with the geometry/pos of each object being a GeoJSON Point\n  // ref: https://tools.ietf.org/html/rfc7946#section-3.2\n\n  const myStops = uncleanData.map(stop => ({\n    type: \"Feature\",\n    properties: {\n      id: stop.stopid,\n      fullname: stop.fullname,\n      routes: stop.operators[0].routes\n    },\n    geometry: {\n      type: \"Point\",\n      pos: {\n        lat: parseFloat(stop.latitude),\n        lng: parseFloat(stop.longitude)\n      }\n    }\n  })); // Iterate myStops to size, center, and zoom map to contain all markers\n\n  const fitBounds = map => {\n    const bounds = new window.google.maps.LatLngBounds();\n    myStops.map(stop => {\n      bounds.extend(stop.geometry.pos);\n      return stop.properties.id;\n    });\n    map.fitBounds(bounds);\n  };\n\n  const loadHandler = map => {\n    // Store a reference to the google map instance in state\n    setMapRef(map); // Fit map bounds to contain all markers\n\n    fitBounds(map);\n  }; // We have to create a mapping of our places to actual Marker objects\n\n\n  const markerLoadHandler = (marker, stop) => {\n    return setMarkerMap(prevState => {\n      return { ...prevState,\n        [stop.properties.id]: marker\n      };\n    });\n  };\n\n  const markerClickHandler = (event, place) => {\n    // Remember which stop was clicked\n    setSelectedPlace(place); // Required so clicking a 2nd marker works as expected\n\n    if (infoOpen) {\n      setInfoOpen(false);\n    }\n\n    setInfoOpen(true); // If you want to zoom in a little on marker click\n\n    if (zoom < 11) {\n      setZoom(11);\n    } // if you want to center the selected Marker\n    //setCenter(place.pos)\n\n  };\n\n  const renderPage = () => {\n    return /*#__PURE__*/React.createElement(Wrapper, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(BrandBar, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(Wrapper, {\n      style: {\n        width: \"75%\",\n        float: \"left\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(T13GoogleMap, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 11\n      }\n    })), /*#__PURE__*/React.createElement(Wrapper, {\n      style: {\n        width: \"25%\",\n        float: \"right\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(DateTimeSelector, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 11\n      }\n    }), /*#__PURE__*/React.createElement(Api, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 11\n      }\n    })));\n  };\n\n  return isLoaded ? renderPage() : null;\n}","map":{"version":3,"sources":["/Users/evanbyrnes/Pycharm-python-workspace/T13_SP/client/src/App.js"],"names":["React","useState","useSwr","styled","useLoadScript","GoogleMap","Marker","InfoWindow","MarkerClusterer","googleMapApiKey","T13GoogleMap","Api","DateTimeSelector","data","BrandBar","Wrapper","main","options","imagePath","App","mapRef","setMapRef","selectedPlace","setSelectedPlace","markerMap","setMarkerMap","center","setCenter","lat","lng","zoom","setZoom","infoOpen","setInfoOpen","isLoaded","googleMapsApiKey","uncleanData","results","myStops","map","stop","type","properties","id","stopid","fullname","routes","operators","geometry","pos","parseFloat","latitude","longitude","fitBounds","bounds","window","google","maps","LatLngBounds","extend","loadHandler","markerLoadHandler","marker","prevState","markerClickHandler","event","place","renderPage","width","float"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport useSwr from \"swr\";\nimport styled from \"styled-components\";\n\n// import \"bootstrap/dist/css/bootstrap.min.css\";\n\nimport {\n  useLoadScript,\n  GoogleMap,\n  Marker,\n  InfoWindow,\n  MarkerClusterer,\n} from \"@react-google-maps/api\";\n\nimport googleMapApiKey from \"./config\";\nimport T13GoogleMap from \"./components/T13GoogleMap\";\nimport Api from \"./components/Api\";\nimport DateTimeSelector from \"./components/DateTimeSelector\";\n\nimport * as data from \"./data/db-stops.json\";\nimport BrandBar from \"./components/BrandBar\";\n\nconst Wrapper = styled.main`\n  width: 100%;\n  height: 100%;\n`;\n\nconst options = {\n  imagePath:\n    \"https://developers.google.com/maps/documentation/javascript/examples/markerclusterer/m\",\n};\n\nexport default function App() {\n  // The things we need to track in state\n  const [mapRef, setMapRef] = useState(null);\n  const [selectedPlace, setSelectedPlace] = useState(null);\n  const [markerMap, setMarkerMap] = useState({});\n  // consts: [53.349804, -6.260310] - Dublin\n  const [center, setCenter] = useState({ lat: 53.349804, lng: -6.26031 });\n  const [zoom, setZoom] = useState(10);\n  // const [clickedLatLng, setClickedLatLng] = useState(null);\n  const [infoOpen, setInfoOpen] = useState(false);\n\n  // Load the Google maps scripts\n  const { isLoaded } = useLoadScript({\n    // Enter your own Google Maps API key in config.js\n    googleMapsApiKey: googleMapApiKey,\n  });\n\n  // Currently reading in data variable from db-stops.json file, will use API in future, see three lines below\n  //   const url = \"https://data.smartdublin.ie/cgi-bin/rtpi/busstopinformation?operator=bac\";\n  //   const { data, error } = useSwr(url, { fetcher });\n  //   const stopData = data && !error ? data.slice(0, 4200) : [];\n  // Currently reading in data variable from db-stops.json file, will use API in future, see three commented lines above.\n  const uncleanData = data.results;\n  // A GeoJSON Feature object, with the geometry/pos of each object being a GeoJSON Point\n  // ref: https://tools.ietf.org/html/rfc7946#section-3.2\n  const myStops = uncleanData.map((stop) => ({\n    type: \"Feature\",\n    properties: {\n      id: stop.stopid,\n      fullname: stop.fullname,\n      routes: stop.operators[0].routes,\n    },\n    geometry: {\n      type: \"Point\",\n      pos: {\n        lat: parseFloat(stop.latitude),\n        lng: parseFloat(stop.longitude),\n      },\n    },\n  }));\n\n  // Iterate myStops to size, center, and zoom map to contain all markers\n  const fitBounds = (map) => {\n    const bounds = new window.google.maps.LatLngBounds();\n    myStops.map((stop) => {\n      bounds.extend(stop.geometry.pos);\n      return stop.properties.id;\n    });\n    map.fitBounds(bounds);\n  };\n\n  const loadHandler = (map) => {\n    // Store a reference to the google map instance in state\n    setMapRef(map);\n    // Fit map bounds to contain all markers\n    fitBounds(map);\n  };\n\n  // We have to create a mapping of our places to actual Marker objects\n  const markerLoadHandler = (marker, stop) => {\n    return setMarkerMap((prevState) => {\n      return { ...prevState, [stop.properties.id]: marker };\n    });\n  };\n\n  const markerClickHandler = (event, place) => {\n    // Remember which stop was clicked\n    setSelectedPlace(place);\n\n    // Required so clicking a 2nd marker works as expected\n    if (infoOpen) {\n      setInfoOpen(false);\n    }\n\n    setInfoOpen(true);\n\n    // If you want to zoom in a little on marker click\n    if (zoom < 11) {\n      setZoom(11);\n    }\n\n    // if you want to center the selected Marker\n    //setCenter(place.pos)\n  };\n\n  const renderPage = () => {\n    return (\n      <Wrapper>\n        <BrandBar></BrandBar>\n        <Wrapper style={{ width: \"75%\", float: \"left\" }}>\n          <T13GoogleMap></T13GoogleMap>\n        </Wrapper>\n\n        <Wrapper style={{ width: \"25%\", float: \"right\" }}>\n          <DateTimeSelector></DateTimeSelector>\n          {/* Rendering the database information from here. */}\n          <Api />\n        </Wrapper>\n      </Wrapper>\n    );\n  };\n\n  return isLoaded ? renderPage() : null;\n}\n"]},"metadata":{},"sourceType":"module"}