{"ast":null,"code":"var _jsxFileName = \"/Users/evanbyrnes/Pycharm-python-workspace/T13_SP/client/src/components/Directions.js\";\n\n/*global google*/\nimport React, { Component } from \"react\";\nimport { DirectionsRenderer } from \"@react-google-maps/api\";\nimport Form from \"react-bootstrap/Form\";\nimport { Typeahead } from \"react-bootstrap-typeahead\";\nimport usePlacesAutocomplete, { getGeocode, getLatLng } from \"use-places-autocomplete\";\nimport { Combobox, ComboboxInput, ComboboxPopover, ComboboxList, ComboboxOption } from \"@reach/combobox\";\nimport * as data from \".././data/db-stops.json\";\nconst rawData = data.results; // need to store the geo data here\n\nconst nameOfStops = rawData.map(stop => ({\n  label: \"Stop \" + stop.stopid + \", \" + stop.fullname,\n  id: parseInt(stop.stopid),\n  geometry: {\n    type: \"Point\",\n    pos: {\n      lat: parseFloat(stop.latitude),\n      lng: parseFloat(stop.longitude)\n    }\n  }\n}));\n\nclass Directions extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      directions: null,\n      selected: []\n    };\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(Form, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(Search, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(DirectionsRenderer, {\n      directions: this.state.directions,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 9\n      }\n    }));\n  }\n\n  componentDidMount() {\n    const directionsService = new google.maps.DirectionsService();\n    console.log(console.log(this.state.selected)); // we want to make these variable values, to be able to\n    // pass this information from what has been selected above.\n\n    const origin = {\n      lat: 53.3472419444,\n      lng: -6.2587911111\n    };\n    const destination = {\n      lat: 53.3466669444,\n      lng: -6.258325\n    };\n    directionsService.route({\n      origin: origin,\n      destination: destination,\n      travelMode: google.maps.TravelMode.WALKING\n    }, (result, status) => {\n      if (status === google.maps.DirectionsStatus.OK) {\n        this.setState({\n          directions: result\n        });\n      } else {\n        console.error(`error fetching directions ${result}`);\n      }\n    });\n  }\n\n}\n\nexport default Directions;\n\nfunction Search() {\n  const {\n    ready,\n    value,\n    suggestions: {\n      status,\n      data\n    },\n    setValue,\n    clearSuggestions\n  } = usePlacesAutocomplete({\n    requestOptions: {\n      location: {\n        lat: () => 53.349804,\n        lng: () => -6.26031\n      },\n      radius: 100 * 1000\n    }\n  });\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"search\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Combobox, {\n    onSelect: address => {\n      console.log(address);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(ComboboxInput, {\n    value: value,\n    onChange: e => {\n      setValue(e.target.value);\n    },\n    disabled: !ready,\n    placeholder: \"Enter an address\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 9\n    }\n  })));\n}","map":{"version":3,"sources":["/Users/evanbyrnes/Pycharm-python-workspace/T13_SP/client/src/components/Directions.js"],"names":["React","Component","DirectionsRenderer","Form","Typeahead","usePlacesAutocomplete","getGeocode","getLatLng","Combobox","ComboboxInput","ComboboxPopover","ComboboxList","ComboboxOption","data","rawData","results","nameOfStops","map","stop","label","stopid","fullname","id","parseInt","geometry","type","pos","lat","parseFloat","latitude","lng","longitude","Directions","state","directions","selected","render","componentDidMount","directionsService","google","maps","DirectionsService","console","log","origin","destination","route","travelMode","TravelMode","WALKING","result","status","DirectionsStatus","OK","setState","error","Search","ready","value","suggestions","setValue","clearSuggestions","requestOptions","location","radius","address","e","target"],"mappings":"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","sourcesContent":["/*global google*/\nimport React, { Component } from \"react\";\nimport { DirectionsRenderer } from \"@react-google-maps/api\";\nimport Form from \"react-bootstrap/Form\";\nimport { Typeahead } from \"react-bootstrap-typeahead\";\nimport usePlacesAutocomplete, {\n  getGeocode,\n  getLatLng,\n} from \"use-places-autocomplete\";\nimport {\n  Combobox,\n  ComboboxInput,\n  ComboboxPopover,\n  ComboboxList,\n  ComboboxOption,\n} from \"@reach/combobox\";\n\nimport * as data from \".././data/db-stops.json\";\n\nconst rawData = data.results;\n\n// need to store the geo data here\nconst nameOfStops = rawData.map((stop) => ({\n  label: \"Stop \" + stop.stopid + \", \" + stop.fullname,\n  id: parseInt(stop.stopid),\n  geometry: {\n    type: \"Point\",\n    pos: {\n      lat: parseFloat(stop.latitude),\n      lng: parseFloat(stop.longitude),\n    },\n  },\n}));\n\nclass Directions extends Component {\n  state = {\n    directions: null,\n    selected: [],\n  };\n\n  render() {\n    return (\n      <Form>\n        <Search />\n        {/* <Form.Group controlId=\"formDeparture\">\n          <Form.Label>Departure</Form.Label>\n          <Typeahead\n            {...this.state}\n            id=\"basic-example\"\n            onChange={(selected) => this.setState({ selected })}\n            options={nameOfStops}\n            // console={console.log(this.state.selected[0])}\n            placeholder=\"Choose a departure stop...\"\n          />\n        </Form.Group> */}\n        <DirectionsRenderer directions={this.state.directions} />\n      </Form>\n    );\n  }\n\n  componentDidMount() {\n    const directionsService = new google.maps.DirectionsService();\n\n    console.log(console.log(this.state.selected));\n\n    // we want to make these variable values, to be able to\n    // pass this information from what has been selected above.\n    const origin = { lat: 53.3472419444, lng: -6.2587911111 };\n    const destination = { lat: 53.3466669444, lng: -6.258325 };\n\n    directionsService.route(\n      {\n        origin: origin,\n        destination: destination,\n        travelMode: google.maps.TravelMode.WALKING,\n      },\n      (result, status) => {\n        if (status === google.maps.DirectionsStatus.OK) {\n          this.setState({\n            directions: result,\n          });\n        } else {\n          console.error(`error fetching directions ${result}`);\n        }\n      }\n    );\n  }\n}\n\nexport default Directions;\n\nfunction Search() {\n  const {\n    ready,\n    value,\n    suggestions: { status, data },\n    setValue,\n    clearSuggestions,\n  } = usePlacesAutocomplete({\n    requestOptions: {\n      location: { lat: () => 53.349804, lng: () => -6.26031 },\n      radius: 100 * 1000,\n    },\n  });\n\n  return (\n    <div className=\"search\">\n      <Combobox\n        onSelect={(address) => {\n          console.log(address);\n        }}\n      >\n        <ComboboxInput\n          value={value}\n          onChange={(e) => {\n            setValue(e.target.value);\n          }}\n          disabled={!ready}\n          placeholder=\"Enter an address\"\n        />\n      </Combobox>\n    </div>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}