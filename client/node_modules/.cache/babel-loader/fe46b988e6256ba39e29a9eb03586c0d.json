{"ast":null,"code":"var _jsxFileName = \"/Users/evanbyrnes/Pycharm-python-workspace/T13_SP/client/src/components/T13GoogleMap.js\";\nimport React, { useState } from \"react\";\nimport { useLoadScript, GoogleMap, Marker, InfoWindow, MarkerClusterer } from \"@react-google-maps/api\";\nimport { Typeahead } from \"react-bootstrap-typeahead\";\nimport \"@reach/combobox/styles.css\"; // Import the Dublin Bus API stops data\n\nimport * as data from \".././data/db-stops.json\"; // Google Maps Api Key.\n\nimport googleMapApiKey from \".././config\"; // Import custom styles to customize the style of Google Map.\n\nconst styles = require(\"../data/GoogleMapStyles.json\"); // Defined custom styles to customize the style of Google Map.\n\n\nconst mapOptions = {\n  styles: styles,\n  disableDefaultUI: true,\n  zoomControl: true\n}; // Google Places functionality.\n\nconst libraries = [\"places\"]; // Icon used to represent a bus stop on the map.\n\nconst icon = {\n  url: \"/Bus-logo.svg\",\n  scaledSize: {\n    width: 18,\n    height: 18\n  }\n}; // Icons used when Markers are clustered.\n\nconst options = {\n  imagePath: \"https://developers.google.com/maps/documentation/javascript/examples/markerclusterer/m\"\n}; // Parsing the Stops data into various object shapes.\n\nconst rawData = data.results;\nconst myStops = rawData.map(stop => ({\n  description: \"Stop \" + stop.stopid + \", \" + stop.fullname,\n  type: \"Feature\",\n  properties: {\n    id: stop.stopid,\n    fullname: stop.fullname,\n    routes: stop.operators[0].routes\n  },\n  geometry: {\n    type: \"Point\",\n    pos: {\n      lat: parseFloat(stop.latitude),\n      lng: parseFloat(stop.longitude)\n    }\n  }\n}));\nconst parsedStops = myStops.map(parsed => ({\n  description: parsed.description,\n  geometry: parsed.geometry.pos\n})); // An array that contains only the names of all the stops.\n\nconst stopDescriptions = [];\n\nfor (var i = 0; i < parsedStops.length; i++) {\n  stopDescriptions.push(parsedStops[i].description);\n}\n\nexport default function T13GoogleMap() {\n  const {\n    isLoaded,\n    loadError\n  } = useLoadScript({\n    googleMapsApiKey: googleMapApiKey,\n    libraries\n  }); // consts: [53.349804, -6.260310] - Dublin\n\n  const [center, setCenter] = useState({\n    lat: 53.349804,\n    lng: -6.26031\n  });\n  const [zoom, setZoom] = useState(11); // The things we need to track in state\n\n  const [selectedPlace, setSelectedPlace] = useState(null);\n  const [markerMap, setMarkerMap] = useState({});\n  const [infoOpen, setInfoOpen] = useState(false);\n  const mapRef = React.useRef();\n  const onMapLoad = React.useCallback(map => {\n    mapRef.current = map;\n  }, []);\n  const panTo = React.useCallback(({\n    lat,\n    lng\n  }) => {\n    mapRef.current.panTo({\n      lat,\n      lng\n    });\n    mapRef.current.setZoom(16);\n  }, []); // We have to create a mapping of our places to actual Marker objects\n\n  const markerLoadHandler = (marker, stop) => {\n    return setMarkerMap(prevState => {\n      return { ...prevState,\n        [stop.properties.id]: marker\n      };\n    });\n  };\n\n  const markerClickHandler = (event, place) => {\n    // Remember which stop was clicked\n    setSelectedPlace(place); // Required so clicking a 2nd marker works as expected\n\n    if (infoOpen) {\n      setInfoOpen(false);\n    }\n\n    setInfoOpen(true);\n  };\n\n  if (loadError) return \"Error\";\n  if (!isLoaded) return \"Loading...\";\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(GoogleMap, {\n    onLoad: onMapLoad,\n    center: center,\n    zoom: zoom,\n    maxZoom: 13,\n    options: mapOptions,\n    mapContainerStyle: {\n      height: \"94vh\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Locate, {\n    panTo: panTo,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(Search, {\n    panTo: panTo,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(MarkerClusterer, {\n    options: options,\n    maxZoom: 16,\n    minimumClusterSize: 6,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 9\n    }\n  }, clusterer => myStops.map(stop => /*#__PURE__*/React.createElement(Marker, {\n    icon: icon,\n    key: stop.properties.id,\n    position: stop.geometry.pos,\n    clusterer: clusterer,\n    onLoad: marker => markerLoadHandler(marker, stop),\n    onClick: event => markerClickHandler(event, stop),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 15\n    }\n  }))), infoOpen && selectedPlace && /*#__PURE__*/React.createElement(InfoWindow, {\n    anchor: markerMap[selectedPlace.properties.id],\n    onCloseClick: () => setInfoOpen(false),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"h3\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 15\n    }\n  }, \"Stop Number: \", selectedPlace.properties.id), /*#__PURE__*/React.createElement(\"h5\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 15\n    }\n  }, \"Routes: \", selectedPlace.properties.routes.join(\", \"))))));\n} // Function to adjust the map to user's location.\n\nfunction Locate({\n  panTo\n}) {\n  return /*#__PURE__*/React.createElement(\"button\", {\n    className: \"locate\",\n    onClick: () => {\n      navigator.geolocation.getCurrentPosition(position => {\n        panTo({\n          // lat: position.coords.latitude,\n          // lng: position.coords.longitude,\n          // Hard coding Dublin for the time being.\n          lat: 53.343,\n          lng: -6.2562\n        });\n      }, () => null);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 152,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"img\", {\n    alt: \"compass\",\n    src: \"/compass.svg\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 169,\n      columnNumber: 7\n    }\n  }));\n} // Function to adjust the map to user's chosen stop(s).\n\n\nfunction Search({\n  panTo\n}) {\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"altSearch\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 177,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Typeahead, {\n    id: \"basic-example\",\n    options: stopDescriptions,\n    maxVisible: 2,\n    placeholder: \"Choose a departure stop...\",\n    onChange: address => {\n      try {\n        for (var i = 0; i < parsedStops.length; i++) {\n          if (address == parsedStops[i].description) {\n            const lat = parsedStops[i].geometry.lat,\n                  lng = parsedStops[i].geometry.lng;\n            panTo({\n              lat,\n              lng\n            });\n          }\n        }\n      } catch (error) {\n        console.log(\"error\");\n      }\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 178,\n      columnNumber: 7\n    }\n  }));\n}","map":{"version":3,"sources":["/Users/evanbyrnes/Pycharm-python-workspace/T13_SP/client/src/components/T13GoogleMap.js"],"names":["React","useState","useLoadScript","GoogleMap","Marker","InfoWindow","MarkerClusterer","Typeahead","data","googleMapApiKey","styles","require","mapOptions","disableDefaultUI","zoomControl","libraries","icon","url","scaledSize","width","height","options","imagePath","rawData","results","myStops","map","stop","description","stopid","fullname","type","properties","id","routes","operators","geometry","pos","lat","parseFloat","latitude","lng","longitude","parsedStops","parsed","stopDescriptions","i","length","push","T13GoogleMap","isLoaded","loadError","googleMapsApiKey","center","setCenter","zoom","setZoom","selectedPlace","setSelectedPlace","markerMap","setMarkerMap","infoOpen","setInfoOpen","mapRef","useRef","onMapLoad","useCallback","current","panTo","markerLoadHandler","marker","prevState","markerClickHandler","event","place","clusterer","join","Locate","navigator","geolocation","getCurrentPosition","position","Search","address","error","console","log"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport {\n  useLoadScript,\n  GoogleMap,\n  Marker,\n  InfoWindow,\n  MarkerClusterer,\n} from \"@react-google-maps/api\";\nimport { Typeahead } from \"react-bootstrap-typeahead\";\nimport \"@reach/combobox/styles.css\";\n// Import the Dublin Bus API stops data\nimport * as data from \".././data/db-stops.json\";\n// Google Maps Api Key.\nimport googleMapApiKey from \".././config\";\n// Import custom styles to customize the style of Google Map.\nconst styles = require(\"../data/GoogleMapStyles.json\");\n// Defined custom styles to customize the style of Google Map.\nconst mapOptions = {\n  styles: styles,\n  disableDefaultUI: true,\n  zoomControl: true,\n};\n// Google Places functionality.\nconst libraries = [\"places\"];\n// Icon used to represent a bus stop on the map.\nconst icon = { url: \"/Bus-logo.svg\", scaledSize: { width: 18, height: 18 } };\n// Icons used when Markers are clustered.\nconst options = {\n  imagePath:\n    \"https://developers.google.com/maps/documentation/javascript/examples/markerclusterer/m\",\n};\n// Parsing the Stops data into various object shapes.\nconst rawData = data.results;\nconst myStops = rawData.map((stop) => ({\n  description: \"Stop \" + stop.stopid + \", \" + stop.fullname,\n  type: \"Feature\",\n  properties: {\n    id: stop.stopid,\n    fullname: stop.fullname,\n    routes: stop.operators[0].routes,\n  },\n  geometry: {\n    type: \"Point\",\n    pos: {\n      lat: parseFloat(stop.latitude),\n      lng: parseFloat(stop.longitude),\n    },\n  },\n}));\nconst parsedStops = myStops.map((parsed) => ({\n  description: parsed.description,\n  geometry: parsed.geometry.pos,\n}));\n// An array that contains only the names of all the stops.\nconst stopDescriptions = [];\nfor (var i = 0; i < parsedStops.length; i++) {\n  stopDescriptions.push(parsedStops[i].description);\n}\n\nexport default function T13GoogleMap() {\n  const { isLoaded, loadError } = useLoadScript({\n    googleMapsApiKey: googleMapApiKey,\n    libraries,\n  });\n  // consts: [53.349804, -6.260310] - Dublin\n  const [center, setCenter] = useState({ lat: 53.349804, lng: -6.26031 });\n  const [zoom, setZoom] = useState(11);\n  // The things we need to track in state\n  const [selectedPlace, setSelectedPlace] = useState(null);\n  const [markerMap, setMarkerMap] = useState({});\n  const [infoOpen, setInfoOpen] = useState(false);\n\n  const mapRef = React.useRef();\n  const onMapLoad = React.useCallback((map) => {\n    mapRef.current = map;\n  }, []);\n\n  const panTo = React.useCallback(({ lat, lng }) => {\n    mapRef.current.panTo({ lat, lng });\n    mapRef.current.setZoom(16);\n  }, []);\n\n  // We have to create a mapping of our places to actual Marker objects\n  const markerLoadHandler = (marker, stop) => {\n    return setMarkerMap((prevState) => {\n      return { ...prevState, [stop.properties.id]: marker };\n    });\n  };\n\n  const markerClickHandler = (event, place) => {\n    // Remember which stop was clicked\n    setSelectedPlace(place);\n    // Required so clicking a 2nd marker works as expected\n    if (infoOpen) {\n      setInfoOpen(false);\n    }\n    setInfoOpen(true);\n  };\n\n  if (loadError) return \"Error\";\n  if (!isLoaded) return \"Loading...\";\n\n  return (\n    <div>\n      <GoogleMap\n        onLoad={onMapLoad}\n        center={center}\n        zoom={zoom}\n        maxZoom={13}\n        options={mapOptions}\n        mapContainerStyle={{\n          height: \"94vh\",\n        }}\n      >\n        <Locate panTo={panTo} />\n        <Search panTo={panTo} />\n\n        <MarkerClusterer options={options} maxZoom={16} minimumClusterSize={6}>\n          {(clusterer) =>\n            myStops.map((stop) => (\n              <Marker\n                icon={icon}\n                key={stop.properties.id}\n                position={stop.geometry.pos}\n                clusterer={clusterer}\n                onLoad={(marker) => markerLoadHandler(marker, stop)}\n                onClick={(event) => markerClickHandler(event, stop)}\n              />\n            ))\n          }\n        </MarkerClusterer>\n\n        {infoOpen && selectedPlace && (\n          <InfoWindow\n            anchor={markerMap[selectedPlace.properties.id]}\n            onCloseClick={() => setInfoOpen(false)}\n          >\n            <div>\n              <h3>Stop Number: {selectedPlace.properties.id}</h3>\n              <h5>Routes: {selectedPlace.properties.routes.join(\", \")}</h5>\n            </div>\n          </InfoWindow>\n        )}\n      </GoogleMap>\n    </div>\n  );\n}\n\n// Function to adjust the map to user's location.\nfunction Locate({ panTo }) {\n  return (\n    <button\n      className=\"locate\"\n      onClick={() => {\n        navigator.geolocation.getCurrentPosition(\n          (position) => {\n            panTo({\n              // lat: position.coords.latitude,\n              // lng: position.coords.longitude,\n              // Hard coding Dublin for the time being.\n              lat: 53.343,\n              lng: -6.2562,\n            });\n          },\n          () => null\n        );\n      }}\n    >\n      <img alt=\"compass\" src=\"/compass.svg\" />\n    </button>\n  );\n}\n\n// Function to adjust the map to user's chosen stop(s).\nfunction Search({ panTo }) {\n  return (\n    <div className=\"altSearch\">\n      <Typeahead\n        id=\"basic-example\"\n        options={stopDescriptions}\n        maxVisible={2}\n        placeholder=\"Choose a departure stop...\"\n        onChange={(address) => {\n          try {\n            for (var i = 0; i < parsedStops.length; i++) {\n              if (address == parsedStops[i].description) {\n                const lat = parsedStops[i].geometry.lat,\n                  lng = parsedStops[i].geometry.lng;\n                panTo({ lat, lng });\n              }\n            }\n          } catch (error) {\n            console.log(\"error\");\n          }\n        }}\n      />\n    </div>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}