{"ast":null,"code":"var _jsxFileName = \"/Users/evanbyrnes/Pycharm-python-workspace/T13_SP/client/src/index.js\";\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nReactDOM.render( /*#__PURE__*/React.createElement(App, {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 7,\n    columnNumber: 17\n  }\n}), document.getElementById('root')); // If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n\nserviceWorker.unregister(); // const rootElement = document.getElementById(\"root\");\n// ReactDOM.render(<SinglePageApplication />, rootElement);\n// // import apikey from config file\n// import googleMapApiKey from './config';\n// import Api from './components/Api';\n// import React, { useState, Fragment } from \"react\";\n// import ReactDOM from \"react-dom\";\n// import styled from 'styled-components';\n// import {\n//   useLoadScript,\n//   GoogleMap,\n//   Marker,\n//   InfoWindow,\n//   MarkerClusterer\n// } from \"@react-google-maps/api\";\n// import DateTimeSelector from './components/DateTimeSelector';\n// import * as data from \"./data/db-stops.json\";\n// const Wrapper = styled.main`\n//   width: 100vh;\n//   height: 100vh;\n// `;\n// const options = {\n//   imagePath: \"https://developers.google.com/maps/documentation/javascript/examples/markerclusterer/m\"\n// };\n// function SinglePageApplication() {\n//   // The things we need to track in state\n//   const [mapRef, setMapRef] = useState(null);\n//   const [selectedPlace, setSelectedPlace] = useState(null);\n//   const [markerMap, setMarkerMap] = useState({});\n//   // consts: [53.349804, -6.260310] - Dublin\n//   const [center, setCenter] = useState({ lat: 53.349804, lng: -6.260310 });\n//   const [zoom, setZoom] = useState(10);\n//   // const [clickedLatLng, setClickedLatLng] = useState(null);\n//   const [infoOpen, setInfoOpen] = useState(false);\n//   // Load the Google maps scripts\n//   const { isLoaded } = useLoadScript({\n//     // Enter your own Google Maps API key\n//     googleMapsApiKey: googleMapApiKey\n//   });\n//   const uncleanData = data.results;\n//   // A GeoJSON Feature object, with the geometry/pos of each object being a GeoJSON Point\n//   // ref: https://www.leighhalliday.com/google-maps-clustering\n//   const myStops = uncleanData.map(stop => ({\n//     type: \"Feature\",\n//     properties: { id: stop.stopid, fullname: stop.fullname, routes: stop.operators[0].routes },\n//     geometry: {\n//       type: \"Point\",\n//       pos: {\n//         lat: parseFloat(stop.latitude),\n//         lng: parseFloat(stop.longitude)  \n//       }\n//     }\n//   }));\n//   // Iterate myStops to size, center, and zoom map to contain all markers\n//   const fitBounds = map => {\n//     const bounds = new window.google.maps.LatLngBounds();\n//     myStops.map(stop => {\n//       bounds.extend(stop.geometry.pos);\n//       return stop.properties.id;\n//     });\n//     map.fitBounds(bounds);\n//   };\n//   const loadHandler = map => {\n//     // Store a reference to the google map instance in state\n//     setMapRef(map);\n//     // Fit map bounds to contain all markers\n//     fitBounds(map);\n//   };\n//   // We have to create a mapping of our places to actual Marker objects\n//   const markerLoadHandler = (marker, stop) => {\n//     return setMarkerMap(prevState => {\n//       return { ...prevState, [stop.properties.id]: marker };\n//     });\n//   };\n//   const markerClickHandler = (event, place) => {\n//     // Remember which stop was clicked\n//     setSelectedPlace(place);\n//     // Required so clicking a 2nd marker works as expected\n//     if (infoOpen) {\n//       setInfoOpen(false);\n//     }\n//     setInfoOpen(true);\n//     // If you want to zoom in a little on marker click\n//     if (zoom < 11) {\n//       setZoom(11);\n//     }\n//     // if you want to center the selected Marker\n//     //setCenter(place.pos)\n//   };\n//   const renderPage = () => {\n//     return (\n//         <Wrapper>\n//           <Wrapper style={{ width: \"75%\", float: \"left\"}}>\n//             <GoogleMap\n//               // Do stuff on map initial laod\n//               onLoad={loadHandler}\n//               // Save the current center position in state\n//               onCenterChanged={() => setCenter(mapRef.getCenter().toJSON())}\n//               // Save the user's map click position\n//               // onClick={e => setClickedLatLng(e.latLng.toJSON())}\n//               center={center}\n//               zoom={zoom}\n//               mapContainerStyle={{\n//                 height: \"100%\"\n//               }}\n//             >\n//               <MarkerClusterer options={options}>\n//                 {clusterer =>\n//                   myStops.map(stop => (\n//                     <Marker \n//                       key={stop.properties.id} \n//                       position={stop.geometry.pos} \n//                       clusterer={clusterer} \n//                       onLoad={marker => markerLoadHandler(marker, stop)}\n//                       onClick={event => markerClickHandler(event, stop)}\n//                       />\n//                   ))\n//                 }\n//               </MarkerClusterer>\n//               {infoOpen && selectedPlace && (\n//                 <InfoWindow\n//                   anchor={markerMap[selectedPlace.properties.id]}\n//                   onCloseClick={() => setInfoOpen(false)}\n//                 >\n//                   <div>\n//                     <h3>STOPID: {selectedPlace.properties.id}</h3>\n//                     <h5>ROUTES: {selectedPlace.properties.routes.join(', ')}</h5>\n//                     {/* <div>This is your info window content</div> */}\n//                   </div>\n//                 </InfoWindow>\n//               )}\n//             </GoogleMap>\n//           </Wrapper>\n//           <Wrapper style= {{ width: \"25%\", float: \"right\" }}>\n//             <DateTimeSelector></DateTimeSelector>\n//             {/* Rendering the database information from here. */}\n//             <Api />\n//           </Wrapper>\n//         </Wrapper>\n//     );\n//   };\n//   return isLoaded ? renderPage() : null;\n// }\n// const rootElement = document.getElementById(\"root\");\n// ReactDOM.render(<SinglePageApplication />, rootElement);","map":{"version":3,"sources":["/Users/evanbyrnes/Pycharm-python-workspace/T13_SP/client/src/index.js"],"names":["React","ReactDOM","App","serviceWorker","render","document","getElementById","unregister"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,QAAP,MAAqB,WAArB;AACA,OAAO,aAAP;AACA,OAAOC,GAAP,MAAgB,OAAhB;AACA,OAAO,KAAKC,aAAZ,MAA+B,iBAA/B;AAEAF,QAAQ,CAACG,MAAT,eAAgB,oBAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAAhB,EAAyBC,QAAQ,CAACC,cAAT,CAAwB,MAAxB,CAAzB,E,CAEA;AACA;AACA;;AACAH,aAAa,CAACI,UAAdsourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n\n\n// const rootElement = document.getElementById(\"root\");\n// ReactDOM.render(<SinglePageApplication />, rootElement);\n\n// // import apikey from config file\n// import googleMapApiKey from './config';\n// import Api from './components/Api';\n\n// import React, { useState, Fragment } from \"react\";\n// import ReactDOM from \"react-dom\";\n// import styled from 'styled-components';\n\n// import {\n//   useLoadScript,\n//   GoogleMap,\n//   Marker,\n//   InfoWindow,\n//   MarkerClusterer\n// } from \"@react-google-maps/api\";\n\n// import DateTimeSelector from './components/DateTimeSelector';\n\n// import * as data from \"./data/db-stops.json\";\n\n// const Wrapper = styled.main`\n//   width: 100vh;\n//   height: 100vh;\n// `;\n\n// const options = {\n//   imagePath: \"https://developers.google.com/maps/documentation/javascript/examples/markerclusterer/m\"\n// };\n\n// function SinglePageApplication() {\n//   // The things we need to track in state\n//   const [mapRef, setMapRef] = useState(null);\n//   const [selectedPlace, setSelectedPlace] = useState(null);\n//   const [markerMap, setMarkerMap] = useState({});\n//   // consts: [53.349804, -6.260310] - Dublin\n//   const [center, setCenter] = useState({ lat: 53.349804, lng: -6.260310 });\n//   const [zoom, setZoom] = useState(10);\n//   // const [clickedLatLng, setClickedLatLng] = useState(null);\n//   const [infoOpen, setInfoOpen] = useState(false);\n\n//   // Load the Google maps scripts\n//   const { isLoaded } = useLoadScript({\n//     // Enter your own Google Maps API key\n//     googleMapsApiKey: googleMapApiKey\n\n//   });\n\n//   const uncleanData = data.results;\n//   // A GeoJSON Feature object, with the geometry/pos of each object being a GeoJSON Point\n//   // ref: https://www.leighhalliday.com/google-maps-clustering\n//   const myStops = uncleanData.map(stop => ({\n//     type: \"Feature\",\n//     properties: { id: stop.stopid, fullname: stop.fullname, routes: stop.operators[0].routes },\n//     geometry: {\n//       type: \"Point\",\n//       pos: {\n//         lat: parseFloat(stop.latitude),\n//         lng: parseFloat(stop.longitude)  \n//       }\n//     }\n//   }));\n\n//   // Iterate myStops to size, center, and zoom map to contain all markers\n//   const fitBounds = map => {\n//     const bounds = new window.google.maps.LatLngBounds();\n//     myStops.map(stop => {\n//       bounds.extend(stop.geometry.pos);\n//       return stop.properties.id;\n//     });\n//     map.fitBounds(bounds);\n//   };\n\n//   const loadHandler = map => {\n//     // Store a reference to the google map instance in state\n//     setMapRef(map);\n//     // Fit map bounds to contain all markers\n//     fitBounds(map);\n//   };\n\n//   // We have to create a mapping of our places to actual Marker objects\n//   const markerLoadHandler = (marker, stop) => {\n//     return setMarkerMap(prevState => {\n//       return { ...prevState, [stop.properties.id]: marker };\n//     });\n//   };\n\n//   const markerClickHandler = (event, place) => {\n//     // Remember which stop was clicked\n//     setSelectedPlace(place);\n\n//     // Required so clicking a 2nd marker works as expected\n//     if (infoOpen) {\n//       setInfoOpen(false);\n//     }\n\n//     setInfoOpen(true);\n\n//     // If you want to zoom in a little on marker click\n//     if (zoom < 11) {\n//       setZoom(11);\n//     }\n\n//     // if you want to center the selected Marker\n//     //setCenter(place.pos)\n//   };\n\n//   const renderPage = () => {\n//     return (\n//         <Wrapper>\n//           <Wrapper style={{ width: \"75%\", float: \"left\"}}>\n//             <GoogleMap\n//               // Do stuff on map initial laod\n//               onLoad={loadHandler}\n//               // Save the current center position in state\n//               onCenterChanged={() => setCenter(mapRef.getCenter().toJSON())}\n//               // Save the user's map click position\n//               // onClick={e => setClickedLatLng(e.latLng.toJSON())}\n//               center={center}\n//               zoom={zoom}\n//               mapContainerStyle={{\n//                 height: \"100%\"\n//               }}\n//             >\n//               <MarkerClusterer options={options}>\n//                 {clusterer =>\n//                   myStops.map(stop => (\n//                     <Marker \n//                       key={stop.properties.id} \n//                       position={stop.geometry.pos} \n//                       clusterer={clusterer} \n//                       onLoad={marker => markerLoadHandler(marker, stop)}\n//                       onClick={event => markerClickHandler(event, stop)}\n//                       />\n//                   ))\n//                 }\n//               </MarkerClusterer>\n\n//               {infoOpen && selectedPlace && (\n//                 <InfoWindow\n//                   anchor={markerMap[selectedPlace.properties.id]}\n//                   onCloseClick={() => setInfoOpen(false)}\n//                 >\n//                   <div>\n//                     <h3>STOPID: {selectedPlace.properties.id}</h3>\n//                     <h5>ROUTES: {selectedPlace.properties.routes.join(', ')}</h5>\n//                     {/* <div>This is your info window content</div> */}\n//                   </div>\n//                 </InfoWindow>\n//               )}\n\n//             </GoogleMap>\n//           </Wrapper>\n          \n//           <Wrapper style= {{ width: \"25%\", float: \"right\" }}>\n\n//             <DateTimeSelector></DateTimeSelector>\n//             {/* Rendering the database information from here. */}\n//             <Api />\n\n//           </Wrapper>\n\n//         </Wrapper>\n//     );\n//   };\n\n//   return isLoaded ? renderPage() : null;\n// }\n\n// const rootElement = document.getElementById(\"root\");\n// ReactDOM.render(<SinglePageApplication />, rootElement);\n"]},"metadata":{},"sourceType":"module"}