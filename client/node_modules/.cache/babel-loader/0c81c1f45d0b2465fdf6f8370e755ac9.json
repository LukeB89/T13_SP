{"ast":null,"code":"import React, { useState } from \"react\";\nimport useSwr from \"swr\";\nconst whore = setInterval(StopsApiCall, 1000); // This code will be used when the api calls are possible\n\nconst fetcher = (...args) => fetch(...args).then(response => response.json());\n\nexport default function StopsApiCall() {\n  const url = \"https://data.smartdublin.ie/cgi-bin/rtpi/busstopinformation?operator=bac\";\n  const {\n    data,\n    error\n  } = useSwr(url, {\n    fetcher\n  });\n  console.log(data.results);\n  const stopData = data.results && !error ? data.results.slice(0, 5000) : [];\n  console.log(stopData);\n}","map":{"version":3,"sources":["/Users/evanbyrnes/Pycharm-python-workspace/T13_SP/client/src/components/StopsApiCall.js"],"names":["React","useState","useSwr","whore","setInterval","StopsApiCall","fetcher","args","fetch","then","response","json","url","data","error","console","log","results","stopData","slice"],"mappings":"AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAOC,MAAP,MAAmB,KAAnB;AAEA,MAAMC,KAAK,GAAGC,WAAW,CAACC,YAAD,EAAe,IAAf,CAAzB,C,CAEA;;AACA,MAAMC,OAAO,GAAG,CAAC,GAAGC,IAAJ,KAAaC,KAAK,CAAC,GAAGD,IAAJ,CAAL,CAAeE,IAAf,CAAqBC,QAAD,IAAcA,QAAQ,CAACC,IAAT,EAAlC,CAA7B;;AAEA,eAAe,SAASN,YAAT,GAAwB;AACrC,QAAMO,GAAG,GACP,0EADF;AAGA,QAAM;AAAEC,IAAAA,IAAF;AAAQC,IAAAA;AAAR,MAAkBZ,MAAM,CAACU,GAAD,EAAM;AAAEN,IAAAA;AAAF,GAAN,CAA9B;AAEAS,EAAAA,OAAO,CAACC,GAAR,CAAYH,IAAI,CAACI,OAAjB;AACA,QAAMC,QAAQ,GAAGL,IAAI,CAACI,OAAL,IAAgB,CAACH,KAAjB,GAAyBD,IAAI,CAACI,OAAL,CAAaE,KAAb,CAAmB,CAAnB,EAAsB,IAAtB,CAAzB,GAAuD,EAAxE;AACAJ,EAAAA,OAAO,CAACC,GAAR,CAAYE,QAAZ;AACD","sourcesContent":["import React, { useState } from \"react\";\nimport useSwr from \"swr\";\n\nconst whore = setInterval(StopsApiCall, 1000);\n\n// This code will be used when the api calls are possible\nconst fetcher = (...args) => fetch(...args).then((response) => response.json());\n\nexport default function StopsApiCall() {\n  const url =\n    \"https://data.smartdublin.ie/cgi-bin/rtpi/busstopinformation?operator=bac\";\n\n  const { data, error } = useSwr(url, { fetcher });\n\n  console.log(data.results);\n  const stopData = data.results && !error ? data.results.slice(0, 5000) : [];\n  console.log(stopData);\n}\n"]},"metadata":{},"sourceType":"module"}